<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Javascript on wd and cc</title><link>https://wdicc.com/tags/javascript/</link><description>Recent content in Javascript on wd and cc</description><generator>Hugo</generator><language>en</language><copyright>wd © 2025</copyright><lastBuildDate>Thu, 01 Nov 2018 12:56:20 +0800</lastBuildDate><atom:link href="https://wdicc.com/tags/javascript/atom.xml" rel="self" type="application/rss+xml"/><item><title>Fear, trust and JavaScript: When types and functional programming fail</title><link>https://wdicc.com/fear-trust-and-javascript/</link><pubDate>Thu, 01 Nov 2018 12:56:20 +0800</pubDate><guid>https://wdicc.com/fear-trust-and-javascript/</guid><description>&lt;p&gt;翻译自 &lt;a href="https://www.reaktor.com/blog/fear-trust-and-javascript/"&gt;Fear, trust and JavaScript: When types and functional programming fail&lt;/a&gt; , 最早是 &lt;a href="https://news.ycombinator.com/item?id=18314628"&gt;hacker news&lt;/a&gt; 看到的。&lt;/p&gt;
&lt;p&gt;
只是翻译大意。&lt;/p&gt;
&lt;p&gt;
作为开发人员，我们需要减少对代码执行失败的恐惧，增强对代码的信心。很多 javascript 开发人员从函数式编程语言和强类型语言里面借鉴思路来将信任交给工具和代码来减少恐惧。类似可选类型，函数转换，和只读化这些思想可以帮助写出更好的 javascript 代码。当把这些想法都加入到 javascript 里面，会有一些妥协，协作起来比较差，并且最终会导致将信任从开发人员交给代码和工具的想法失败。&lt;/p&gt;</description></item><item><title>Upgrade to React 16.3</title><link>https://wdicc.com/upgrade-to-react-16.3/</link><pubDate>Mon, 22 Oct 2018 16:21:30 +0800</pubDate><guid>https://wdicc.com/upgrade-to-react-16.3/</guid><description>&lt;p&gt;随着 React native 升级，React 也升级到了 16.5 了。原来的改成新的生命周期了。&lt;/p&gt;
&lt;div class="src src-javascript"&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-javascript" data-lang="javascript"&gt;&lt;span style="display:flex;"&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt; 1&lt;/span&gt;&lt;span&gt;&lt;span style="color:#007020;font-weight:bold"&gt;class&lt;/span&gt; ExampleComponent &lt;span style="color:#007020;font-weight:bold"&gt;extends&lt;/span&gt; React.Component {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt; 2&lt;/span&gt;&lt;span&gt; &lt;span style="color:#007020;font-weight:bold"&gt;static&lt;/span&gt; getDerivedStateFromProps(nextProps, prevState) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt; 3&lt;/span&gt;&lt;span&gt; &lt;span style="color:#60a0b0;font-style:italic"&gt;// Called after a component is instantiated or before it receives new props.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt; 4&lt;/span&gt;&lt;span&gt;&lt;span style="color:#60a0b0;font-style:italic"&gt;&lt;/span&gt; &lt;span style="color:#60a0b0;font-style:italic"&gt;// Return an object to update state in response to prop changes.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt; 5&lt;/span&gt;&lt;span&gt;&lt;span style="color:#60a0b0;font-style:italic"&gt;&lt;/span&gt; &lt;span style="color:#60a0b0;font-style:italic"&gt;// Return null to indicate no change to state.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt; 6&lt;/span&gt;&lt;span&gt;&lt;span style="color:#60a0b0;font-style:italic"&gt;&lt;/span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt; 7&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt; 8&lt;/span&gt;&lt;span&gt; UNSAFE_componentWillMount() {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt; 9&lt;/span&gt;&lt;span&gt; &lt;span style="color:#60a0b0;font-style:italic"&gt;// New name for componentWillMount()
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt;10&lt;/span&gt;&lt;span&gt;&lt;span style="color:#60a0b0;font-style:italic"&gt;&lt;/span&gt; &lt;span style="color:#60a0b0;font-style:italic"&gt;// Indicates that this method can be unsafe for async rendering.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt;11&lt;/span&gt;&lt;span&gt;&lt;span style="color:#60a0b0;font-style:italic"&gt;&lt;/span&gt; &lt;span style="color:#60a0b0;font-style:italic"&gt;// Prefer componentDidMount() instead.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt;12&lt;/span&gt;&lt;span&gt;&lt;span style="color:#60a0b0;font-style:italic"&gt;&lt;/span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt;13&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt;14&lt;/span&gt;&lt;span&gt; UNSAFE_componentWillUpdate(nextProps, nextState) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt;15&lt;/span&gt;&lt;span&gt; &lt;span style="color:#60a0b0;font-style:italic"&gt;// New name for componentWillUpdate()
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt;16&lt;/span&gt;&lt;span&gt;&lt;span style="color:#60a0b0;font-style:italic"&gt;&lt;/span&gt; &lt;span style="color:#60a0b0;font-style:italic"&gt;// Indicates that this method can be unsafe for async rendering.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt;17&lt;/span&gt;&lt;span&gt;&lt;span style="color:#60a0b0;font-style:italic"&gt;&lt;/span&gt; &lt;span style="color:#60a0b0;font-style:italic"&gt;// Prefer componentDidUpdate() instead.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt;18&lt;/span&gt;&lt;span&gt;&lt;span style="color:#60a0b0;font-style:italic"&gt;&lt;/span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt;19&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt;20&lt;/span&gt;&lt;span&gt; UNSAFE_componentWillReceiveProps(nextProps) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt;21&lt;/span&gt;&lt;span&gt; &lt;span style="color:#60a0b0;font-style:italic"&gt;// New name for componentWillReceiveProps()
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt;22&lt;/span&gt;&lt;span&gt;&lt;span style="color:#60a0b0;font-style:italic"&gt;&lt;/span&gt; &lt;span style="color:#60a0b0;font-style:italic"&gt;// Indicates that this method can be unsafe for async rendering.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt;23&lt;/span&gt;&lt;span&gt;&lt;span style="color:#60a0b0;font-style:italic"&gt;&lt;/span&gt; &lt;span style="color:#60a0b0;font-style:italic"&gt;// Prefer static getDerivedStateFromProps() instead.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt;24&lt;/span&gt;&lt;span&gt;&lt;span style="color:#60a0b0;font-style:italic"&gt;&lt;/span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt;25&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
React 在后面的版本里面，这几个方法都会被加上 &lt;code class="verbatim"&gt;UNSAFE_&lt;/code&gt; ，直到被移除。&lt;/p&gt;</description></item><item><title>Geodesy</title><link>https://wdicc.com/geodesy/</link><pubDate>Sun, 01 Jul 2018 08:10:05 +0800</pubDate><guid>https://wdicc.com/geodesy/</guid><description>&lt;p&gt;
坐标点之间的距离角度计算不能简单的用平面几何来算，得按照球面计算，PostgreSQL 提供了 gis 数据的计算支持，各种图形关系判断，距离计算等等。但是我们有时候也需要在 js 里面计算，开始的时候尝试自己按照公式写来着，写了一些发现太蛋疼了，因为只是单纯的看公式，缺少空间概念，算的对不对啥的都不知道。后来发现了这个 &lt;a href="https://github.com/chrisveness/geodesy"&gt;js 库&lt;/a&gt;，简直太贴心了。&lt;/p&gt;</description></item><item><title>介绍下 openresty</title><link>https://wdicc.com/intro-openresty/</link><pubDate>Sun, 23 Oct 2011 00:00:00 +0000</pubDate><guid>https://wdicc.com/intro-openresty/</guid><description>一直没有时间使用 ngx_lua，上周算是真正使用了下，总结下，也算是帮忙推广下 openresty。&lt;br /&gt;
&lt;div id="outline-container-1" class="outline-2"&gt;&lt;br /&gt;
&lt;h2 id="sec-1"&gt;什么是 openresty&lt;/h2&gt;&lt;br /&gt;
&lt;div id="text-1" class="outline-text-2"&gt;&lt;br /&gt;

openresty 的主力作者是 &lt;a href="http://weibo.com/agentzh"&gt;@agentzh&lt;/a&gt; 它的网页在 &lt;a href="http://openresty.org"&gt;这里&lt;/a&gt;，上面有介绍。按我的理解，他是介于客户端浏览器 js 和数据库之间的一层。&lt;br /&gt;

在 ajex 还没有盛行的时代，数据库的数据需要展现在浏览器的时候，一般都是使用 php/jsp 之类读取数据，然后拼表格/图表这些。在客户端机器越来越牛逼之后，把部分运算放在浏览器里面开始盛行，ajex 也越来越流行。这个时候通常还需要有个服务器端的程序来配合从数据库获取并提供数据，应该也有不少类似的程序来提供这个数据。&lt;br /&gt;

老版本的 openresty 是基于 perl 做的，可以上 cpan 上面 &lt;a href="http://search.cpan.org/~agent/OpenResty-0.5.12/lib/OpenResty/Spec/REST_cn.pod"&gt;搜到&lt;/a&gt; (不知道为啥这页面我打不开了)。agentzh 还专门为他写了一个 admin site，纯 js + oprensty 来实现的，可以直接在上面配置接口，很方便。目前老版本应该没人用了。&lt;br /&gt;

新版本的 openresty 基本上等于是 nginx 和一些 nginx 模块的集合，大部分模块都是 agentzh 和 &lt;a href="https://github.com/chaoslawful"&gt;chaoslawful&lt;/a&gt; 完成的，目前 agentzh 离职在家全职开发 openresty 相关，chaoslawful 还在淘宝 &lt;a href="http://linezing.com"&gt;量子统计&lt;/a&gt; 。&lt;br /&gt;

这大概就是我了解的 openresty 的起源和目前的情况。写的比较简单，里面的曲折就不多说了，可以找上面提到的大牛聊天。&lt;br /&gt;

&lt;/div&gt;&lt;br /&gt;
&lt;/div&gt;&lt;br /&gt;
&lt;div id="outline-container-2" class="outline-2"&gt;&lt;br /&gt;
&lt;h2 id="sec-2"&gt;怎么使用 openresty&lt;/h2&gt;&lt;br /&gt;
&lt;div id="text-2" class="outline-text-2"&gt;&lt;br /&gt;

我下面用一个简单的例子来描述下，我是怎么使用 openresty 的，从中应该能看出来 openresty 能干啥，怎么用。&lt;br /&gt;

&lt;/div&gt;&lt;br /&gt;
&lt;div id="outline-container-2-1" class="outline-3"&gt;&lt;br /&gt;
&lt;h3 id="sec-2-1"&gt;需求&lt;/h3&gt;&lt;br /&gt;
&lt;div id="text-2-1" class="outline-text-3"&gt;&lt;br /&gt;

在 postgresql 数据库有张网站日访问流量表，包含两个字段 thedate 和 pv。需要把里面的数据展现出来，画出来流量曲线。&lt;br /&gt;

&lt;dl&gt;&lt;dt&gt;注意&lt;/dt&gt;&lt;dd&gt;下面的代码大都从现有程序里面扒出来的，所以不一定直接就能用，只是个示意而已。&lt;/dd&gt;&lt;/dl&gt;&lt;/div&gt;&lt;br /&gt;
&lt;/div&gt;&lt;br /&gt;
&lt;div id="outline-container-2-2" class="outline-3"&gt;&lt;br /&gt;
&lt;h3 id="sec-2-2"&gt;安装 openresty&lt;/h3&gt;&lt;br /&gt;
&lt;div id="text-2-2" class="outline-text-3"&gt;&lt;br /&gt;

首先需要安装 openresty。从 &lt;a href="http://openresty.org"&gt;openresty.org&lt;/a&gt; 下载当前的 stable 版本 ngx_openresty-1.0.6.22.tar.gz。&lt;br /&gt;
&lt;pre class="prettyprint lang-bash"&gt;
$ cd ngx_openresty-1.0.6.22
$ ./configure --with-http_drizzle_module --with-http_postgres_module --with-pg_config=/opt/pg90/bin/pg_config --prefix=/usr/local/openresty --with-libdrizzle=/usr/local/libdrizzle/ --with-luajit --with-http_iconv_module # 这是我用到的参数，按照需要加减
$ make
# make install&lt;/pre&gt;
configure 的时候 postgres_module 是必须的，其他的 drizzle_module 是用来支持从 mysql 获取数据的，iconv_module 是用来做编码转换的，luajit 据说可以提升不少性能。

不出问题的话，在 /usr/local/openresty 目录下面就安装好了。其实更合理的方式应该是提供一个 rpm 或者 deb 包的。

&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-2-3" class="outline-3"&gt;
&lt;h3 id="sec-2-3"&gt;启动 nginx&lt;/h3&gt;
&lt;div id="text-2-3" class="outline-text-3"&gt;

openresty 给提供了简单可用的 nginx.conf，所以现在可以先尝试启动下 /usr/local/openresty/nginx/sbin/nginx 了，如果启动没问题，那就 ok 了。

配置文件在 /usr/local/openresty/nginx/conf/nginx.conf。

&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-2-4" class="outline-3"&gt;
&lt;h3 id="sec-2-4"&gt;配置 nginx&lt;/h3&gt;
&lt;div id="text-2-4" class="outline-text-3"&gt;

主要就是配置 /usr/local/openresty/nginx/conf/nginx.conf，以后很多事情都会在这里面来完成，说是 nginx.conf 编程也不为过，呵呵。

增加下面的配置
&lt;pre class="prettyprint lang-conf"&gt;

 upstream pgsql {
 postgres_server server_ip:5432 dbname=test password=123 user=test;
 #postgres_keepalive max=2 mode=single overflow=reject;
 postgres_keepalive off;
 }

# server 里面增加一个 location

 location /=/pv {
 postgres_query 'select thedate, pv from pv';
 postgres_pass pgsql;

 rds_json on;
 rds_json_format compact;

 xss_get on;
 xss_callback_arg '_c';
 }&lt;/pre&gt;
&lt;ol&gt;
	&lt;li&gt;其中关于 upstream postgres 用来定义需要连接的数据库信息，和发送 sql 到数据库，可以参考 &lt;a href="https://github.com/FRiCKLE/ngx_postgres/"&gt;这里&lt;/a&gt;。&lt;/li&gt;
	&lt;li&gt;rds_json 用来将数据库的输出变成 json 格式，可以参考 &lt;a href="https://github.com/agentzh/rds-json-nginx-module"&gt;这里&lt;/a&gt; 。&lt;/li&gt;
	&lt;li&gt;xss_get 用来支持跨域，jquery 默认使用的 callback 参数是 _c，可以参考 &lt;a href="https://github.com/agentzh/xss-nginx-module"&gt;这里&lt;/a&gt;。&lt;/li&gt;
&lt;/ol&gt;
这样配置好之后，重启下。结果应该很清晰了，请求 &lt;a href="http://your_ip/=/pv"&gt;http://your\_ip/=/pv&lt;/a&gt; 应该就可以得到数据库里面的数据了，可以使用 curl 看看结果，应该类似下面的
&lt;pre class="prettyprint lang-json"&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-2-5" class="outline-3"&gt;
&lt;h3 id="sec-2-5"&gt;js 画图&lt;/h3&gt;
&lt;div id="text-2-5" class="outline-text-3"&gt;

挑一个画图程序，比如我用过的 &lt;a href="http://highcharts.com"&gt;highcharts&lt;/a&gt;, &lt;a href="http://www.amcharts.com/"&gt;amcharts&lt;/a&gt; 这些都不错，amcharts 是使用 flash 画图，兼容各种浏览器，highcharts 号称也支持，不过我弄出来的图在 chrome/firefox 下面没问题，ie 不支持，他用的是 svg 标签。

就写几行代码来示意下吧
&lt;pre class="prettyprint lang-javascript"&gt;
 $.ajax({
 url : 'http://your_ip/=/pv',
 success: function (data) {
 renderPvCharts(data);
 }
 });

 function renderPvCharts(data) {
 $('body').append('&lt;/pre&gt;
&lt;pre class="prettyprint lang-javascript"&gt;
 var result = Utils.getSplineChartSeries( data ); # 将 nginx 返回的 json 格式数据转化为 highcharts 需要的格式
 var options = {
			chart: {
 zoomType: 'xy',
				renderTo: 'pv', # div 的 id
				defaultSeriesType: 'spline'
			},
			title: {
 text: '每日 pv'
 },
			xAxis: {
 type: 'datetime'
			},
			tooltip: {
				formatter: function() {
			 return '&lt;strong&gt;'+ this.series.name +'&lt;/strong&gt;
'+
						Highcharts.dateFormat('%e. %b', this.x) +': '+ this.y;
				}
			},
			legend: {
				layout: 'vertical',
				align: 'right',
				verticalAlign: 'top',
				x: -10,
				y: 100,
				borderWidth: 0
			},
 series : result.y
 };

 var chart = new Highcharts.Chart( options );
 };

} );&lt;/pre&gt;
简单解释下
&lt;ol&gt;
	&lt;li&gt;在页面 readay 的时候，使用 ajex 设置回调函数并请求接口。&lt;/li&gt;
	&lt;li&gt;回调函数里面使用 Utils.getSplineChartSeries 转换一下数据，方便直接给 options 里面数据赋值，具体需要的数据格式，看 highcharts 的 spline 的 demo 就可以。&lt;/li&gt;
	&lt;li&gt;回调函数里面显示图表。&lt;/li&gt;
&lt;/ol&gt;
这样就完事了，数据就展现出来了。

&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-2-6" class="outline-3"&gt;
&lt;h3 id="sec-2-6"&gt;其他&lt;/h3&gt;
&lt;div id="text-2-6" class="outline-text-3"&gt;

从上面可以看到整个数据流是怎么回事。openresty 可以做的事情远比上面描述的复杂，上面只是个最简单的应用了。
&lt;ol&gt;
	&lt;li&gt;比如使用 &lt;a href="https://github.com/agentzh/rds-csv-nginx-module"&gt;rds_csv&lt;/a&gt; 来直接得到 csv 格式的数据提供给用户，而不是 json。&lt;/li&gt;
	&lt;li&gt;可以使用 &lt;a href="https://github.com/chaoslawful/lua-nginx-module"&gt;ngx_lua&lt;/a&gt; 在 nginx.conf 里面使用 lua 来在服务器端对数据做一些处理再丢给浏览器。
大家都知道 js 处理的数据太大的时候，会导致浏览器卡死，所以如果不方便通过 sql 控制输出的时候，可以使用 lua 来处理下。当然 这只是其中一个应用，使用 ngx_lua 你可以干很多事情，比如上面那个使用 js 来生成 spline 数据的函数就可以用 lua 来实现，lua 还可以和 c 结合来做一些事情。对于 location 的参数，在 ngx_lua 里面也是可以访问的，比如 ngx.var.arg_c 这样。具体还是看 wiki 吧，写不完的。
&lt;ol&gt;
	&lt;li&gt;openresty 还能直接访问 redis 和 memcached。&lt;/li&gt;
&lt;/ol&gt;
本篇只能算是一个入门而已，openresty 在淘宝量子统计的应用非常广泛。另外在 &lt;a href="http://qunar.com"&gt;去哪网&lt;/a&gt; 也有不少应用，比如我知道的安全过滤模块，和一些数据报表，都是基于 openresty 的。

附一个 highcarts 画的图

&lt;img class="alignnone" title="流量情况" src="http://wdicc.com/images/2011-10-24-171245_1100x312_scrot.png" alt="" width="1100" height="312" /&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description></item></channel></rss>