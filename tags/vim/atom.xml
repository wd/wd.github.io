<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Vim on wd and cc</title>
    <link>https://wdicc.com/tags/vim/</link>
    <description>Recent content in Vim on wd and cc</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sun, 18 Apr 2010 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://wdicc.com/tags/vim/atom.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>我是怎么从 vim 转向 emacs 的</title>
      <link>https://wdicc.com/%E6%88%91%E6%98%AF%E6%80%8E%E4%B9%88%E4%BB%8E-vim-%E8%BD%AC%E5%90%91-emacs-%E7%9A%84/</link>
      <pubDate>Sun, 18 Apr 2010 00:00:00 +0000</pubDate>
      
      <guid>https://wdicc.com/%E6%88%91%E6%98%AF%E6%80%8E%E4%B9%88%E4%BB%8E-vim-%E8%BD%AC%E5%90%91-emacs-%E7%9A%84/</guid>
      <description>从尝试用 emacs，到现在基本（有些地方还不是很适应）习惯用 emacs，算起来得有 n 年了，我都忘记最早接触 emacs 是什么时候了。在 2010-3-20 之前尝试过很多次，基本都是记几个快捷键，过几天就又忘记了。后来自己想了下为什么不能持续的原因，我觉得有两个。
1 没有在日常工作里面使用。
之前我的开发工作基本都是直接在某台服务器上面的，这样就开发调试会比较方便，而那些机器一般要不会装 emacs，这样不常用就会导致记住的快捷键过几天就忘记了。最近刚好需要在本机写点程序，也就刚好用上了。
2 不会 elisp。
emacs 的配置文件都是 elisp 写的，而不经过配置的 emacs 就编辑文件来看，我觉得还不如去用 vim，vim 好用多了。我想刚看到 elisp 的时候一般都会觉得这个语言太变态了，全是一堆的括号。。。而不会 elisp 就会导致你只能去机械的复制别人的配置，如果刚好是你想要的，那还好，而如果还想做点小的修改，那就会很郁闷，用起来郁闷，不用可能更郁闷。不爽多了，就干脆不用 emacs 了。
如果你能在日常工作中经常使用，并且会写程序（比如 php,perl 什么的，随便哪个都行），那么对于基本没怎么配置过 .vimrc 的用户来说，切换到 emacs 其实应该还算是一个比较简单的事情。
1 emacs 是无模式的。
这就是说你不用经常去按那个 Esc 来切换模式了。没有模式也就意味着你不能使用像 vim 那么简短的命令了，因为像 a,i,o,h,j,k 这些对 emacs 来说，这些都是正常的输入字符，所以我们不得不在这些字符前面加上 C(control), M(Meta 一般是 Alt), S(shift) 这些前缀。在 emacs 里面需要按的可能还远不止这些控制字符加一个普通字符，比如我定义的 C-c n E 来打开 erc。不要被这些吓着了，并不需要你记住所有的，你只要记住你常用的就好了。
2 emacs 里面的 buffer。
打开一个文件，就会出现一个 buffer。调用帮助，也会打开 buffer。使用 emacs 绝对不要和一些自动出现的 buffer 过不去，使用 emacs 的理念就是一个编辑器 n 个 buffer，编辑文件的，看 mail、news 的，上 irc 的等等。你需要的是一个方便的 buffer 切换的工具，推荐的有 ido-mode 和 ibuffer。</description>
    </item>
    
    <item>
      <title>VIM查找替换归纳总结zz</title>
      <link>https://wdicc.com/vim%E6%9F%A5%E6%89%BE%E6%9B%BF%E6%8D%A2%E5%BD%92%E7%BA%B3%E6%80%BB%E7%BB%93zz/</link>
      <pubDate>Tue, 18 Apr 2006 00:00:00 +0000</pubDate>
      
      <guid>https://wdicc.com/vim%E6%9F%A5%E6%89%BE%E6%9B%BF%E6%8D%A2%E5%BD%92%E7%BA%B3%E6%80%BB%E7%BB%93zz/</guid>
      <description>http://spaces.msn.com/dingy/blog/cns!2F24B9E66A542581!327.entry
VIM中常用的替换模式总结。
1，简单替换表达式
替换命令可以在全文中用一个单词替换另一个单词：
:%s/four/4/g
&#34;%&#34; 范围前缀表示在所有行中执行替换。最后的 &#34;g&#34; 标记表示替换行中的所有匹配点。如果仅仅对当前行进行操作，那么只要去掉%即可
&amp;nbsp; 如果你有一个象 &#34;thirtyfour&#34; 这样的单词，上面的命令会出错。这种情况下，这个单词会被替换成&#34;thirty4&#34;。要解决这个问题，用 &#34;\&amp;lt;&#34; 来指定匹配单词开头：
&amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp; :%s/\&amp;lt;four/4/g
显然，这样在处理 &#34;fourty&#34; 的时候还是会出错。用 &#34;\&amp;gt;&#34; 来解决这个问题：
&amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp; :%s/\&amp;lt;four\&amp;gt;/4/g
如果你在编码，你可能只想替换注释中的 &#34;four&#34;，而保留代码中的。由于这很难指定，可以在替换命令中加一个 &#34;c&#34; 标记，这样，Vim 会在每次替换前提示你：
&amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp; :%s/\&amp;lt;four\&amp;gt;/4/gc
2，删除多余的空格
要删除这些每行后面多余的空格，可以执行如下命令：
&amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp; :%s/\s\+$//
命令前面指明范围是 &#34;%&#34;，所以这会作用于整个文件。&#34;substitute&#34; 命令的匹配模式是
&#34;\s\+$&#34;。这表示行末（$）前的一个或者多个（\+）空格（\s）。替换命令的 &#34;to&#34; 部分是空的：&#34;//&#34;。这样就会删除那些匹配的空白字符。
3，匹配重复性模式
星号项 &#34;*&#34; 规定在它前面的项可以重复任意次。因此:
&amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp; /a*
匹配 &#34;a&#34;，&#34;aa&#34;，&#34;aaa&#34;，等等。但也匹配 &#34;&#34; (空字串)，因为零次也包含在内。星号 &#34;*&#34; 仅仅应用于那个紧邻在它前面的项。因此 &#34;ab*&#34; 匹配 &#34;a&#34;，&#34;ab&#34;，&#34;abb&#34;,&#34;abbb&#34;，等等。如要多次重复整个字符串，那么该字符串必须被组成一个项。组成一项的方法就是在它前面加 &#34;\(&#34;，后面加 &#34;\)&#34;。因此这个命令:
&amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp; /\(ab\)*</description>
    </item>
    
  </channel>
</rss>