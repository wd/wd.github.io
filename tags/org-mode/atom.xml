<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Org-Mode on wd and cc</title><link>https://wdicc.com/tags/org-mode/</link><description>Recent content in Org-Mode on wd and cc</description><generator>Hugo</generator><language>en</language><copyright>wd © 2025</copyright><lastBuildDate>Sun, 12 Mar 2017 08:59:19 +0800</lastBuildDate><atom:link href="https://wdicc.com/tags/org-mode/atom.xml" rel="self" type="application/rss+xml"/><item><title>Use org mode to publish blog</title><link>https://wdicc.com/use-org-mode-to-publish-blog/</link><pubDate>Sun, 12 Mar 2017 08:59:19 +0800</pubDate><guid>https://wdicc.com/use-org-mode-to-publish-blog/</guid><description>&lt;p>
a test&lt;/p>
&lt;p>
啊哈哈哈哈，超棒唉。markdown 里面写代码都没有高亮，org 里面是可以把代码部分高亮的。
效果可以看 &lt;a href="https://goo.gl/photos/E8p1WX34rfAQn31v9">这里&lt;/a>&lt;/p>
&lt;div id="outline-container-headline-1" class="outline-3">
&lt;h3 id="headline-1">
Title1
&lt;/h3>
&lt;div id="outline-text-headline-1" class="outline-text-3">
&lt;div id="outline-container-headline-2" class="outline-4">
&lt;h4 id="headline-2">
title2
&lt;/h4>
&lt;div id="outline-text-headline-2" class="outline-text-4">
&lt;ul>
&lt;li>list1&lt;/li>
&lt;li>list2&lt;/li>
&lt;li>list3&lt;/li>
&lt;/ul>
&lt;div class="src src-python">
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>&lt;span style="color:#007020;font-weight:bold">import&lt;/span> &lt;span style="color:#0e84b5;font-weight:bold">sys&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3&lt;/span>&lt;span>&lt;span style="color:#007020;font-weight:bold">class&lt;/span> &lt;span style="color:#0e84b5;font-weight:bold">Hugo&lt;/span>(&lt;span style="color:#007020">object&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4&lt;/span>&lt;span> &lt;span style="color:#007020;font-weight:bold">def&lt;/span> &lt;span style="color:#06287e">__init__&lt;/span>(&lt;span style="color:#007020">self&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5&lt;/span>&lt;span> &lt;span style="color:#007020;font-weight:bold">pass&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7&lt;/span>&lt;span>hugo &lt;span style="color:#666">=&lt;/span> Hugo()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">8&lt;/span>&lt;span>&lt;span style="color:#007020">print&lt;/span>(hugo)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">9&lt;/span>&lt;span>&lt;span style="color:#007020">print&lt;/span>(&lt;span style="color:#4070a0">&amp;#34;just a test&amp;#34;&lt;/span>)&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div></description></item><item><title>org-mode 里面自动归档任务</title><link>https://wdicc.com/auto-archive-task-for-org-mode/</link><pubDate>Sun, 08 Apr 2012 00:00:00 +0000</pubDate><guid>https://wdicc.com/auto-archive-task-for-org-mode/</guid><description>&lt;p>我想应该有不少人在使用 emacs 的 org-mode 来做笔记，任务管理等。我使用 org-mode 比较多的情况是使用他做一些提纲，类似思维导图一样，以及用它来管理 todo list。&lt;br />
&lt;/p>&lt;br />
&lt;p>&lt;br />
org-mode 本身提供了 remember 来创建 todo list。&lt;br />
&lt;/p>&lt;br />
&lt;p>&lt;br />
新建一个 org 文件 ~/org/todo.org，包含两行内容如下&lt;br />
&lt;/p></description></item><item><title>使用 org-mode 来做自己的 job tracker</title><link>https://wdicc.com/use-org-mode-as-a-job-tracker/</link><pubDate>Fri, 23 Jul 2010 00:00:00 +0000</pubDate><guid>https://wdicc.com/use-org-mode-as-a-job-tracker/</guid><description>用 emacs 的应该都知道 org-mode 这个大杀器，一直以来都想在工作里面用上他，可总是习惯不了。&lt;br />

这几天尝试把 org-mode 打造成了我的一个 job tracker，用来记录自己的 todo 和完成情况。&lt;br />

&lt;pre class="prettyprint lang-lisp">
;;
;; org-mode
;;

;; (setq org-agenda-files '("~/org"))
(setq org-agenda-files (file-expand-wildcards "~/org/*.org")) ;; 把 ~/org/*.org 都加入到 agenda 里面，使用 C-c a a 看 agenda 的时候，会从这些文件里面读
(add-to-list 'auto-mode-alist '("\\.org$" . org-mode))
(define-key global-map "\C-cl" 'org-store-link)
(define-key global-map "\C-ca" 'org-agenda)
(setq org-log-done t) ;; 变到 done 状态的时候，记录一下时间

(add-hook 'org-mode-hook
 (lambda ()
 (org-set-local 'yas/trigger-key [tab])
 (define-key yas/keymap [tab] 'yas/next-field-group)))

(setq org-todo-keywords
 '((sequence "TODO(t)" "WAIT(w@/!)" "|" "DONE(d!)" "CANCELED(c@)"))) ;; 设置一下 todo 的关键字，| 左边的是未完成状态，右边是 done 的状态


(setq org-default-notes-file "~/org/todo.org") ;; 设置 remember 的默认文件 

;;; Load Org Remember Stuff
(require 'remember)
(org-remember-insinuate)

;; Start clock in a remember buffer and switch back to previous clocking task on save
;; (add-hook 'remember-mode-hook 'org-clock-in 'append)
;; (add-hook 'org-remember-before-finalize-hook 'bh/clock-in-interrupted-task)

;; I use C-M-r to start org-remember
(global-set-key (kbd "C-c m r") 'org-remember)
;; (define-key global-map "\C-cr" 'org-remember)

;; Keep clocks running
(setq org-remember-clock-out-on-exit nil)

;; C-c C-c stores the note immediately
(setq org-remember-store-without-prompt t)

;; I don't use this -- but set it in case I forget to specify a location in a future template
(setq org-remember-default-headline "Tasks") ;; 设置默认 remember 添加的 headline

;; 3 remember templates for TODO tasks, Notes, and Phone calls
(setq org-remember-templates (quote (("todo" ?t "** TODO %?\nCREATED: %U" nil nil nil)
 ;; ("note" ?n "* %? :NOTE:\n %U\n %a\n :CLOCK:\n :END:" nil bottom nil)
 ;; ("appointment" ?a "* %?\n %U" "~/git/org/todo.org" "Appointments" nil)
 ;; ("org-protocol" ?w "* TODO Review %c%!\n %U" nil bottom nil))))
 ))) ;;设置 todo 的模板，里面第三个参数是模板，里面的变量的意思 google 下


&lt;/pre>&lt;br />

在 todo.org 里面有两个 headline，一个是 * Tasks ，一个是 * Done。&lt;br />

配置好后，在任意的 buffer 按 C-c m r 就可以打开个 buffer，输入 todo 信息，然后按 C-c C-c 就可以把 todo 添加到 todo.org 里面去了，会添加到 * Tasks 这个 headline 下面。&lt;br />

完成一个任务的时候，在那上面按 C-c C-t 然后选择 done 就可以设置完成。手动（还不会自动。。。）把完成的任务挪到 Done 里面。&lt;br />

如果想看看有完成情况的统计，可以在 agenda 里面看，C-c a a，然后按 v，选择不同的模式看。每周的工作情况在那里面一目了然，呵呵。&lt;br />

&lt;pre class="prettyprint">
Week-agenda (W29):
Monday 19 July 2010 W29
Tuesday 20 July 2010
Wednesday 21 July 2010
 todo: 17:33...... [ TODO 多看看 org-mode 的 agenda
Thursday 22 July 2010
 todo: 15:18...... Closed: DONE a test
 todo: 15:18...... [ DONE a test
Friday 23 July 2010
 todo: 14:50...... [ TODO 梳理一下
 todo: 17:08...... [ TODO 了解下
 todo: 22:49...... [ TODO 申请
Saturday 24 July 2010
Sunday 25 July 2010
&lt;/pre>&lt;br /></description></item></channel></rss>