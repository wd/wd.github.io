<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>grub on wd and cc</title>
    <link>https://wdicc.com/tags/grub/</link>
    <description>Recent content in grub on wd and cc</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 29 Jun 2018 20:03:54 +0800</lastBuildDate>
    
	<atom:link href="https://wdicc.com/tags/grub/atom.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Grub2 and UEFI</title>
      <link>https://wdicc.com/grub2-and-uefi/</link>
      <pubDate>Fri, 29 Jun 2018 20:03:54 +0800</pubDate>
      
      <guid>https://wdicc.com/grub2-and-uefi/</guid>
      <description>这几天搞 Linux 又学习了一些新的东西。  以前都是把 grub 装到 MBR，然后通过 grub 可以 chainloader 启动 windows。现在发现我装了之后并不能启动我的 windows 10 了，就只好研究了一下。 GPT 分区   以前都是 MBR(Master Boot Record) 形式的分区，主分区 4 个，如果想要建更多，需要建扩展分区，然后再在扩展分区里面建立逻辑分区。现在发现有了 GPT(GUID Partition Table) 分区。这个方式呢，比 MBR 方式有好处，支持更多分区，支持大于 2.2TB 容量的磁盘。  我看我的 windows 10 机器预装就是用的这个分区格式。 UEFI 系统   UEFI(Unified Extensible Firmware Interface) 是基于 BIOS 的 MBR 启动方式不同的东西，是基于单独的 EFI System Partition(ESP) 里面的数据启动的。里面的程序都需要和 UEFI firmware 的 bitness 一致，x86_64 啥的。  所以我的 windows 10 在 ESP 分区里面已经放了一个自己的起动器。Linux 启动之后，可以查看 /sys/firmware/efi 看看是不是有，有的话表示 kernel 支持 efi，且和 firmware 的 bitness 一致。  ESP 分区是 fat16/fat32 格式的，不像 mbr 在固定位置，到底是哪个分区是呢？是通过通过分区的 boot flag 这个标志来识别的。 efibootmgr   Linux 下面可以使用 efibootmgr 管理 efi 菜单，当然得 kernel 支持，主要看 /sys/firmware/efi 目录吧。具体内核参数可以看这个。我看着应该是只有通过 efi 启动的系统，才能读取 efi firmware 的信息。否则就算有内核模块也不能读取。  我还发现我这的机器上面通过 efibootmgr 删除了 windows 的行之后，启动的时候按 F12 出来的启动选项里面还有 windwos，会自动加回来，不知道是主板的保护还是哪里的问题，bios 里面没找到可以关闭这个功能的地方。 Grub   grub 支持安装到 MBR 也支持安装到 ESP 分区。不过只是把内容放到那个分区，最后给 efi 加启动的菜单，还需要 efibootmgr，就是需要相应的内核支持。  类似这样，就是通过 uefi 启动了。 1  # grub-install --target=x86_64-efi --efi-directory=/mnt/sda1 --bootloader-id=GRUB --boot-directory=/mnt/sda4/boot /dev/sda     也可以装到 MBR，就是通过传统的 bios 启动。可能需要加 --force ，我遇到的情况会提示 gpt 分区的 boot flag 没有，我这直接不理他加 force 就可以。 1  # grub-install --boot-directory=/mnt/sda4/boot /dev/sda     grub 实际上是放到第一个分区前面的一部分空间里面的，传统的 MBR 方式分区软件一般会预留 31kb 从第 63 个扇区开始分区。对于 GPT 分区，因为会有一个 ESP 分区，grub 也可以直接利用这个，装到这个分区，ESP 分区会有一个 bootable flag，因为这等于是单独给 grub 用的分区，所以 grub 也不客气会直接覆盖里面的东西，用自己的文件系统格式，一般系统都不支持，这样也可以防止你自己或者被其他软件误操作。所以要注意，如果你打算用 efi 模式启动，那通过第一个方式用 --efi-directory 把 grub 装到这个分区，或者就还是用 mbr 方式好了。参考这个。 加载 windows   我看可以通过 chainloader 加载 windows，也有 ntldr 加载，不太清楚具体区别。chainloader 是通过读取指定设备的块来的，比如 chainloader +1 读第一个块。或者 chainloader /EFI/Microsoft/Boot/bootmgfw.</description>
    </item>
    
    <item>
      <title>使用 grub2</title>
      <link>https://wdicc.com/how-to-use-grub2/</link>
      <pubDate>Fri, 24 Jul 2009 00:00:00 +0000</pubDate>
      
      <guid>https://wdicc.com/how-to-use-grub2/</guid>
      <description>看到 ub 要默认用 grub2 了，看来这个东西够稳定了，就折腾了下。过程还有点头大，呵呵。这个东西最大的问题就是文档怎么那么少？。。。
国内的大都是抄的 这个 ，里面不知道为什么没有排版，那个样例用的是 debian，我用的 gentoo，有点小区别。
gentoo 里面先 keyword unmask grub 1.96，然后安装他。
echo &#34;=sys-boot/grub-1.96 **&#34; 安装之后，先重新生成 device.map。然后执行 update-grub 生成 grub 的一些配置文件，这个生成是根据的 /etc/grub.d 下面的文件，如果有兴趣可以去配置，我反正没配置，我手动修改的配置文件。 sudo update-grub # 不是必须，可以手动生成配置文件 现在去看看 /boot/grub/grub.cfg 文件，里面应该会根据你的系统生成了一些东西。再改巴改巴，下面是我的。对了这个文件是只读的，改一下属性就好了。 set default=0 set timeout=5 set root=(hd0,1) insmod terminal insmod gfxterm insmod vbe insmod font insmod png font /boot/grub/unifont.pff set gfxmode=1024x768 terminal gfxterm set menu_color_normal=white/black set menu_color_highlight=white/dark-gray #background_image /boot/grub/bg.tga background_image /boot/grub/dev2.png ### END /etc/grub.d/00_header ### ### BEGIN /etc/grub.</description>
    </item>
    
    <item>
      <title>恢复grub</title>
      <link>https://wdicc.com/recover-grub/</link>
      <pubDate>Sat, 30 Dec 2006 00:00:00 +0000</pubDate>
      
      <guid>https://wdicc.com/recover-grub/</guid>
      <description> 安装双系统的时候，如果后安装的 win ，那么就会把mbr的grub信息干掉。通常的建议是先安装win后安装linux。
今天遇到的情况是通过 vmware 安装 suse 到物理硬盘的时候，没有将 grub 安装到 mbr，这样需要重新安装一下grub。
我的方法是找了一个 knoppix ，然后启动到 level 2 ，启动之后执行下面的命令先。
mount -o proc none /mnt/hdax/proc mount --bind /dev/ /mnt/hdax/dev 这样操作之后，就可以chroot到硬盘上面的系统了。 然后自己修改 /boot/grub/menu.1st 文件。之后执行 grub 命令。 grub setup (hd0) 我这里操作的时候遇到一个问题，suse好像往grub的map.xxx.gz里面写了关于fd0的信息，这样运行grub命令的时候会尝试去读取软驱。我在bios里面禁用了软驱才ok。 </description>
    </item>
    
  </channel>
</rss>