<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>algorithm on wd and cc</title>
    <link>https://wdicc.com/tags/algorithm/</link>
    <description>Recent content in algorithm on wd and cc</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sat, 24 Nov 2018 14:48:04 +0800</lastBuildDate>
    
	<atom:link href="https://wdicc.com/tags/algorithm/atom.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>A* Search Algorithm</title>
      <link>https://wdicc.com/a-star-search-algorithm/</link>
      <pubDate>Sat, 24 Nov 2018 14:48:04 +0800</pubDate>
      
      <guid>https://wdicc.com/a-star-search-algorithm/</guid>
      <description>前段时间我们设想了一个需求，想帮助用户规划一下从 A - B 的航线。对于路径规划从来没弄过，研究了一下，基本都在提这个 A 星寻路算法。
 先贴几个文章： 简单的讲解的文章例如 https://www.jianshu.com/p/65282bd32391 这个详细一点的 https://blog.csdn.net/DinnerHowe/article/details/79380317  我写了一个简单的程序，这个程序没有做过任何的优化，只能说是解释了这个算法的逻辑而已，在终端里面可以可视化的把计算过程显示出来。效果可以看这里。
#!/usr/bin/python import sys import random RED = &#39;\033[31m&#39; GREEN = &#39;\033[32m&#39; GRAY = &#39;\033[35m&#39; NC = &#39;\033[0m&#39; class Point(object): x = 0 y = 0 close = False open = False start = False end = False wall = False H = 99 G = 99 parent = None def __init__(self, **kwargs): if &#39;x&#39; in kwargs: self.</description>
    </item>
    
  </channel>
</rss>