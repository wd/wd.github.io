<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Gfw on wd and cc</title>
    <link>https://wdicc.com/tags/gfw/</link>
    <description>Recent content in Gfw on wd and cc</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sun, 27 Mar 2016 11:50:38 +0800</lastBuildDate>
    
	<atom:link href="https://wdicc.com/tags/gfw/atom.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Custom Netgear r6300v2 wireless router</title>
      <link>https://wdicc.com/custom-netgear-r6300v2-wireless-router/</link>
      <pubDate>Sun, 27 Mar 2016 11:50:38 +0800</pubDate>
      
      <guid>https://wdicc.com/custom-netgear-r6300v2-wireless-router/</guid>
      <description>接 科学上网。买了群晖之后，一直通过群晖上面跑一个 haproxy 来做转发。不过心里总觉得有点不爽，毕竟一方面多转发了一次，另外群晖在不使用的时候，还会休眠，又或多或少担心影响休眠（经过测试应该是不影响的，但是..）。所以买了 r6300v2 之后，就琢磨通过路由器做这个事情。
路由器上面搞就有两个选择，一是从 iptables 入手，直接转发出去，另外一个是从软件层面做。
开始搞了几天的 iptables，发现原有系统 iptables 条目还是挺多的，加上路由器翻墙的功能也需要加一些条目，导致尝试了好几天之后总算能够转发过去链接了，但是数据包过不去，为了调试就开始打算在路由器安装 tcpdump。然后找到了 https://github.com/Entware/entware ，配置好之后可以使用 opkg 来安装包。包列表可以参考这里 http://pkg.entware.net/binaries/armv7/Packages.html ，这个路由器是 armv7 版本的 cpu。
安装 opkg 之前先得了解下，梅林固件分两部分存储，一部分是系统区，一部分是自定义区。系统区应该是你刷的固件所在的地方，是不能修改的，自定义区是可以存放一些自己定义的脚本的。每次系统启动的时候，你的一些自定义的东西都是存在自定义区加载的。自定义区就是 /jffs 分区。想要使用，得在 系统管理 -&amp;gt; 系统设置 里面，打开 JFFS 的配置，允许执行上面的脚本。
因为系统自带的 /jffs 分区只有 60M 左右，而我们装包的时候很容易就超过这个限制了，我现在已经用了 8xM 空间。所以最好还是用一个 u 盘来做这个事情。每次想要自动加载 u 盘，启动 u 盘里面的程序的话，还需要一些自定义的脚本来做这个事情。
先把 opkg 配置好，需要先准备好 /opt 目录。
mkdir -p /tmp/opt mount -t ext4 -o rw,noatime /dev/sda1 /opt  上面的 /dev/sda1 是 u 盘，ext4 是文件系统类型，按照自己的修改一下。一般 u 盘插上去就会自动挂载，df 看一下就知道是哪个名字了。系统配置里面有个 dlna 的配置记得关掉，否则他会读 u 盘导致你不能 umount 之类，或者 kill 掉一个叫做 minidlna 的进程也可以。</description>
    </item>
    
    <item>
      <title>Across the Great Wall, we can reach every corner in the world</title>
      <link>https://wdicc.com/across-the-great-wall-we-can-reach-every-corner-in-the-world/</link>
      <pubDate>Sun, 20 Mar 2016 20:39:53 +0800</pubDate>
      
      <guid>https://wdicc.com/across-the-great-wall-we-can-reach-every-corner-in-the-world/</guid>
      <description>科学上网估计是每个搞 IT 的人必须要掌握的知识了。简单讲讲我目前使用的一些方法。
国外服务 首先肯定需要先有个国外的资源，比如买专业的 vpn ss 服务等。数据经过第三方都不一定那么可靠，我的主力邮箱在 gmail，可不想被攻破，所以我选择了自己购买和搭建服务。
我买的是 linode 的服务，最便宜的是 10$ 一个月。也可以买一些美国的 kvm 或者 zen 的虚拟机，有比较便宜的一个月可能才不到 1$，当然这种便宜的一般很快就会卖没，得看运气。我的 linode 是和 3 个基友一起合租的，这样大家每个人一年也就 300 来块钱，也就一顿海底捞（我这两年非常喜欢用饭钱来衡量消费，吃饭可是天天都有的，但是有些消费，比如买软件，买服务这些一般都是一年或者几年才一次，比起吃饭真的便宜多了），一般都能承担的吧。
早期我买过一些 ssh 服务，速度不稳定，因为很难限制超售。后来还买过云梯，他们提供的节点比较多速度还不错。
有了 vps 搭一个 ssserver 就是很简单的了，就不多说了。服务器上面我还配置了 ocserv 这个支持 cisco 客户端的 vpn 服务。当然并不是所有 vps 都支持，有的 vps 没有 tun 设备，跑不起来，买的时候要注意。
ssh 方式 使用 ssh 方式的时候，最早是直接 ssh 链接弄一个 socks 端口给本地，然后本地使用 pac 配合。
后来有段时间被断的不行，就试了 stunnel，可以把 ssh 转为 https 服务，这样就可以跑在 443 端口了，和其他 https 服务比较难区分。可以起点作用。
这个方式没法支持手机。
使用 ngx 有段时间还使用 hosts 文件加 ngx 反向代理还翻墙。ngx 上面配置 google.</description>
    </item>
    
    <item>
      <title>你在用什么方式翻墙？</title>
      <link>https://wdicc.com/%E4%BD%A0%E5%9C%A8%E7%94%A8%E4%BB%80%E4%B9%88%E6%96%B9%E5%BC%8F%E7%BF%BB%E5%A2%99/</link>
      <pubDate>Mon, 20 Jul 2009 00:00:00 +0000</pubDate>
      
      <guid>https://wdicc.com/%E4%BD%A0%E5%9C%A8%E7%94%A8%E4%BB%80%E4%B9%88%E6%96%B9%E5%BC%8F%E7%BF%BB%E5%A2%99/</guid>
      <description>翻墙估计应该是上网的必修课了，当然那些 90 后就别说了，他们大概只上 *qq.com 就好了。
翻墙有不少方法，比如通过找公共的 vpn，用 tor，找一些 phpproxy 网站等。我这推荐一个比较好的方法，通过 fuckgfw 提供的 ssh proxy，速度比 tor 快的不是一点半点。
我用的 linux，写了一个 expect 脚本来起代理服务，如下。里面的 USER 和 PWD 换成你申请到的用户名和密码。我把这个脚本命名叫 p, 放到了 ~/bin 下面，当然我的 ~/bin 是在 path 里面的，这样，执行一个 p 命令代理就自动起来了。用完的时候可以按 Ctrl-c 退出。
#!/bin/bash expect -c &#39; spawn ssh -D 7070 -N USER@SERVER expect { password { send &#34;PWD\r&#34;; } } interact { \001 exit; }&#39; 
当然，我用到的不只这个脚本了，要不也没什么好写的了。(本来觉得自己写了挺好的一个文章，最后还是就 expect 脚本 + autoproxy，唉，丢人。)还用到了一个 proxy.pac ，自动使用代理的配置。如下，把这个文件存成 proxy.pac, 然后在 firefox 的 编辑-首选项-高级-网络-设置-自动代理配置URL 这个里面输入 &#34;</description>
    </item>
    
    <item>
      <title>人民网：要追究制造发帖获刑案官员罪责</title>
      <link>https://wdicc.com/%E4%BA%BA%E6%B0%91%E7%BD%91%E8%A6%81%E8%BF%BD%E7%A9%B6%E5%88%B6%E9%80%A0%E5%8F%91%E5%B8%96%E8%8E%B7%E5%88%91%E6%A1%88%E5%AE%98%E5%91%98%E7%BD%AA%E8%B4%A3/</link>
      <pubDate>Tue, 05 May 2009 00:00:00 +0000</pubDate>
      
      <guid>https://wdicc.com/%E4%BA%BA%E6%B0%91%E7%BD%91%E8%A6%81%E8%BF%BD%E7%A9%B6%E5%88%B6%E9%80%A0%E5%8F%91%E5%B8%96%E8%8E%B7%E5%88%91%E6%A1%88%E5%AE%98%E5%91%98%E7%BD%AA%E8%B4%A3/</guid>
      <description>人民网：要追究制造发帖获刑案官员罪责
河南的王帅、内蒙古的吴保全因言获罪，经过新兴媒体的披露和公众的理性参与，成为人们热议的话题，由此产生如何杜绝公民“因言获罪”现象的讨 论。王帅事件已经有了初步结果，河南省副省长兼省公安厅厅长表明了态度，并且开始追究构陷者的责任。内蒙古的吴保全案还没有圆满结果，那位“因言获罪”的 年轻人还在牢里，这算不算是当地法制的耻辱呢？
中国建设和完善民主法制走过了漫长的路程。党和国家提出依法治国，提出建设社会主义法治国家，是时代和社会的进步。经历过没有法制，没有民主， 没有人权的人们，绝对不会同意类似“十年动乱”那样的年代死灰复燃。但是，当我们从网络上和报纸上看到先是河南的王帅，后是内蒙古的吴保全，仅仅因为在网 络上批评一下当地的官员，评论一下当地的政府，披露一下某些事情，就被当地警方跨省抓捕，进而关进牢房，我们确实被震撼了、惊动了。尽管这只是一些被披露 的个案，尽管这只是国家在建设和谐社会中的一点噪音，但是，这些个案和噪音反映了我国建设民主和法制社会的长期性、艰巨性和复杂性，反映了我们社会的一些 亟需改善的现状。
“因言获罪”是非民主社会例如“十年动乱”中最明显的特征之一。人们的每一句话都可能被认为是影射、借喻、讽刺当权者；人们的每一篇文章都可能 被视作煽动和挑衅，而遭到莫名其妙的迫害。有的人因为在私密的日记中记载了一点自己的思想，而获祸罹难。言论成为那个年代最敏感的节点。说假话，说空话， 说大话，逐步成为人们的习惯，话语体系走进了一条令人生厌的死胡同。这种影响，至今尚未完全清除。
改革开放，解放思想，拨乱反正，特别是近年来国家民主、法制和人权事业的进步，让我们认识到，在一个民主和法治的社会里，人们的言论是自由的， 批评是自由的，思想是自由的。诬陷罪、诽谤罪只针对个人而言，政府没有权利通过公安抓捕那些仅仅是用语言评论政府的所作所为，或者用某些不太中听的话批评 政府官员的公民，哪怕这些评论和批评不太准确。法院也应该严格遵守宪法的规定，不当权力的帮凶，不去侵害公民的合法权益。否则，我们的社会何来公平正义， 何来和谐稳定、文明进步？
抓捕“言论”者的执法人员和他们后面的官员，可能以为他们的这些做法，是在维护党和国家的利益，是在维护我们的社会主义制度。其实，他们错了。 党和国家的根本利益，就是人民的利益，就是保证大家能够充分享受美好的生活，树立正确的民主、自由、人权、发展等价值观。我们的社会主义制度，也是为了最 大限度地维护人民的核心利益，而且正在不断地改进和完善中。保证公民充分享受言论权、批评权、监督权，才是实事求是地爱护我们现有的制度，才能更快得让我 们的国家跻身于世界民族之林。用这样的思路去分析官员和执法人员抓捕“言论”者，正好证明，这些目无党纪国法的官员和执法人员，破坏的恰恰是党和国家的根 本利益，践踏的恰恰是当前以人为本的社会主义制度，侮辱的恰恰是人民群众神圣的尊严。
所以，人们特别是上级领导机关的人千万别让那些侵犯人权、制造冤案的人用满嘴“国家利益”、“社会利益”的理由忽悠了，别听他们一唱高调就心软 手松。一定要追究制造冤假错案者的法律责任，一定要坚决清除他们制造冤案所谓“合理性”的影响，促使我们国家各个地方的冤假错案、荒唐事件越来越少，直至 彻底消失！
以上内容完全是复制粘贴，本人并不明白其意思，故本人不对以上内容负法律责任，请不要跨省追捕。要详查请自己联系原作者，谢谢！</description>
    </item>
    
    <item>
      <title>A nice way to fuck gfw</title>
      <link>https://wdicc.com/a-nice-way-to-fuck-gfw/</link>
      <pubDate>Wed, 01 Apr 2009 00:00:00 +0000</pubDate>
      
      <guid>https://wdicc.com/a-nice-way-to-fuck-gfw/</guid>
      <description>转载自 : http://fuckgfw.jottit.com/
本文将提供一种一劳永逸的翻墙方式（ssh -D），实施之后，那道墙——对你来说——将从此透明。
本文面向的用户：使用Windows作为操作系统并且使用Firefox作为常用浏览器。
第一步：免费获取拥有SSH权限的帐号和密码。
默认的免费获取方式：将本文转载到你自己的博客上，将转载后的文章网址发送到。
转载方式：拷贝文章代码至博客后台HTML编辑器中，直接发布即可，文章标题自拟，可在前后文插入自己的评论。
经过人工审核，你将收到一封附有五个拥有SSH权限的帐号和密码的电子邮件，你可以将它们赠与你自己的读者。
更多获取方式将在今后陆续激活，请关注帐号配送中心：https://friendfeed.com/rooms/fuckgfw-for-free
第二步：配置MyEntunnel软件
下载并安装MyEntunnel，该软件全名为My Encrypted Tunnel。
一键下载：https://dl.getdropbox.com/u/398/myentunnel.exe
按照上图将第一步收到的帐号信息填写到相应的地方后，点击按钮，再点击按钮。
第一次连接过程中会出现一个认证对话框，按照提示确认即可。以后的自动连接中将不再出现此认证对话框。
最后点击按钮，使对话框隐藏到系统任务栏中。
提示：
为MyEntunnel创建一个快捷方式，将其复制到系统的【启动】（C:\Documents and Settings\当前用户名（需要修改成你自己的）\「开始」菜单\程序\启动）文件夹中，今后开机便可自动启动软件，并自动连接服务器。
绿色代表连接成功且稳定；黄色代表正在连接或重新连接；红色代表连接失败。
第三步：配置Firefox浏览器
假设你正使用Firefox浏览器阅读本文。
一键安装：http://autoproxy.mozdev.org/latest.xpi
点击立即安装，安装后，重新启动Firefox。然后你会看到如下对话框，选择gfwlist (P.R.China)后，点击确定。
接着你会看到Firefox主界面右上角出现有一个“福”字图案，点击“福”。
点击“代理服务器——编辑代理服务器”。
随即出现如下画面，你会看到如GAppProxy、Tor和Your Freedom这样一系列代理服务器名称。
将GAppProxy一栏的参数修改为如下图所示。
修改完毕后，点击确定。至此配置已全部就绪。
获取更多帮助，请关注反馈中心：https://friendfeed.com/rooms/fuckgfw-feedback
第四步：支持fuckGFW
获取详情，请关注捐赠与推广中心：https://friendfeed.com/rooms/fuckgfw-donation-and-marketing
版权信息：您可以自由复制、传播、演绎本作品且无需署名、无需注明原始出处。</description>
    </item>
    
    <item>
      <title>咱也玩玩lilina</title>
      <link>https://wdicc.com/%E5%92%B1%E4%B9%9F%E7%8E%A9%E7%8E%A9lilina/</link>
      <pubDate>Fri, 01 Dec 2006 00:00:00 +0000</pubDate>
      
      <guid>https://wdicc.com/%E5%92%B1%E4%B9%9F%E7%8E%A9%E7%8E%A9lilina/</guid>
      <description>好像不知道从什么时候开始流行起了lilina，自己捣鼓捣鼓也装了一个，我的lilina。其实google reader挺好的，不过就是google有时候会被GFW干掉，这样reader也不能访问了。最近这种情况好像还出现很频繁，真是头痛，其实google reader挺好用的，不过现在就试试看lilina了。
今天也看到一些关于干掉GFW的文章[1][2]，但是需要国外的ssh服务器，偶没有。。不过这个ssh tunnel倒是个不错的东西，比装代理服务器简单，嗯。
用了lilina之后，发现sina的rss好像总是在最前面，而实际上他们更新却是以前的事情了，肯定是他们的rss输出有问题，感觉这样很无耻。</description>
    </item>
    
  </channel>
</rss>