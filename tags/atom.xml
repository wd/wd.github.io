<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>wd and cc</title>
    <link>https://wdicc.com/tags/</link>
    <description>Recent content on wd and cc</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 17 Jul 2019 11:36:20 +0800</lastBuildDate>
    
	<atom:link href="https://wdicc.com/tags/atom.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Why I Am Not at React Native Developer(节译)</title>
      <link>https://wdicc.com/why-i-am-not-at-react-native-developer/</link>
      <pubDate>Thu, 02 Nov 2017 14:00:39 +0800</pubDate>
      
      <guid>https://wdicc.com/why-i-am-not-at-react-native-developer/</guid>
      <description>翻译自这里 Why I&amp;#39;m not a React Native Developer 。 Introduction   很多人把 RN 作为下一个移动 app 的开发平台。切换开发平台有可能会有巨大的消耗也可能会改变你日常的工作流程。同时平台也可能会改变你开发使用的软件，需要你掌握一些特殊的工具和工作流，把你绑定到一个新的开发生态里面。  Facebook 自己想要完全切换到 RN 来代替原来的 Native 开发。RN 开发团队也在努力做这个事情，他们搞了一个软件开发平台来代替传统的 Xcode/Swift/ObjC 开发模式。RN 团队到底对这个是一个怎么的态度，貌似还不太明确。  我自己搞了几个月开发之后，我感觉这个平台不是我想要的一个，也不推荐其他人往里跳。 Declarative style   在 RN 里面，UI 是一堆包含状态(state)的函数(function)和属性(props)。  下面是个例子，假设我们需要在左上角有一个小正方形，如果用户连接了就显示红色，没连接显示绿色。  在这种编程类型下，你指定所有更新 UI 需要的步骤。我们需要监听 isConnectd 来更新 view。我们告诉 iOS 如何计算状态。  比较一下 RN 的模式。  RN 让你在 render() 方法里面描述你的 UI。React 框架来保证 state 的变化会触发 re-rendering。对于数据的修改，会自动触发 UI 的改变。  我想这是一种思考 UI 的很好的方式。这也是 MVC 模式的一种进化，View 只需要负责展示，不需要负责管理数据。 Faster iterations   RN 里面开发的时候，框架会在本地启动一个 server。你只需要编译一次，然后在 iOS 模拟器或者真机上面运行，RN 会保证你在 js 里面做的任何修改都会反馈到 app 里面。  你有两个选择:    Live Reloading。使用 CMD + R 快捷键。    Hot Reload。只更新你编辑的部分。比如你在编辑一个 table view 的一个 cell，你的修改会立刻可以看到，不用每次都从开始界面一步一步找过去。当前页面的状态也会一直保留，这就是所见即所得的编程体验。Xcode 没有这个。    这个比之前在 native 里面快太多了，在 native 里面有时候还需要在 ViewController 里面加一些 debug 方法，以便快速的找到需要的界面。 Cross-platform   跨平台。 Uncertain roadmap   担心 RN 团队没有对这个项目的长期的保证。  不像我们使用一些第三方库，如果那个库出点问题我们的项目也不至于出啥大问题。而 RN 是一整个软件开发平台，如果 facebook 停止维护 RN，我们的软件可能就停滞了，目前也没有一个 RN 替代。如果要自己搞，那还需要区了解 RN 的代码，React.</description>
    </item>
    
    <item>
      <title>11 Mistakes During Use React Native(翻译)</title>
      <link>https://wdicc.com/11-mistakes-during-use-react-native/</link>
      <pubDate>Wed, 01 Nov 2017 19:12:24 +0800</pubDate>
      
      <guid>https://wdicc.com/11-mistakes-during-use-react-native/</guid>
      <description>粗略的翻译自 11 mistakes I’ve made during React Native / Redux app development。 一些可能会错误的评估     虽然有很多可以重复使用的组件，你还是需要分开考虑 iOS 和 Android 的布局。    当你评估表单实现的时候，应该要同时考虑表单的验证。开发 RN 比开发例如 Cordova 这样的 hybrid 的程序需要写的代码更多。    如果是基于一个已经有后端的 webapp 写代码，应该需要先去仔细看看后端提供的功能接口，因为你需要自己写逻辑，弄明白了 DB 结构数据关联，可以然你更好的规划你的 redux store。   尽量使用已有的组件   Google 一下就会发现，已经有大量的现成的组件，例如 buttons, footers 等。如果你没啥特殊要求，这些你都可以直接用。你要是有自己的特殊需要，也可以包装一下这些组件成你自己的，然后在里面自定义样式。不过你自己使用 View, Text, TouchableOpacity 等这些 RN 组件来自己包装对于你理解 RN 的工作原理。你自己打包的组件的版本也不会变，不像依赖外部模块。 不要分开搞 iOS 和 Android 的布局   如果你有不同的布局需求，那就分开。否则，你可以使用 RN Platform 提供的 API 来做一些小的区分。  如果布局很大不同，那就把布局内容放到不同的文件里面。  你可以使用 index.</description>
    </item>
    
  </channel>
</rss>ags/%E5%8D%8E%E5%B0%94%E8%A1%97/</link>
      <pubDate>Fri, 19 Apr 2019 15:38:57 +0800</pubDate>
      
      <guid>https://wdicc.com/tags/%E5%8D%8E%E5%B0%94%E8%A1%97/</guid>
      <description></description>
    </item>
    
    <item>
      <title>blog</title>
      <link>https://wdicc.com/tags/blog/</link>
      <pubDate>Thu, 28 Mar 2019 11:18:37 +0800</pubDate>
      
      <guid>https://wdicc.com/tags/blog/</guid>
      <description></description>
    </item>
    
    <item>
      <title>freedom</title>
      <link>https://wdicc.com/tags/freedom/</link>
      <pubDate>Thu, 28 Mar 2019 11:18:37 +0800</pubDate>
      
      <guid>https://wdicc.com/tags/freedom/</guid>
      <description></description>
    </item>
    
    <item>
      <title>co-founder</title>
      <link>https://wdicc.com/tags/co-founder/</link>
      <pubDate>Wed, 13 Feb 2019 18:14:39 +0800</pubDate>
      
      <guid>https://wdicc.com/tags/co-founder/</guid>
      <description></description>
    </item>
    
    <item>
      <title>合伙人</title>
      <link>https://wdicc.com/tags/%E5%90%88%E4%BC%99%E4%BA%BA/</link>
      <pubDate>Wed, 13 Feb 2019 18:14:39 +0800</pubDate>
      
      <guid>https://wdicc.com/tags/%E5%90%88%E4%BC%99%E4%BA%BA/</guid>
      <description></description>
    </item>
    
    <item>
      <title>resume</title>
      <link>https://wdicc.com/tags/resume/</link>
      <pubDate>Tue, 12 Feb 2019 15:14:28 +0800</pubDate>
      
      <guid>https://wdicc.com/tags/resume/</guid>
      <description></description>
    </item>
    
    <item>
      <title>简历</title>
      <link>https://wdicc.com/tags/%E7%AE%80%E5%8E%86/</link>
      <pubDate>Tue, 12 Feb 2019 15:14:28 +0800</pubDate>
      
      <guid>https://wdicc.com/tags/%E7%AE%80%E5%8E%86/</guid>
      <description></description>
    </item>
    
    <item>
      <title>startup</title>
      <link>https://wdicc.com/tags/startup/</link>
      <pubDate>Tue, 22 Jan 2019 18:25:37 +0800</pubDate>
      
      <guid>https://wdicc.com/tags/startup/</guid>
      <description></description>
    </item>
    
    <item>
      <title>2018</title>
      <link>https://wdicc.com/tags/2018/</link>
      <pubDate>Sun, 13 Jan 2019 13:07:44 +0800</pubDate>
      
      <guid>https://wdicc.com/tags/2018/</guid>
      <description></description>
    </item>
    
    <item>
      <title>times</title>
      <link>https://wdicc.com/tags/times/</link>
      <pubDate>Sun, 13 Jan 2019 13:07:44 +0800</pubDate>
      
      <guid>https://wdicc.com/tags/times/</guid>
      <description></description>
    </item>
    
    <item>
      <title>iptv</title>
      <link>https://wdicc.com/tags/iptv/</link>
      <pubDate>Thu, 10 Jan 2019 10:20:56 +0800</pubDate>
      
      <guid>https://wdicc.com/tags/iptv/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>