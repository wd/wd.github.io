<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>React on wd and cc</title><link>https://wdicc.com/tags/react/</link><description>Recent content in React on wd and cc</description><generator>Hugo</generator><language>zh-CN</language><lastBuildDate>Mon, 22 Oct 2018 16:21:30 +0800</lastBuildDate><atom:link href="https://wdicc.com/tags/react/atom.xml" rel="self" type="application/rss+xml"/><item><title>Upgrade to React 16.3</title><link>https://wdicc.com/upgrade-to-react-16.3/</link><pubDate>Mon, 22 Oct 2018 16:21:30 +0800</pubDate><guid>https://wdicc.com/upgrade-to-react-16.3/</guid><description>&lt;p>随着 React native 升级，React 也升级到了 16.5 了。原来的改成新的生命周期了。&lt;/p>
&lt;div class="src src-javascript">
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">ExampleComponent&lt;/span> &lt;span style="color:#66d9ef">extends&lt;/span> &lt;span style="color:#a6e22e">React&lt;/span>.&lt;span style="color:#a6e22e">Component&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#a6e22e">getDerivedStateFromProps&lt;/span>(&lt;span style="color:#a6e22e">nextProps&lt;/span>, &lt;span style="color:#a6e22e">prevState&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Called after a component is instantiated or before it receives new props.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// Return an object to update state in response to prop changes.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// Return null to indicate no change to state.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">UNSAFE_componentWillMount&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// New name for componentWillMount()
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// Indicates that this method can be unsafe for async rendering.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// Prefer componentDidMount() instead.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">UNSAFE_componentWillUpdate&lt;/span>(&lt;span style="color:#a6e22e">nextProps&lt;/span>, &lt;span style="color:#a6e22e">nextState&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// New name for componentWillUpdate()
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// Indicates that this method can be unsafe for async rendering.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// Prefer componentDidUpdate() instead.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">UNSAFE_componentWillReceiveProps&lt;/span>(&lt;span style="color:#a6e22e">nextProps&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// New name for componentWillReceiveProps()
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// Indicates that this method can be unsafe for async rendering.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// Prefer static getDerivedStateFromProps() instead.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;p>
React 在后面的版本里面，这几个方法都会被加上 &lt;code class="verbatim">UNSAFE_&lt;/code> ，直到被移除。&lt;/p></description></item><item><title>React Native Deeplink</title><link>https://wdicc.com/react-native-deeplink/</link><pubDate>Mon, 03 Sep 2018 18:00:56 +0800</pubDate><guid>https://wdicc.com/react-native-deeplink/</guid><description>&lt;p>App 一般都支持类似 &lt;code class="verbatim">coolflight://list&lt;/code> 这样的链接，可以直接打开 app 并打开列表，这个就是 deeplink。&lt;/p>
&lt;p>
这个需要对 native 代码做一些修改，可以参考&lt;a href="https://reactnavigation.org/docs/en/deep-linking.html">这里&lt;/a>的修改，ios 和 android 都有写。这里有一个需要注意的是，对于 android 有一个配置是&lt;/p></description></item><item><title>React Mobx</title><link>https://wdicc.com/react-mobx/</link><pubDate>Sun, 02 Sep 2018 19:18:16 +0800</pubDate><guid>https://wdicc.com/react-mobx/</guid><description>&lt;p>我们之前用的是 redux 来做的统一 store，最近一个新项目有同学用了 mobx，就了解了一下，刚开始看的时候，感觉比 redux 好啊？&lt;/p></description></item><item><title>React Native compnent reuse</title><link>https://wdicc.com/react-native-compnent-reuse/</link><pubDate>Sat, 24 Mar 2018 08:44:39 +0800</pubDate><guid>https://wdicc.com/react-native-compnent-reuse/</guid><description>&lt;p>做功能的时候，一般我们会适当的封装一些组件出来共享，这样好管理和维护，这个大家估计都会这么做。有时候手机上面因为屏幕小，填一些表单的时候，会需要到另外一个页面去维护选择一些内容，那这个页面是页面还是组件呢？&lt;/p></description></item><item><title>Add float debug button for react native</title><link>https://wdicc.com/add-float-debug-button-for-react-native/</link><pubDate>Sat, 02 Sep 2017 18:22:47 +0800</pubDate><guid>https://wdicc.com/add-float-debug-button-for-react-native/</guid><description>&lt;p>React-native 里面在模拟器里面可以通过快捷键打开开发菜单，在设备里面可以通过摇晃设备打开开发菜单。但是摇晃有时候并不是一个好的操作，比如是个 pad，或者比如你自己的设备本身会触发晃动动作。那么如何在开发模式下面增加一个按钮打开这个菜单呢？可惜官方对这个功能没有兴趣多做开发 &lt;a href="https://github.com/facebook/react-native/issues/10191">https://github.com/facebook/react-native/issues/10191&lt;/a> 。&lt;/p></description></item><item><title>Emacs as react native ide</title><link>https://wdicc.com/emacs-as-react-native-ide/</link><pubDate>Mon, 24 Jul 2017 20:02:00 +0800</pubDate><guid>https://wdicc.com/emacs-as-react-native-ide/</guid><description>&lt;p>最近又在写 &lt;code>react-native&lt;/code> 了，对自己的环境又作了一番配置。记录一下。&lt;/p>
&lt;h2 id="web-mode">web-mode&lt;/h2>
&lt;p>我主要用的 mode 是 web-mode。这个 mode 简直万能，能处理 html，jsx，js 等。具体配置如下。&lt;/p></description></item></channel></rss>