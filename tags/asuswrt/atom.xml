<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Asuswrt on wd and cc</title>
    <link>https://wdicc.com/tags/asuswrt/</link>
    <description>Recent content in Asuswrt on wd and cc</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sun, 13 May 2018 08:03:28 +0800</lastBuildDate>
    
	<atom:link href="https://wdicc.com/tags/asuswrt/atom.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Develop Plugin for Asuswrt Merlin</title>
      <link>https://wdicc.com/develop-plugin-for-asuswrt-merlin/</link>
      <pubDate>Sun, 13 May 2018 08:03:28 +0800</pubDate>
      
      <guid>https://wdicc.com/develop-plugin-for-asuswrt-merlin/</guid>
      <description>换华硕路由器之后，一直用的是梅林（merlin）的固件（rom）。基于这个固件，有一个 koolshare 的团队做了很多插件，并且做了一个通用的软件中心，可以方便的管理插件，还挺不错的。
打算用 v2ray 的时候，就想着如何才能无缝替换掉 ss。因为 v2ray 在路由器上面跑效率不高内存占用比较高，ss 作者开始说不打算支持 v2ray。后来研究了 ss 原理之后发现替换很简单，只需要具备 2 个功能就可以，一个是可以支持 socks 代理，一个是可以透明转发流量的端口。这两个协议在 v2ray 都支持，所以要做的其实就是在启动 ss 相应软件的时候启动 v2ray 的就可以了。
基于这个逻辑写了一个文档 ，能弄明白的话，自己用应该也够了。后来一时兴起，做了一个改进版。这个版本基本上就傻瓜化了。做的时候对基于 merlin 开发有了一些经验记录一下，发现讲这个的东西不多。
一些基础知识 路由器上面的内容是只读的，修改之后重启就会重置。但是 JFFS 分区里面的内容是会保留的。想要保存数据有两个方法。
 存一个文件放到 JFFS 分区上面。 通过 dbus 命令储存。(这个命令具体会把数据存哪里我还没仔细看。)  文件方式没什么好说的，储存和读取解析需要你自己做。 dbus 命令提供了 key-value 的形式储存数据，可以通过例如 dbus list v2ray 列出来所有 v2ray 开头的 key 的情况，执行 dbus 命令不带参数会有使用方法提示。
一般开发插件还有一个设置也需要开启，就是允许执行 JFFS 的自定义脚本。这个指的是路由器启动的时候，自动执行 /jffs/scripts/ 下面的一些文件，也并不是任意文件都会执行，merlin 自己的 wiki 有比较详细的说明。
所以实际上一个插件的工作方式实际上是这样
 路由器启动 读取 dbus 配置的数据 执行 /jffs/scripts/ 目录下面相应的脚本 这些脚本里面会执行你的插件的脚本 你的脚本会读取 dbus 配置的数据，以及读取你存储的文件 不管是你的界面还是脚本有新的数据需要保存，通过 dbus 或者文件存下来  每次路由器启动都是这样一个从头初始化的过程。</description>
    </item>
    
  </channel>
</rss>