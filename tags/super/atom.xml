<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>super on wd and cc</title>
    <link>https://wdicc.com/tags/super/</link>
    <description>Recent content in super on wd and cc</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 16 Jan 2017 11:53:04 +0800</lastBuildDate>
    
	<atom:link href="https://wdicc.com/tags/super/atom.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Python inherit and super</title>
      <link>https://wdicc.com/python-inherit-and-super/</link>
      <pubDate>Mon, 16 Jan 2017 11:53:04 +0800</pubDate>
      
      <guid>https://wdicc.com/python-inherit-and-super/</guid>
      <description>又学习了一个 python 的继承。有很多帖子都有介绍，比如理解 Python super，python super()。
先看一个例子，这个是第一个文章里面的。
class Root(object): def __init__(self): print(&amp;quot;this is Root&amp;quot;) class B(Root): def __init__(self): print(&amp;quot;enter B&amp;quot;) super(B, self).__init__() print(&amp;quot;leave B&amp;quot;) class C(Root): def __init__(self): print(&amp;quot;enter C&amp;quot;) super(C, self).__init__() print(&amp;quot;leave C&amp;quot;) class D(C): def __init__(self): print(&amp;quot;enter D&amp;quot;) super(D, self).__init__() print(&amp;quot;leave D&amp;quot;) class E(D, B): def __init__(self): print(&amp;quot;enter E&amp;quot;) super(E, self).__init__() print(&amp;quot;leave E&amp;quot;) e = E() print(e.__class__.mro()) # results: # enter E # enter D # enter C # enter B # this is Root # leave B # leave C # leave D # leave E # [&amp;lt;class &#39;__main__.</description>
    </item>
    
  </channel>
</rss>