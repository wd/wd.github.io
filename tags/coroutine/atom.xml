<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Coroutine on wd and cc</title><link>https://wdicc.com/tags/coroutine/</link><description>Recent content in Coroutine on wd and cc</description><generator>Hugo</generator><language>en</language><copyright>wd © 2025</copyright><lastBuildDate>Thu, 17 Oct 2019 10:49:40 +0800</lastBuildDate><atom:link href="https://wdicc.com/tags/coroutine/atom.xml" rel="self" type="application/rss+xml"/><item><title>Learning Python Coroutine</title><link>https://wdicc.com/learning-python-coroutine/</link><pubDate>Thu, 17 Oct 2019 10:49:40 +0800</pubDate><guid>https://wdicc.com/learning-python-coroutine/</guid><description>&lt;p>看了一个视频 &lt;a href="https://www.youtube.com/watch?time_continue=1780&amp;amp;v=GSk0tIjDT10">OSB 2015 - How Do Python Coroutines Work?&lt;/a>，从头开始讲 coroutine 是怎么抽象出来的，感觉好厉害。自己写了一点程序学习了一下。之前写的关于 &lt;a href="https://wdicc.com/python-coroutine/">coroutine&lt;/a> 的帖子。&lt;/p>
&lt;p>
先准备一个 &lt;code>server.py&lt;/code> ，可以接受客户端请求。要注意的是要使用 &lt;code>Threading&lt;/code> ，或者 &lt;code>fork&lt;/code> 的 server，要不服务端执行并不支持并发，需要处理完一个才能处理下一个，这样会发现虽然客户端那边请求是并发的，但是返回结果的时候是顺序的。&lt;/p></description></item><item><title>Python Coroutine</title><link>https://wdicc.com/python-coroutine/</link><pubDate>Tue, 27 Aug 2019 10:49:51 +0800</pubDate><guid>https://wdicc.com/python-coroutine/</guid><description>&lt;p>
协程 coroutine 不知道是从什么时候开始的，感觉我第一次看到是 lua 里面支持 yield 。后面看到就是 javascript 里面的 Promise，async 和 await。&lt;/p>
&lt;p>
以前写 Javascript 的时候容易会遇到 callback hell，似乎 Promise 就是出来解决这个问题的，让你可以用同步的方式写异步程序。例如你有三个异步请求可以同时发出去，而后面的结果又需要这三个的结果都回来才能继续，那就可以用类似下面的伪代码，整体执行时间是最长的那个。&lt;/p></description></item></channel></rss>