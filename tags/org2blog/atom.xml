<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Org2blog on wd and cc</title>
    <link>https://wdicc.com/tags/org2blog/atom/index.xml</link>
    <description>Recent content in Org2blog on wd and cc</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <atom:link href="https://wdicc.com/tags/org2blog/atom/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>介绍下 org2blog</title>
      <link>https://wdicc.com/about-org2blog/</link>
      <pubDate>Mon, 24 Oct 2011 00:00:00 +0000</pubDate>
      
      <guid>https://wdicc.com/about-org2blog/</guid>
      <description>&lt;div id=&#34;outline-container-1&#34; class=&#34;outline-2&#34;&gt;&lt;br /&gt;
&lt;h2 id=&#34;sec-1&#34;&gt;org2blog 是什么&lt;/h2&gt;&lt;br /&gt;
&lt;div id=&#34;text-1&#34; class=&#34;outline-text-2&#34;&gt;&lt;br /&gt;

&lt;a href=&#34;https://github.com/punchagan/org2blog&#34;&gt;org2blog&lt;/a&gt; 是用来把 org-mode 格式的文章发布到 wordpress 的工具。其实之前使用 webloger.el 也可以发布到 wordpress，不过是&lt;br /&gt;
webloger.el 已经基本没人维护了，这个 org2blog 作者支持还很积极，另外 org-mode 还提供了一些额外的方便编辑的方法，所以其实&lt;br /&gt;
是个不错的东东。&lt;br /&gt;

&lt;/div&gt;&lt;br /&gt;
&lt;/div&gt;&lt;br /&gt;
&lt;div id=&#34;outline-container-2&#34; class=&#34;outline-2&#34;&gt;&lt;br /&gt;
&lt;h2 id=&#34;sec-2&#34;&gt;安装&lt;/h2&gt;&lt;br /&gt;
&lt;div id=&#34;text-2&#34; class=&#34;outline-text-2&#34;&gt;&lt;br /&gt;

其实按照上面地址的内容，安装很简单。&lt;br /&gt;
&lt;pre class=&#34;prettyprint&#34;&gt;
(setq load-path (cons &#34;~/.emacs.d/org2blog/&#34; load-path))
(require &#39;org2blog-autoloads)&lt;/pre&gt;
&lt;ol&gt;
	&lt;li&gt;依赖 &lt;a href=&#34;http://launchpad.net/xml-rpc-el&#34;&gt;xml-rpc&lt;/a&gt; ，添加到 load-path&lt;/li&gt;
	&lt;li&gt;需要最新版本的 org-mode，我使用的是 emacs 24 里面的 7.7，之前使用 7.5(?) 的时候，遇到了发布的时候会在文章结尾附加
&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt; 导致 blog 的展现挂掉的问题。&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-3&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;sec-3&#34;&gt;使用&lt;/h2&gt;
&lt;div id=&#34;outline-container-3-1&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;sec-3-1&#34;&gt;配置&lt;/h3&gt;
&lt;div id=&#34;text-3-1&#34; class=&#34;outline-text-3&#34;&gt;
&lt;pre class=&#34;prettyprint&#34;&gt;
;; org2blog
;;

(require &#39;org2blog-autoloads)
(setq org2blog/wp-blog-alist
      `((&#34;abc&#34;
         :url &#34;http://abc.com/xmlrpc.php&#34;
         :username &#34;admin&#34;
         :password PWD
         :keep-new-lines t
         :confirm t
         :wp-code nil
         :tags-as-categories nil)
        ))

(setq org2blog/wp-buffer-template
  &#34;#+DATE: %s
#+OPTIONS: toc:nil num:nil todo:nil pri:nil tags:nil ^:nil TeX:nil 
#+CATEGORY: Heart
#+TAGS: 
#+PERMALINK: 
#+TITLE:
\n&#34;)&lt;/pre&gt;
我不使用 wordpress 的 code 格式，所以设置了 wp-code 为 nil。可以定义多个 blog。

&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-3-2&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;sec-3-2&#34;&gt;登陆，发帖&lt;/h3&gt;
&lt;div id=&#34;text-3-2&#34; class=&#34;outline-text-3&#34;&gt;

M-x org2blog/wp-login 会提示你要登陆哪个 blog
M-x org2blog/wp-new-entry 会使用设置的 template 打开一个 buffer
M-x org2blog/wp-post-buffer 保存成 draft
M-x org2blog/wp-post-buffer-and-publish 真实发布

另外，还可以发布一个 tree 而不是整个 org 文件，以及一些其他的操作就不多说了。

发布源代码可以使用 BEGIN_SRC END_SRC 块，或者冒号开头的行会被当作源代码。

我使用的是 wp-syntax，所以发布源代码使用 BEGIN_HTML 在里面使用 pre 标签
&lt;pre class=&#34;prettyprint&#34;&gt;
&amp;lt;pre lang=&#34;lisp&#34;&amp;gt;
(setq a 1)
&amp;lt;/pre&amp;gt;
#+END_HTML&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-3-3&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;sec-3-3&#34;&gt;其他&lt;/h3&gt;
&lt;div id=&#34;text-3-3&#34; class=&#34;outline-text-3&#34;&gt;

使用 org2blog 只能从 org 发布到 wordpress，不能从 wordpress 回到 org 文件再进行编辑，不过我看到有人已经提供了一个解决方
法，或许将来也会支持这个功能。

使用 org2blog 发布很讨厌的一点是，他会把你的 org 加上很多的 html 代码，再编辑的时候比较讨厌。

org2blog 在 github 的页面 &lt;a href=&#34;https://github.com/punchagan/org2blog&#34;&gt;https://github.com/punchagan/org2blog&lt;/a&gt; 上面有不少有用的东西，建议看看。

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>rsync files-from 参数</title>
      <link>https://wdicc.com/rsync-files-from-option/</link>
      <pubDate>Sat, 16 Apr 2011 00:00:00 +0000</pubDate>
      
      <guid>https://wdicc.com/rsync-files-from-option/</guid>
      <description>&lt;div id=&#34;outline-container-1&#34; class=&#34;outline-2&#34;&gt;&lt;br /&gt;
&lt;h2 id=&#34;sec-1&#34;&gt;rsync&lt;/h2&gt;&lt;br /&gt;
&lt;div id=&#34;outline-container-1_1&#34; class=&#34;outline-3&#34;&gt;&lt;br /&gt;
&lt;h3 id=&#34;sec-1_1&#34;&gt;include/exclude&lt;/h3&gt;&lt;br /&gt;
&lt;div id=&#34;text-1_1&#34; class=&#34;outline-text-3&#34;&gt;&lt;br /&gt;

rsync 支持使用 include/exclude 来过滤要同步的文件，使用这两个参数的时候，需要注意下面的这个问题&lt;br /&gt;
&lt;pre class=&#34;prettyprint&#34;&gt;
Note that, when using the –recursive (-r) option (which is implied by -a), every subcomponent of every path  is  vis‐
        ited  from the top down, so include/exclude patterns get applied recursively to each subcomponent’s full name (e.g. to
        include &#34;/foo/bar/baz&#34; the subcomponents &#34;/foo&#34; and &#34;/foo/bar&#34; must not be excluded).  The exclude  patterns  actually
        short-circuit  the  directory  traversal stage when rsync finds the files to send.  If a pattern excludes a particular
        parent directory, it can render a deeper include pattern ineffectual  because  rsync  did  not  descend  through  that
        excluded section of the hierarchy.  This is particularly important when using a trailing ’*’ rule.  For instance, this
        won’t work: 

/some/path/this-file-will-not-be-found
/file-is-included 
*&lt;/pre&gt;
rsync 使用 -r 来遍历子目录的时候，如果还想用 exclude include 来过滤文件，那么要注意 一个目录如果满足了 exclude，而且还没有对应的 include，那这个目录下面的子目录也会被 exclude，就算你对这个子目录写了 include 。

虽然能解决问题，可实在很费劲，直到无意中发现了 files-from 参数。

&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-1_2&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;sec-1_2&#34;&gt;files-from&lt;/h3&gt;
&lt;div id=&#34;text-1_2&#34; class=&#34;outline-text-3&#34;&gt;

files-from 是通过指定一个本地/远程的文件来定义需要同步的文件。这个文件生成方法可就多了，你可以用 find/sed/awk/xxxxx 等搭配来得到你这个文件，一行命令不够还可以多行，是不是爽多了？
&lt;pre class=&#34;prettyprint&#34;&gt;
如果是远程文件，那就 –files-from=:/path/to/files。

&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;sec-2&#34;&gt;写在后面&lt;/h2&gt;
&lt;div id=&#34;text-2&#34; class=&#34;outline-text-2&#34;&gt;

顺便测试一下 org2blog，这帖子是用 org2blog 写的，给作者提了个建议，加上 permlink 的支持，没几天居然给加上了，刚好测试一下，呵呵。

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>