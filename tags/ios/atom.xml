<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>ios on wd and cc</title><link>https://wdicc.com/tags/ios/</link><description>Recent content in ios on wd and cc</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Thu, 07 Nov 2019 12:21:57 +0800</lastBuildDate><atom:link href="https://wdicc.com/tags/ios/atom.xml" rel="self" type="application/rss+xml"/><item><title>Upgrade RN From 0.57 to 0.61</title><link>https://wdicc.com/upgrade-rn-from-0.57to-0.61/</link><pubDate>Thu, 07 Nov 2019 12:21:57 +0800</pubDate><guid>https://wdicc.com/upgrade-rn-from-0.57to-0.61/</guid><description>好久没升级 app 使用的 RN 了，前几天看见已经是 0.61 了，我们用的还是 0.57，已经差了好几个版本了，有必要跟进一下了。 首先那个 react-native-git-upgrade 被抛弃了，提供了一个 web 的 diff 工具，自己给代码应用 diff 就好了。我的做法是，建一个分支，先把所有除了 android 目录之外的修改了，然后调试搞定 iOS 的编译。搞定之后再搞 android 的。 建议使用 yarn ios/android 这样的命令来运行看错误什么的，如果遇到问题，命令行会提示你一些操作，有的按照操作修改就行。 iOS iOS 这边主要是改进了模块的集成方法，官方支持了 cocoapods。最早的时候，增加模块的时候，如果有 native 代码，需要自己去添加到自己的工程里面。后面有了 react-native link 之后，一般只需要 link 一下就可以了。所以后面官方支持了自动 link 的功能，add 一个模块之后就会给你自动 link 了，不用你自己再操作了。再后面，大家广泛使用 cocoapods 之后，慢慢的一些 rn 模块就增加了自己的 .podspec 文件，这样就可以允许通过 cocoapods 引用这些依赖了，这样增加依赖还不用修改项目文件， Podfile 和 Podfile.lock 还可以增加到版本管理里面，也很方便。 现在到了 0.61 官方支持了 cocoapods，意思是你 add 一个模块之后，会自动给你通过 Podfile 引用到项目里面。怎么做到的呢？主要是通过 cocoapods 的 use_native_modules!</description></item></channel></rss>