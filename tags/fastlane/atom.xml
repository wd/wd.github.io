<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>fastlane on wd and cc</title><link>https://wdicc.com/tags/fastlane/</link><description>Recent content in fastlane on wd and cc</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Fri, 26 Jul 2019 14:55:38 +0800</lastBuildDate><atom:link href="https://wdicc.com/tags/fastlane/atom.xml" rel="self" type="application/rss+xml"/><item><title>Tools to Manage Your React Native Projects</title><link>https://wdicc.com/tools-to-manage-your-react-native-projects/</link><pubDate>Fri, 26 Jul 2019 14:55:38 +0800</pubDate><guid>https://wdicc.com/tools-to-manage-your-react-native-projects/</guid><description>RN 项目大部分人都知道是基于 Javascript 的，懂 js 就可以写了。但实际上并没那么简单。大概总结下这里面的问题，主要从管理项目的角度来说。 NPM JS 部分肯定是不能避免的，js 依赖重这个估计都知道， node_modules 被很多人吐槽了。package.json 里面写的依赖，一般都不会写死版本（这个我估计很多人都没有注意到），例如下面这个片段 1 2 3 4 5 6 7 { &amp;#34;crypto-js&amp;#34;: &amp;#34;^3.1.9-1&amp;#34;, &amp;#34;geodesy&amp;#34;: &amp;#34;^1.1.2&amp;#34;, &amp;#34;immutable&amp;#34;: &amp;#34;^3.8.2&amp;#34;, &amp;#34;moment&amp;#34;: &amp;#34;^2.19.1&amp;#34;, &amp;#34;react&amp;#34;: &amp;#34;16.5.0&amp;#34;, } 里面 geodesy 写的是 ^1.1.2 表示的是最低是这个版本，小版本号可以比这个大。 react 是写死版本号的。版本号不写死会产生一个问题，每次新安装的时候，如果有了新版本，那可能就会安装新的版本。即使你把自己的依赖都写死版本号也没有用，你依赖的依赖可能还是没有写死的。这样怎么办？ NPM 提供了 npm.lock 来管理版本，第一次使用 npm 安装的时候，会自动产生一个 npm.lock ，后面每次执行安装的时候，会根据这个里面规定的版本号来安装依赖。这样基本可以保证总是一样的版本。但是早期我使用 npm 的时候有一个问题，执行安装的时候居然还会修改 npm.lock ，我记得是会改里面的 hash 值，即使影响不大，但是每次提交修改 review 的时候都需要看看这个里面的东西就有点恶心了。所以后面我们换了 yarn，yarn 使用的是 yarn.lock 他执行安装的时候不会修改这文件里面的东西。（npm 我之后就没用了，所以后面讲的主要以 yarn 为准。）这样有了 lock 文件之后，表示所有依赖都有了确定的版本。 那么如何升级其中某一个依赖呢？方法很简单，删除 yarn.</description></item></channel></rss>