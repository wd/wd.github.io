<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>git on wd and cc</title>
    <link>https://wdicc.com/tags/git/</link>
    <description>Recent content in git on wd and cc</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sun, 04 Apr 2010 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://wdicc.com/tags/git/atom.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>强大的 git 和 git svn</title>
      <link>https://wdicc.com/powerful-git-and-git-svn/</link>
      <pubDate>Sun, 04 Apr 2010 00:00:00 +0000</pubDate>
      
      <guid>https://wdicc.com/powerful-git-and-git-svn/</guid>
      <description>在春哥的鼓动下，用上了 git。有 git svn 支持，还是很好用的，建议 svn 用户都试试看。
使用 git svn clone SVN_URL 来 clone 初始化你的本地 repo，然后就和 svn 没关系了，直到你需要把你的改动提交到 svn 的 repo。
先说说 git 的一些本地操作，就捡我自己用的说吧，我觉得应该也够用了。
首先 git add 是用来添加文件的，编辑好新的文件后，使用 git add file_name 就能把他加入到 git 里面管理，当然，如果还不打算提交他，那也可以先编辑以后再 add。
然后 git mv 改名，git rm 删文件，这和一般的 linux 命令差不多，就不用多说了。要记得的是，如果想让你的改动加入到 git 的管理里面，那就最好使用这两个文件来改名和删文件。如果直接用 linux 命令操作，比如改名，git 会认为你要删一个文件，并且那个新的文件还没不会加入到管理里面。
然后就是 git status 了。执行这个能看到当前 repo 的分支（例如下面的第一行说的 wd）里面有哪些改动，这个里面的信息应该是能分四类。一类是对文件的操作，比如添加删除文件等(changes to be committed)，这类文件直接使用 git commit 就能提交。一类是对现有文件的修改(changed but not updated)，这类文件使用 git add 添加后也能用 git commit 提交，不过也可以用 git commit -a 直接提交。一类是没有加入到管理的一些文件(untracked files)，这类文件不会被提交，除非你使用 git add 添加他们。好像还有一类，是你的修改如果和上游冲突的时候，这时候会多出来一类，提示你这些文件和上游冲突，打开这些文件，里面有明显的标记会指出冲突是什么，解决冲突后，git add 添加这个文件，再提交就可以了。</description>
    </item>
    
  </channel>
</rss>