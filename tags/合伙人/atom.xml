<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>合伙人 on wd and cc</title>
    <link>https://wdicc.com/tags/%E5%90%88%E4%BC%99%E4%BA%BA/</link>
    <description>Recent content in 合伙人 on wd and cc</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 13 Feb 2019 18:14:39 +0800</lastBuildDate>
    
	<atom:link href="https://wdicc.com/tags/%E5%90%88%E4%BC%99%E4%BA%BA/atom.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Co. founders</title>
      <link>https://wdicc.com/co-founders/</link>
      <pubDate>Wed, 13 Feb 2019 18:14:39 +0800</pubDate>
      
      <guid>https://wdicc.com/co-founders/</guid>
      <description>  和别人一起搞了一个公司，算是一个技术合伙人。目前参与技术团队的组建，产品团队的组建等。目前公司运行了大概 2 年不到，稍微总结一下。 需要什么样子的合伙人   开公司前应该需要先弄清楚自己需要什么样子的合伙人。一般来说都会找一个和自己能力互补的，比如自己搞技术的，找一个产品或者运营方向比较强的。这样大家分工协作，以最少的资金发挥最大效力。  但是这里其实有一个问题，怎么评价对方的能力。因为是补充自己不专业的部分，那自己一般并没有能力仔细考核对方的能力，怎么办？  国外公司招聘技术人员，会倾向于考核算法等基础能力，即使你工作年头再长，也不看你做的系统业务有多牛逼，只看你的基础技术能力如何，对一些底层协议了解情况等等。为什么呢？  我感觉因为我们做的事情事情通常有很大的不确定性，技术是为业务服务的，业务方向随市场情况走。技术这块来说，算法协议这些东西都是不变的，了解了原理，那不管是用什么语言，为什么业务服务，都可以随机应变，很快可以适应。  类似的，我们找合伙人实际上也不应该只考虑对方看着目前刚好符合需求，而更多的应该去看看这个人的过往业绩，是否在你不擅长的领域做了很多让你值得给出好评的成绩，同时也需要注意，是他做出来的，还是依赖公司的品牌做的。  另外也需要看看对方的团队组建能力，毕竟不可能单打独斗打天下，那必定会涉及到招聘，如果对方目前的团队战斗能力明显不行，那你也不要抱很大希望对方将来可以组建出来强大的团队。考核团队可能也简单，看看对方的团队的人都来自哪里，擅长做什么就好。  总结下来似乎 2 点：    过往的业绩，擅长的业务方向，擅长的工作方式。    团队组建能力。   需要有亲自动手的决心   合伙开公司，公司是自己的，当然这个是基于一定的股份比例来的，可能至少超过 5% 吧，具体多少看你，简单说就是一个让你觉得这个公司我需要想尽办法让他维持下去的比例。如果你找合伙人，也至少应该给到合伙人让他觉得公司是他自己的这样一个比例的股份。  公司是自己的，那就需要有亲自动手的决心。基于别人的成果，有时候很容易做出来一些让自己觉得自己牛逼的成绩。比如在一个大公司里面，做一个产品很容易就可以获得几十万的流量，或者做一个系统的时候，有很多公司资源可以使用，让你相对轻松的搭建一个复杂系统。如果离开公司，自己有没有兴趣和能力从头做这些事情呢？必须要有，因为你不做就没人做了。  创业一般都是搞一个不太成熟的领域，这里面很多事情都需要去摸索，想要快速发展，必须要亲自动手才能快速得到反馈，快速知道自己是否应该调整方向适应市场。如果让其他人做，那经过反馈，指导，反馈，指导这样的多次循环可能才会发现是需要我们调整方向，而不是办事的人有问题。 实事求是，合伙人之间公开信息   合伙人之间信息共享，发挥集体的智慧。毕竟找合伙人的目的是为了补充自己的短处，那么就应该多利用合伙人的能力，以发挥最大的效力，合伙人之间应该公开所有信息，以便让大家清楚目前整个公司的目标和问题，能出力的多出力。  一定避免遇事只是自己发愁，还有各种刻意遮掩的情况，多发挥集体智慧。 你打算在这个事情上面投入多久   如果不是热爱一个事情，恐怕大部分时候很难坚持下去，遇到挫折的时候容易放弃。创业这个事情基本上不会是一个短期的事情，尤其对于创始人来说，一般需要至少 5 年才能看到成效，想上市的话，可能需要 10 年之后才能看到。 搞明白增长点   创业之前肯定大家都会有一个有一个预期的增长点，比如用户量，收入，或者市场占有率什么的，这些是用来评估你公司市值的主要手段。那么如果找到一个可以实现的增长点，这个是需要在整个创业过程中思考的。要注意是可以实现的，还没有实现的，可以一时拿出去忽悠人，但是如果过 1-2 年依然不见成效，那会被人厌烦。当然如果在这个时间段里面发现了其他的可实现的增长点也可以可以的，主要是搞的时间越长，留给你可以继续吹牛的时间的就越短，利用好这些时间。 那些必须搞明白而一开始搞不明白的问题   一些必须解决的问题，不会自己消失，在整个过程中需要持续的投入去想办法解决，如果确实觉得那也可以提前思考退路，早一点想多一些时间，总比到最后钱花没了也还是死在了这些一开始就存在的问题上面。 Notes  WHAT I LEARNED CO-FOUNDING DRIBBBLE   作者指出来几个地方，我大致总结一下。    找一个合的来的比较熟悉的合伙人。和结婚一样，以后会有大量的时间和这个合伙人一起度过。    一开始他们邀请一些内测用户的时候，会给一个免费的 T-shirt，这样会让对方有一点愧疚感，而更加好的测试。    前 100 个用户很重要。你得仔细听他们的反馈啥的。    你还得自己决定走那条路，用户会有很多的建议意见，但是最后怎么做还是取决于你自己。    不要害怕丢弃一些东西，比如可能是花了很多会议，时间，精力做出来的东西。可以多内部测试，不着急发布。    慢慢小迭代，别一次步子太大，容易伤害已经熟悉你的产品的用户，导致他们离开。    干自己也不清楚的事情也没啥，可以笑对自己犯的错误是一种好品质。    脸皮要厚。多看看正向的事情，有那么多喜欢用你的东西的用户呢。    别跟风流行的东西，这些东西会不停的变的，主要是看是否有益于解决你面对的问题。    另一个别着急跟风的原因是，很多东西会消失，没啥。    流行的东西会消失，现在做的东西也会没有，但是人不会啦，人是最重要的。    多搞搞业余的项目让你跟上时代。    没有 13 。。。因为不吉利。。    别迷信。    找个好律师和会计。    要认识到自己有时候很固执。比如纠结输出的 HTML 代码格式拒绝使用 SASS，但是实际上大家都已经不直接看源码啦，而是通过 dev tools 看。    通过写作，分享你学会的东西。也不用担心自己是不是专家啦，总是会有人受益的。    别融资。融资容易导致公司目标变化，可能失去初心。    注意身体健康。    适当的时候能放得下。   What happend to yahoo   钱带来的问题    Yahoo 当时的 banner 广告收入已经比较高了，赚钱比较容易的时候可能就会比较容易产生惰性。    Yahoo 当时还有一个模式是投资一些小的 startup 通过买他们广告来获取流量，这样两方都会有成长，说服投资者这个模式是未来。    当时所有的搜索引擎都卖 bnnaer 广告，所以他们都叫自己门户网站，而不是搜索引擎。意思是用户不用找了，我们这里就是最全的。    当时所有程序员都使用 Google 搜索而不用 Yahoo 的时候，提议过 David Filo 是不是考虑收购 Google，但是 Filo 说搜索只占我们 6% 的流量而已，做的好坏都差不多没什么价值。    当人们不停的为 banner 广告付钱的时候，你不会认真对待搜索的。Google 不被这个影响。    黑客文化（或者叫以黑客为中心，hacker-centric，或者叫工程师文化）    Yhaoo 因为自己的商业模式（卖 banner）叫自己做媒体公司，即使实际上看公司更像是软件开发公司。    以及因为惧怕微软，一旦叫做软件公司，那么可能会被微软狙杀，类似 Netscape（但是据说 Netscape 是微软狙杀的最后一个大公司）。    其实假装是媒体公司躲开微软也挺好，但是实际上 Yahoo 也努力让自己认为自己是媒体公司，    这样导致他们和 Google 之类的比缺少黑客文化，要做的事情都是由产品经理和设计师来制定的。    因为不需要程序员思考，这样他们也不能吸引聪明的程序员加入，充满了 bad programmers。一旦开始有 bad 程序员，就会陷入螺旋式的下降，因为好的程序员只想和好的程序员一起工作。    一个科技公司需要会以程序员为中心，一个媒体公司可不是这样的。Google 到有 500 人的时候，在餐厅还可以听到程序员在谈论怎么处理 SEO 好，Yahoo 的程序员就不需要思考这些，他们只需要完成产品经理的想法就可以了。    为了保证黑客文化，据说 Mark Zuckergberg 说早期的时候他们甚至对于 HR 和 Marketing 职位也雇佣程序员。    所有需要做好软件的公司，都应该需要有黑客文化，否则就不会吸引到好的程序员，也就做不好软件，即使招聘再多的产品经理也没用。   </description>
    </item>
    
  </channel>
</rss>