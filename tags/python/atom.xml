<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>python on wd and cc</title><link>https://wdicc.com/tags/python/</link><description>Recent content in python on wd and cc</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><copyright>Copyright © 2020 wd. All Rights Reserved</copyright><lastBuildDate>Sun, 02 Feb 2020 16:20:21 +0800</lastBuildDate><atom:link href="https://wdicc.com/tags/python/atom.xml" rel="self" type="application/rss+xml"/><item><title>Google Python Style Guide</title><link>https://wdicc.com/google-python-style-guide/</link><pubDate>Sun, 02 Feb 2020 16:20:21 +0800</pubDate><guid>https://wdicc.com/google-python-style-guide/</guid><description>来自这里。翻译的目的是为了方便快速理解，所以没有太纠结很准确，最好是和英文对应看。 1 Background Google 的 python 代码风格</description></item><item><title>Add an Force Sync Button in Django Admin</title><link>https://wdicc.com/add-an-force-sync-button-in-django-admin/</link><pubDate>Thu, 12 Dec 2019 13:33:15 +0800</pubDate><guid>https://wdicc.com/add-an-force-sync-button-in-django-admin/</guid><description>我们的系统里面需要和外部的系统同步一些数据，为了保证数据正确处理，增加了一个队列。队列是通过一个 celery 里</description></item><item><title>Learning Python Coroutine</title><link>https://wdicc.com/learning-python-coroutine/</link><pubDate>Thu, 17 Oct 2019 10:49:40 +0800</pubDate><guid>https://wdicc.com/learning-python-coroutine/</guid><description>看了一个视频 OSB 2015 - How Do Python Coroutines Work?，从头开始讲 coroutine 是怎么抽象出来的，感觉好厉害。自己写了一点程序学习</description></item><item><title>ASGI</title><link>https://wdicc.com/asgi/</link><pubDate>Tue, 15 Oct 2019 14:52:47 +0800</pubDate><guid>https://wdicc.com/asgi/</guid><description>Django 3.0 要支持 ASGI 了，全称 Asynchronous Server Gateway Interface，使用了 coroutines 异步。WSGI 是目前普遍使用的，把进来的请求标</description></item><item><title>Notes for CPython Internals</title><link>https://wdicc.com/notes-for-cpython-internals/</link><pubDate>Thu, 05 Sep 2019 12:43:42 +0800</pubDate><guid>https://wdicc.com/notes-for-cpython-internals/</guid><description>视频地址这里。 Python 源码 Include/opcode.h 里面定义了所有 opcode。 Modules 里面是一些 c 实现的模块， Lib 里面是用 python 实现的模块。</description></item><item><title>Python Coroutine</title><link>https://wdicc.com/python-coroutine/</link><pubDate>Tue, 27 Aug 2019 10:49:51 +0800</pubDate><guid>https://wdicc.com/python-coroutine/</guid><description>协程 coroutine 不知道是从什么时候开始的，感觉我第一次看到是 lua 里面支持 yield 。后面看到就是 javascript 里面的 Promise，</description></item><item><title>Book Review of Effective Python: 59 Specific Ways to Write Better Python</title><link>https://wdicc.com/book-review-of-effective-python/</link><pubDate>Mon, 26 Aug 2019 09:53:26 +0800</pubDate><guid>https://wdicc.com/book-review-of-effective-python/</guid><description>书名是《Effective Python：编写高质量 Python 代码的 59 个方法》这本书买了大概 2 年，一直没看完，</description></item><item><title>Run Command Through Python</title><link>https://wdicc.com/run-command-through-python/</link><pubDate>Tue, 13 Aug 2019 14:53:34 +0800</pubDate><guid>https://wdicc.com/run-command-through-python/</guid><description>通过 python 执行命令有很多方法。 最简单的 os.system(command) , command 是要执行的命令，一个包括命令和参数的字符串。产生的输出会直接</description></item><item><title>An Interesting Python Function</title><link>https://wdicc.com/an-interesting-python-function/</link><pubDate>Wed, 07 Aug 2019 16:53:09 +0800</pubDate><guid>https://wdicc.com/an-interesting-python-function/</guid><description>这里看到的，感觉挺有意思的，记录一下。题目来自这里。 如何让下面这个函数返回 True ？ def check(x): if x+1 is 1+x: return False if x+2 is</description></item><item><title>Emacs as python IDE</title><link>https://wdicc.com/emacs-as-python-ide/</link><pubDate>Fri, 30 Jun 2017 20:47:56 +0800</pubDate><guid>https://wdicc.com/emacs-as-python-ide/</guid><description>最近 python 写的比较多，比较了几个编辑器，最后还是留下了 emacs。 主要比较了 emacs 和 pycharm。pych</description></item><item><title>Python __new__</title><link>https://wdicc.com/python-new/</link><pubDate>Mon, 16 Jan 2017 15:47:59 +0800</pubDate><guid>https://wdicc.com/python-new/</guid><description>翻译一点 https://www.python.org/download/releases/2.2/descrintro/#__new__ 有些感觉还是挺生硬的，方便自己理解吧。 __new__ 的一些规则: __new__ 是一个静态方法。定义它的时候并不需要</description></item><item><title>Python inherit and super</title><link>https://wdicc.com/python-inherit-and-super/</link><pubDate>Mon, 16 Jan 2017 11:53:04 +0800</pubDate><guid>https://wdicc.com/python-inherit-and-super/</guid><description>又学习了一个 python 的继承。有很多帖子都有介绍，比如理解 Python super，python super()。 先看一个</description></item><item><title>Python metaclass</title><link>https://wdicc.com/python-metaclass/</link><pubDate>Thu, 12 Jan 2017 18:26:22 +0800</pubDate><guid>https://wdicc.com/python-metaclass/</guid><description>又理解了一下 python 的 metaclass 可以做什么，尝试记录一下。 class Meta(type): register = [] def __new__(cls, class_name, parrent_class, params): print(&amp;quot;In meta new: {}, {}, {}, {}&amp;quot;.format(cls, class_name, parrent_class, params)) cls.register.append(class_name) params['test_prop'] = True # return super(Meta, cls).__new__(cls,</description></item><item><title>python 的 decorator 学习</title><link>https://wdicc.com/decorator-in-python/</link><pubDate>Fri, 21 Oct 2016 18:50:59 +0800</pubDate><guid>https://wdicc.com/decorator-in-python/</guid><description>最近学习了一下 python 的 decorator（装饰器），看的是这篇，Python修饰器的函数式编程， 觉得挺有</description></item><item><title>把 emacs 做为 python ide</title><link>https://wdicc.com/use-emacs-as-python-ide/</link><pubDate>Mon, 13 Jul 2009 00:00:00 +0000</pubDate><guid>https://wdicc.com/use-emacs-as-python-ide/</guid><description>emacs 用的其实不是很多，不过他实在是个好东西，各种 mode，用熟了肯定能帮你提升不少工作速度。 我用 emacs-cvs , ropemacs(</description></item><item><title>改良的 fetion.py</title><link>https://wdicc.com/modified-fetion-py/</link><pubDate>Mon, 06 Jul 2009 00:00:00 +0000</pubDate><guid>https://wdicc.com/modified-fetion-py/</guid><description>这个 fetion.py 来自 这里。 不修改的情况下，-t 可以是 sip, uid, mobile_no 这几个。 我修改了下，不加 -t 参数会打印联系人列表。另外</description></item><item><title>asm 和 python的扯淡 zz</title><link>https://wdicc.com/asm-and-python/</link><pubDate>Thu, 14 May 2009 00:00:00 +0000</pubDate><guid>https://wdicc.com/asm-and-python/</guid><description>python: 兄弟，最近我手头紧，能借点不？ asm: 行，不过怎么你以前不是过得还滋润的，怎么现在混这么差， python: 不知道啊，</description></item><item><title>写了一个 kde plasma applet</title><link>https://wdicc.com/writing-a-kde-plasma-applet/</link><pubDate>Fri, 23 Jan 2009 00:00:00 +0000</pubDate><guid>https://wdicc.com/writing-a-kde-plasma-applet/</guid><description>用 gnome 的时候，对 panel 上面的 cpu 等 applet 情有独钟。这个东西能让我对自己的系统有第一手信息，有时候某个程序出问题了</description></item></channel></rss>