<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Django on wd and cc</title><link>https://wdicc.com/tags/django/</link><description>Recent content in Django on wd and cc</description><generator>Hugo</generator><language>en</language><copyright>wd © 2025</copyright><lastBuildDate>Sat, 28 Dec 2019 14:11:19 +0800</lastBuildDate><atom:link href="https://wdicc.com/tags/django/atom.xml" rel="self" type="application/rss+xml"/><item><title>Django Channels2</title><link>https://wdicc.com/django-channels2/</link><pubDate>Sat, 28 Dec 2019 14:11:19 +0800</pubDate><guid>https://wdicc.com/django-channels2/</guid><description>&lt;p&gt;Django 3.0.1 has released for sometime. We still use Django 1.11 in one of our project, with Channels 1.1.8, I think it&amp;#39;s the time to upgrade to newest Django and Channels.&lt;/p&gt;
&lt;p&gt;
According this &lt;a href="https://channels.readthedocs.io/en/latest/one-to-two.html#how-to-upgrade"&gt;upgrade guide&lt;/a&gt;, Channels 2 is a fully rewritten, lots of things has changed. This post is just a record about the upgrade I&amp;#39;ve done.&lt;/p&gt;
&lt;div id="outline-container-headline-1" class="outline-3"&gt;
&lt;h3 id="headline-1"&gt;
Routing
&lt;/h3&gt;
&lt;div id="outline-text-headline-1" class="outline-text-3"&gt;
&lt;p&gt;
In Channels 2 you need to add an &lt;code class="verbatim"&gt;ASGI_APPLICATION&lt;/code&gt; in the settings file, point to the asgi application.&lt;/p&gt;
&lt;div class="src src-python"&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt;1&lt;/span&gt;&lt;span&gt;ASGI_APPLICATION &lt;span style="color:#666"&gt;=&lt;/span&gt; &lt;span style="color:#4070a0"&gt;&amp;#34;proj.routing.application&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
And add &lt;code&gt;routing.py&lt;/code&gt; file, add an &lt;code&gt;application&lt;/code&gt; variable in the file like the bellow.&lt;/p&gt;
&lt;div class="src src-python"&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt;1&lt;/span&gt;&lt;span&gt;application &lt;span style="color:#666"&gt;=&lt;/span&gt; ProtocolTypeRouter({
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt;2&lt;/span&gt;&lt;span&gt; &lt;span style="color:#4070a0"&gt;&amp;#34;websocket&amp;#34;&lt;/span&gt;: URLRouter([url(&lt;span style="color:#4070a0"&gt;r&lt;/span&gt;&lt;span style="color:#4070a0"&gt;&amp;#34;^ws$&amp;#34;&lt;/span&gt;, MyConsumer)])
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt;3&lt;/span&gt;&lt;span&gt;})&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
The &lt;code&gt;websocket&lt;/code&gt; key means it will handle websocket requests, the &lt;code&gt;URLRouter&lt;/code&gt; just work as Django&amp;#39;s. &lt;code&gt;MyConsumer&lt;/code&gt; is the handler for the request.&lt;/p&gt;</description></item><item><title>Add an Force Sync Button in Django Admin</title><link>https://wdicc.com/add-an-force-sync-button-in-django-admin/</link><pubDate>Thu, 12 Dec 2019 13:33:15 +0800</pubDate><guid>https://wdicc.com/add-an-force-sync-button-in-django-admin/</guid><description>&lt;p&gt;我们的系统里面需要和外部的系统同步一些数据，为了保证数据正确处理，增加了一个队列。队列是通过一个 celery 里面的定时任务同步的。定时任务设置是 5 分钟一次，那有时候测试的时候或者出错的时候就可能会想要立刻执行下同步，好看看执行结果，要不很有可能等到下次执行的时候还是有问题，这就有点浪费时间了。&lt;/p&gt;</description></item><item><title>Best Pratice for Celery</title><link>https://wdicc.com/best-pratice-for-celery/</link><pubDate>Wed, 17 Jul 2019 15:27:48 +0800</pubDate><guid>https://wdicc.com/best-pratice-for-celery/</guid><description>&lt;div id="outline-container-headline-1" class="outline-3"&gt;
&lt;h3 id="headline-1"&gt;
Celery beat and worker
&lt;/h3&gt;
&lt;div id="outline-text-headline-1" class="outline-text-3"&gt;
&lt;p&gt;
Celery works with two separate parts, the beat and the worker. The beat is the control center which determine when and where to send the tasks, there should be only one beat in each celery network. The worker is the one who runs the tasks and send the results back to the beat, there could be lots of works in each network.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-headline-2" class="outline-3"&gt;
&lt;h3 id="headline-2"&gt;
Result backend
&lt;/h3&gt;
&lt;div id="outline-text-headline-2" class="outline-text-3"&gt;
&lt;p&gt;
Result backend is the place where task results stored. By default, celery support many storage types, like PostgreSQL, Redis, etc. If you store the results in the database, you may need to clean the old data from the database periodically. I use Redis as the result backend, it will expire the old data automatically.&lt;/p&gt;</description></item><item><title>Logging in Celery and Django</title><link>https://wdicc.com/logging-in-celery-and-django/</link><pubDate>Fri, 05 Jul 2019 14:26:24 +0800</pubDate><guid>https://wdicc.com/logging-in-celery-and-django/</guid><description>&lt;div id="outline-container-headline-1" class="outline-3"&gt;
&lt;h3 id="headline-1"&gt;
Get celery work with django
&lt;/h3&gt;
&lt;div id="outline-text-headline-1" class="outline-text-3"&gt;
&lt;p&gt;
Celery can work with django, it&amp;#39;s very simple.&lt;/p&gt;
&lt;div class="src src-python"&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt; 1&lt;/span&gt;&lt;span&gt;&lt;span style="color:#007020;font-weight:bold"&gt;from&lt;/span&gt; &lt;span style="color:#0e84b5;font-weight:bold"&gt;__future__&lt;/span&gt; &lt;span style="color:#007020;font-weight:bold"&gt;import&lt;/span&gt; absolute_import
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt; 2&lt;/span&gt;&lt;span&gt;&lt;span style="color:#007020;font-weight:bold"&gt;import&lt;/span&gt; &lt;span style="color:#0e84b5;font-weight:bold"&gt;os&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt; 3&lt;/span&gt;&lt;span&gt;&lt;span style="color:#007020;font-weight:bold"&gt;from&lt;/span&gt; &lt;span style="color:#0e84b5;font-weight:bold"&gt;celery&lt;/span&gt; &lt;span style="color:#007020;font-weight:bold"&gt;import&lt;/span&gt; Celery
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt; 4&lt;/span&gt;&lt;span&gt;&lt;span style="color:#007020;font-weight:bold"&gt;from&lt;/span&gt; &lt;span style="color:#0e84b5;font-weight:bold"&gt;django.conf&lt;/span&gt; &lt;span style="color:#007020;font-weight:bold"&gt;import&lt;/span&gt; settings
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt; 5&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt; 6&lt;/span&gt;&lt;span&gt;&lt;span style="color:#60a0b0;font-style:italic"&gt;# set the default Django settings module for the &amp;#39;celery&amp;#39; program.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt; 7&lt;/span&gt;&lt;span&gt;os&lt;span style="color:#666"&gt;.&lt;/span&gt;environ&lt;span style="color:#666"&gt;.&lt;/span&gt;setdefault(&lt;span style="color:#4070a0"&gt;&amp;#39;DJANGO_SETTINGS_MODULE&amp;#39;&lt;/span&gt;, &lt;span style="color:#4070a0"&gt;&amp;#39;your_app.settings&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt; 8&lt;/span&gt;&lt;span&gt;app &lt;span style="color:#666"&gt;=&lt;/span&gt; Celery(&lt;span style="color:#4070a0"&gt;&amp;#39;you_app&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt; 9&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt;10&lt;/span&gt;&lt;span&gt;&lt;span style="color:#60a0b0;font-style:italic"&gt;# Using a string here means the worker will not have to&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt;11&lt;/span&gt;&lt;span&gt;&lt;span style="color:#60a0b0;font-style:italic"&gt;# pickle the object when using Windows.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt;12&lt;/span&gt;&lt;span&gt;app&lt;span style="color:#666"&gt;.&lt;/span&gt;config_from_object(&lt;span style="color:#4070a0"&gt;&amp;#39;django.conf:settings&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt;13&lt;/span&gt;&lt;span&gt;app&lt;span style="color:#666"&gt;.&lt;/span&gt;autodiscover_tasks(&lt;span style="color:#007020;font-weight:bold"&gt;lambda&lt;/span&gt;: settings&lt;span style="color:#666"&gt;.&lt;/span&gt;INSTALLED_APPS)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Then write some task files named &lt;code&gt;tasks.py&lt;/code&gt; under your apps directory, celery will auto discovery and run these tasks.&lt;/p&gt;</description></item><item><title>Django Testing</title><link>https://wdicc.com/django-testing/</link><pubDate>Wed, 19 Jun 2019 15:38:56 +0800</pubDate><guid>https://wdicc.com/django-testing/</guid><description>&lt;p&gt;Django 自己的 unittest 支持的挺好，一般只需要在 app 下面加一个 tests.py 在里面写 case 就可以了。case 对应的类继承 &lt;code class="verbatim"&gt;django.test.TestCase&lt;/code&gt; 就好。&lt;/p&gt;
&lt;p&gt;
这个 &lt;code class="verbatim"&gt;django.test.TestCase&lt;/code&gt; 继承自 &lt;code class="verbatim"&gt;unittest.TestCase&lt;/code&gt; ，django 这个多了一个自动使用事务的功能，所以用 django 这个的话，每个测试用例执行前后会自动回滚数据库操作，这样不用你自己 cleanup 数据，还比较方便。&lt;/p&gt;</description></item><item><title>Debuging Django</title><link>https://wdicc.com/debuging-django/</link><pubDate>Mon, 29 Apr 2019 14:41:12 +0800</pubDate><guid>https://wdicc.com/debuging-django/</guid><description>&lt;p&gt;起初 hackernews 看到一个文章 &lt;a href="https://news.ycombinator.com/item?id=19717786"&gt;PySnooper: Never use print for debugging again&lt;/a&gt;，觉得挺有意思的，结果把 hackernews 的讨论看了一下发现有意思东西更多一点，总结一下。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://github.com/cool-RR/pysnooper"&gt;PySnooper&lt;/a&gt;: Never use print for debugging again，只需要给函数加一个装饰器，就可以把函数执行的每一步的结果都打印出来。&lt;/li&gt;
&lt;li&gt;&lt;a href="https://django-extensions.readthedocs.io/en/latest/runserver_plus.html"&gt;django-extensions&lt;/a&gt; 的 runserver-plus 配合 &lt;a href="https://werkzeug.palletsprojects.com/en/0.15.x/debug/#using-the-debugger"&gt;Werkzeug&lt;/a&gt; 可以实现在遇到异常的时候，支持在 web 上面调试代码，打印异常的时候的上下文内容什么的。&lt;/li&gt;
&lt;li&gt;Python 自己的 &lt;a href="https://docs.python.org/3/library/functions.html#breakpoint"&gt;breakpoint&lt;/a&gt; 函数，执行到的时候默认会进入 pdb.set_trace() 状态方便你进行上下文调试。&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/gruns/icecream"&gt;icecream&lt;/a&gt; 提供了一个方便的 ic 函数，可以无感的加入到你的代码里面，不影响你的代码的执行结果，但是会打印传给它的参数和执行结果。&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/robdmc/behold"&gt;Behold&lt;/a&gt;: A debugging tool for large Python projects，可以替代你写冗长的打印命令。不过感觉它自己的语法似乎也并不方便。。。&lt;/li&gt;
&lt;li&gt;VS Code 提供的 &lt;a href="https://code.visualstudio.com/docs/editor/debugging#_logpoints"&gt;Logpoints&lt;/a&gt; 和 Visual Studio 提供的 &lt;a href="https://docs.microsoft.com/en-us/visualstudio/debugger/using-breakpoints?view=vs-2019#BKMK_set_a_data_breakpoint_managed"&gt;Break When Value Changes&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/cknd/stackprinter"&gt;stackprinter&lt;/a&gt; 可以让你的堆栈打印更友好，打印堆栈的时候还可以输出上下文的取值。&lt;/li&gt;
&lt;li&gt;pdb, epdb，ipdb, 应该都是类似的东西，其中 pdb 是自带的。通过给代码增加 import ipdb ipdb.set_trace() 调试。&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/tylerwince/pydbg"&gt;pydbg&lt;/a&gt; 替代 print 的。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
另外&lt;a href="https://stribny.name/blog/2019/06/debugging-python-programs"&gt;一篇文章&lt;/a&gt;&lt;/p&gt;</description></item><item><title>How to Create an Index in Django Without Downtime</title><link>https://wdicc.com/how-to-create-an-index-in-django-without-downtime/</link><pubDate>Fri, 26 Apr 2019 11:46:27 +0800</pubDate><guid>https://wdicc.com/how-to-create-an-index-in-django-without-downtime/</guid><description>&lt;p&gt;
django 自己带了一个 ORM 实现，基本可以通过 ORM 管理数据库，这样用户可以在不会 SQL 的情况下使用数据库。在对 model 的属性（字段）做了修改之后，通过执行 &lt;code class="verbatim"&gt;makemigrations&lt;/code&gt; 可以生成一个 migrate 文件，然后执行 &lt;code class="verbatim"&gt;migrate&lt;/code&gt; 命令可以把这些修改应用到数据库。同时在数据库里面，也会记录当前 migrate 执行的状态，这样能保证数据库的状态和 django 自己认为的数据库的状态是一致的。&lt;/p&gt;</description></item><item><title>Django middleware</title><link>https://wdicc.com/django-middleware/</link><pubDate>Wed, 05 Jul 2017 18:07:50 +0800</pubDate><guid>https://wdicc.com/django-middleware/</guid><description>&lt;p&gt;
Django 提供了 &lt;a href="https://docs.djangoproject.com/en/1.11/topics/http/middleware/"&gt;middleware&lt;/a&gt; 来让你 hack Request 和 Response。用的时候有几个问题需要注意一下。&lt;/p&gt;
&lt;div id="outline-container-headline-1" class="outline-2"&gt;
&lt;h2 id="headline-1"&gt;
&lt;code class="verbatim"&gt;__call__&lt;/code&gt; 方法
&lt;/h2&gt;
&lt;div id="outline-text-headline-1" class="outline-text-2"&gt;
&lt;p&gt;
&lt;code class="verbatim"&gt;__call__&lt;/code&gt; 方法实际上就是最早收到 request 的地方，如果不关心 view，那么就可以在这里做你想要做的事情。比如认证用户啥的。这个实际上应该就是早期的 &lt;code class="verbatim"&gt;process_request&lt;/code&gt; 。&lt;/p&gt;</description></item></channel></rss>