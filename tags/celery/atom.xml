<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>celery on wd and cc</title><link>https://wdicc.com/tags/celery/</link><description>Recent content in celery on wd and cc</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Wed, 17 Jul 2019 15:27:48 +0800</lastBuildDate><atom:link href="https://wdicc.com/tags/celery/atom.xml" rel="self" type="application/rss+xml"/><item><title>Best Pratice for Celery</title><link>https://wdicc.com/best-pratice-for-celery/</link><pubDate>Wed, 17 Jul 2019 15:27:48 +0800</pubDate><guid>https://wdicc.com/best-pratice-for-celery/</guid><description>Celery beat and worker Celery works with two separate parts, the beat and the worker. The beat is the control center which determineÂ when and where to send the tasks, there should be only one beat in each celery network. The worker is the one who runs the tasks and send the results back to the beat, there could be lots of works in each network.</description></item><item><title>Logging in Celery and Django</title><link>https://wdicc.com/logging-in-celery-and-django/</link><pubDate>Fri, 05 Jul 2019 14:26:24 +0800</pubDate><guid>https://wdicc.com/logging-in-celery-and-django/</guid><description>Get celery work with django Celery can work with django, it&amp;#39;s very simple.
from __future__ import absolute_import import os from celery import Celery from django.conf import settings # set the default Django settings module for the &amp;#39;celery&amp;#39; program. os.environ.setdefault(&amp;#39;DJANGO_SETTINGS_MODULE&amp;#39;, &amp;#39;your_app.settings&amp;#39;) app = Celery(&amp;#39;you_app&amp;#39;) # Using a string here means the worker will not have to # pickle the object when using Windows.</description></item></channel></rss>