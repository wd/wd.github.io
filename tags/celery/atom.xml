<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Celery on wd and cc</title><link>https://wdicc.com/tags/celery/</link><description>Recent content in Celery on wd and cc</description><generator>Hugo</generator><language>zh-CN</language><lastBuildDate>Wed, 17 Jul 2019 15:27:48 +0800</lastBuildDate><atom:link href="https://wdicc.com/tags/celery/atom.xml" rel="self" type="application/rss+xml"/><item><title>Best Pratice for Celery</title><link>https://wdicc.com/best-pratice-for-celery/</link><pubDate>Wed, 17 Jul 2019 15:27:48 +0800</pubDate><guid>https://wdicc.com/best-pratice-for-celery/</guid><description>&lt;div id="outline-container-headline-1" class="outline-3">
&lt;h3 id="headline-1">
Celery beat and worker
&lt;/h3>
&lt;div id="outline-text-headline-1" class="outline-text-3">
&lt;p>
Celery works with two separate parts, the beat and the worker. The beat is the control center which determineÂ when and where to send the tasks, there should be only one beat in each celery network. The worker is the one who runs the tasks and send the results back to the beat, there could be lots of works in each network.&lt;/p></description></item><item><title>Logging in Celery and Django</title><link>https://wdicc.com/logging-in-celery-and-django/</link><pubDate>Fri, 05 Jul 2019 14:26:24 +0800</pubDate><guid>https://wdicc.com/logging-in-celery-and-django/</guid><description>&lt;div id="outline-container-headline-1" class="outline-3">
&lt;h3 id="headline-1">
Get celery work with django
&lt;/h3>
&lt;div id="outline-text-headline-1" class="outline-text-3">
&lt;p>
Celery can work with django, it&amp;#39;s very simple.&lt;/p>
&lt;div class="src src-python">
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> __future__ &lt;span style="color:#f92672">import&lt;/span> absolute_import
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> os
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> celery &lt;span style="color:#f92672">import&lt;/span> Celery
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> django.conf &lt;span style="color:#f92672">import&lt;/span> settings
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># set the default Django settings module for the &amp;#39;celery&amp;#39; program.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>os&lt;span style="color:#f92672">.&lt;/span>environ&lt;span style="color:#f92672">.&lt;/span>setdefault(&lt;span style="color:#e6db74">&amp;#39;DJANGO_SETTINGS_MODULE&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;your_app.settings&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>app &lt;span style="color:#f92672">=&lt;/span> Celery(&lt;span style="color:#e6db74">&amp;#39;you_app&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Using a string here means the worker will not have to&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># pickle the object when using Windows.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>app&lt;span style="color:#f92672">.&lt;/span>config_from_object(&lt;span style="color:#e6db74">&amp;#39;django.conf:settings&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>app&lt;span style="color:#f92672">.&lt;/span>autodiscover_tasks(&lt;span style="color:#66d9ef">lambda&lt;/span>: settings&lt;span style="color:#f92672">.&lt;/span>INSTALLED_APPS)&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;p>
Then write some task files named &lt;code>tasks.py&lt;/code> under your apps directory, celery will auto discovery and run these tasks.&lt;/p></description></item></channel></rss>