<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>hexo on wd and cc</title><link>https://wdicc.com/tags/hexo/</link><description>Recent content in hexo on wd and cc</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Sat, 11 Mar 2017 16:29:40 +0800</lastBuildDate><atom:link href="https://wdicc.com/tags/hexo/atom.xml" rel="self" type="application/rss+xml"/><item><title>Migrate blog to hugo</title><link>https://wdicc.com/migrate-blog-to-hugo/</link><pubDate>Sat, 11 Mar 2017 16:29:40 +0800</pubDate><guid>https://wdicc.com/migrate-blog-to-hugo/</guid><description>折腾了好几天，把 blog 从 hexo 迁移到了 hugo 上面。hexo 是使用 nodejs 写出来的，hugo 是使用的 go。主要基于下面几个原因吧。
个人不太喜欢 nodejs 那一坨依赖。 hugo 也比 nodejs 速度快很多。 hugo 用起来比较简洁。 首先写了一个迁移工具 hexo2hugo。网上还有一个 nodejs 版本的迁移工具可以参考。其实就是简单的把头部信息处理一下就可以。我还有一些特殊需求，比如把老早以前的一些 html 格式的文档顺道处理一下格式，还有一些小的修正和兼容工作，所以自己写了一个。另外也主要是好久没有写代码了，熟悉下。。
把文档迁移过去之后，找了几个主题看了一下，发现没有很喜欢的，就本着蛋疼的原则，把原来用的主题也迁移过来了，这个花的时间比较长一点。主要还得熟悉 hugo 的模板语法，还得想办法适配 hugo 的体系。比如 hugo 里面没有 archive 一说，不过通过万能的 google 搜索到了一个解决办法，也勉强还好。
目前这个 blog 已经是由 hugo 产生了，和以前外观，访问地址完全一模一样，rss 地址都一样。我测试了 google 里面的搜索结果，是都可以跳转的。今天算是基本都迁移完毕了。
这几天没事也总想记录一点想法，但是无奈新本子上面的 hexo 挂了，又不想搞 nodejs 那一坨依赖，就折腾了这个事情。不过折腾完毕之后发现想记录的事情都忘记了，nnd。</description></item><item><title>Release some staff at github</title><link>https://wdicc.com/release-some-staff-at-github/</link><pubDate>Tue, 13 Dec 2016 17:00:31 +0800</pubDate><guid>https://wdicc.com/release-some-staff-at-github/</guid><description>把 blog 用到的模板整理了一下，放到了 https://github.com/wd/hexo-fabric ，这个最开始是 fork 别人的代码改的，后来发现原来那个人已经不用了，就整理一下，增加了一个 tag 支持，修改了一下字体和背景色，还有代码颜色等，都是一些小修改。同时也提交到了官方的 theme 库，不过 pull request 还没有通过。。
另外，还把之前写的一个给 ngx-lua 用的一个使用 mcrypt 加密解密的库 https://github.com/wd/lua-resty-mcrypt ，整理出来单独弄了一个模块。代码其实非常简单，这个也能看出来 ngx_lua 里面使用 ffi 调用 C 模块开发多舒服，不过因为 C 知识有限，可能还是会有一些问题，不过至少自己测试是 ok 的，也在线上跑了好久，只能遇到有问题的再说了。这个同时也提交到了春哥的 opm 仓库，那个倒没有审核，提交就被索引了，使用的话应该可以用 opm 命令直接安装。</description></item></channel></rss>