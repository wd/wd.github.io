<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Kernel on wd and cc</title>
    <link>https://wdicc.com/tags/kernel/atom/index.xml</link>
    <description>Recent content in Kernel on wd and cc</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <atom:link href="https://wdicc.com/tags/kernel/atom/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Upgrade kernel to 4.9 for linode</title>
      <link>https://wdicc.com/Upgrade-kernel-to-4-9-for-linode/</link>
      <pubDate>Mon, 16 Jan 2017 18:37:56 +0800</pubDate>
      
      <guid>https://wdicc.com/Upgrade-kernel-to-4-9-for-linode/</guid>
      <description>&lt;p&gt;bbr 那么牛逼，赶紧赶一个潮流。其实我之前用了 kcp，也是类似的东西，不过那个要求服务器端和客户端都需要跑 kcp 服务才可以。bbr 就不用了，只需要服务器配置好就可以了。&lt;/p&gt;

&lt;p&gt;Linode 实际上已经提供了 4.9 的内核。打开 &lt;code&gt;Dashboard&lt;/code&gt;，然后点击你使用的 profile 右侧的 edit，在出来的界面里面，Kernel 右侧的列表里面，有个 4.9 的选项，不过我测试这个内核并不能打开 bbr，不知道是怎么回事，有兴趣的可以试试看，要注意选对架构（就是 64 还是 32）。&lt;/p&gt;

&lt;p&gt;所以还是需要自己装内核。debian 官方已经打包好了 kernel 4.9，访问 &lt;a href=&#34;http://mirrors.kernel.org/debian/pool/main/l/linux/&#34;&gt;http://mirrors.kernel.org/debian/pool/main/l/linux/&lt;/a&gt; ，然后找到适合自己的 linux-image-4.9，我的是 &lt;a href=&#34;http://mirrors.kernel.org/debian/pool/main/l/linux/linux-image-4.9.0-1-amd64-unsigned_4.9.2-2_amd64.deb&#34;&gt;http://mirrors.kernel.org/debian/pool/main/l/linux/linux-image-4.9.0-1-amd64-unsigned_4.9.2-2_amd64.deb&lt;/a&gt; ，下载到 vps 上面。&lt;/p&gt;

&lt;p&gt;然后执行 &lt;code&gt;sudo dkpg -i ./linux-image-4.9.0-1-amd64-unsigned_4.9.2-2_amd64.deb&lt;/code&gt;，最后应该会提示一个错误，缺少依赖的包。这个时候执行 &lt;code&gt;sudo apt-get -f install&lt;/code&gt;，会提示安装缺失的包。&lt;/p&gt;

&lt;p&gt;然后，还需要安装 &lt;code&gt;grub&lt;/code&gt;。看你的情况。就刚才 profile 编辑的页面里面，kernel 右侧的选项里面，你看看你的是 &lt;code&gt;grub2&lt;/code&gt; 还是 &lt;code&gt;pv-grub&lt;/code&gt;。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;grub2&lt;/code&gt;: 参考&lt;a href=&#34;https://www.linode.com/docs/tools-reference/custom-kernels-distros/run-a-distribution-supplied-kernel-with-kvm&#34;&gt;这个&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo apt-get install grub2
$ sudo update-grub
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;pv-grub&lt;/code&gt;: 参考&lt;a href=&#34;https://www.linode.com/docs/tools-reference/custom-kernels-distros/run-a-distributionsupplied-kernel-with-pvgrub&#34;&gt;这个&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo apt-get install grub
$ sudo mkdir /boot/grub
$ sudo update-grub
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;然后在 profile 编辑页面里面，kernel 右侧选择对应的 grub 选项，重启 vps 就可以了。如果启动失败了，就在这个选项里面，选择之前的选项重启就可以恢复。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>内核的 shmall 和 shmmax 参数</title>
      <link>https://wdicc.com/shmall-and-shmmax-kernel-paramaters/</link>
      <pubDate>Mon, 02 Mar 2009 00:00:00 +0000</pubDate>
      
      <guid>https://wdicc.com/shmall-and-shmmax-kernel-paramaters/</guid>
      <description>shmall 是全部允许使用的共享内存大小，shmmax 是单个段允许使用的大小。这两个可以设置为内存的 90%。例如 16G 内存，16*1024*1024*1024*90% = 15461882265，shmall 的大小为 15461882265/4k(getconf PAGESIZE可得到) = 3774873。&lt;br /&gt;

修改 /etc/sysctl.conf。&lt;br /&gt;

&lt;pre class=&#34;prettyprint lang-text&#34;&gt;
kernel.shmmax=15461882265
kernel.shmall=3774873
kernel.msgmax=65535
kernel.msgmnb=65535
执行 sudo sysctl -p
&lt;/pre&gt;&lt;br /&gt;

可以使用 ipcs -l 看结果。ipcs -u 可以看到实际使用的情况。&lt;br /&gt;

&lt;pre class=&#34;prettyprint lang-text&#34;&gt;
------ Shared Memory Limits --------
max number of segments = 4096
max seg size (kbytes) = 15099494
max total shared memory (kbytes) = 15097856
min seg size (bytes) = 1
 
------ Semaphore Limits --------
max number of arrays = 128
max semaphores per array = 250
max semaphores system wide = 32000
max ops per semop call = 32
semaphore max value = 32767
 
------ Messages: Limits --------
max queues system wide = 16
max size of message (bytes) = 8192
DEFAULT max size of queue (bytes) = 16384
&lt;/pre&gt;&lt;br /&gt;
</description>
    </item>
    
    <item>
      <title>更新 kenerl 到了 2.6.28</title>
      <link>https://wdicc.com/upgrade-kenerl-to-2-6-28/</link>
      <pubDate>Sat, 27 Dec 2008 00:00:00 +0000</pubDate>
      
      <guid>https://wdicc.com/upgrade-kenerl-to-2-6-28/</guid>
      <description>之前用的是 tuxonice 的 kernel, 为了体验他的休眠。可是最近发现我基本就不用休眠。而且 tuxonice 的内核还一直停留在 2.6.26 上面。最近 2.6.28 火的不行，所以就给他升级了。&lt;br /&gt;

升级没遇到什么问题。新选择了 ext4 支持，等哪天把 fs 都修改到 ext4 去，不过好像有点折腾，呵呵。&lt;br /&gt;

gentoo-souces 也是支持的休眠的。想要在 gnome 下面休眠的话，安装一个 pm-utilus 这个包就可以了。在电源管理那里选休眠就可以了。不过发现 挂起 好像不支持，挂起了就不能唤醒了，很郁闷。我记得 tuxonice 下面挂起好像也不支持，不管他了。&lt;br /&gt;

那个号称革命性的 GEM 不知道什么时候能在 radeon 上面出现。等着吧。&lt;br /&gt;
</description>
    </item>
    
    <item>
      <title>使用 uvesafb</title>
      <link>https://wdicc.com/use-uvesafb/</link>
      <pubDate>Sun, 13 Apr 2008 00:00:00 +0000</pubDate>
      
      <guid>https://wdicc.com/use-uvesafb/</guid>
      <description>FB 就是 Frambuffer 了。直观一点说，使用之后，可以给 console 设置分辨率，可以在console下面看电影，看图？&lt;br /&gt;

在 Kernel 里面，ATI 显卡有个 Readonfb，使用后不需要修改 grub 就可以直接出现高分辨率的 console，但是他和 ATI 的 fglrx 驱动冲突，会导致死机，所以，基本没法子用，除非你不打算进 x。&lt;br /&gt;

&lt;a href=&#34;http://dev.gentoo.org/~spock/projects/uvesafb/&#34; target=&#34;_blank&#34;&gt; uvesafb&lt;/a&gt; 以前叫做 vesafb-tng，似乎是从 kernel 2.6.23 开始改名的。使用这个也很简单了，参考作者的 &lt;a href=&#34;http://dev.gentoo.org/~spock/projects/uvesafb/&#34; target=&#34;_blank&#34;&gt;web&lt;/a&gt; 页面。&lt;br /&gt;

有几个内核参数：&lt;br /&gt;
&lt;pre class=&#34;prettyprint lang-text&#34;&gt;
Graphics support ---&amp;gt; Userspace VESA VGA graphics support
General Setup ---&amp;gt;  Initial RAM filesystem and RAM disk (initramfs/initrd) support 设置为 /usr/share/v86d/initramfs
上面几个设置分别是
CONFIG_CONNECTOR=y
CONFIG_FB_UVESA=y
CONFIG_INITRAMFS_SOURCE=&#34;/usr/share/v86d/initramfs&#34;&lt;/pre&gt;
安装 klibc 和 v86d 。修改 grub，添加 video=uvesafb:1024x768-32,mtrr:3,ywrap

如果遇到 &#39;uvesafb: failed to execute /sbin/v86d&#39; 的错误，可能是最后一个内核参数没有设置好的缘故。
</description>
    </item>
    
    <item>
      <title>linux tuning</title>
      <link>https://wdicc.com/linux-tuning/</link>
      <pubDate>Mon, 04 Jun 2007 00:00:00 +0000</pubDate>
      
      <guid>https://wdicc.com/linux-tuning/</guid>
      <description>地址 &lt;a href=&#34;http://www.enigma.id.au/linux_tuning.txt&#34;&gt;http://www.enigma.id.au/linux_tuning.txt&lt;/a&gt;&lt;br /&gt;

&lt;pre class=&#34;prettyprint lang-bash&#34;&gt;
# server with a decent amount of memory.
#
# This file should be saved as /etc/sysctl.conf
# You can source it manually if your system has booted by using:
# sysctl -e -p /etc/sysctl.conf
#
# Paul Day, paul (at) bur.st
#
# Last updated 02/03/05 and tested on 2.6.9
#

# Increase RPC slots
sunrpc.tcp_slot_table_entries = 32
sunrpc.udp_slot_table_entries = 32
# Increase size of RPC datagram queue length
net.unix.max_dgram_qlen = 50
# Log spoofed, source routed and redirects
net.ipv4.conf.default.log_martians = 1
# Don&#39;t accept source routes
net.ipv4.conf.default.accept_source_route = 0
# Don&#39;t send redirects
net.ipv4.conf.default.send_redirects = 0
# Source route verification on - incoming packets must match outgoing routing
net.ipv4.conf.default.rp_filter = 1
# Don&#39;t accept redirects
net.ipv4.conf.default.accept_redirects = 0
# Don&#39;t forward source routes
net.ipv4.conf.default.mc_forwarding = 0
# Disable forwarding 
net.ipv4.conf.default.forwarding = 0
# Log spoofed, source routed and redirects
net.ipv4.conf.all.log_martians = 1
# Don&#39;t relay bootp
net.ipv4.conf.all.bootp_relay = 0
# Don&#39;t proxy arp for anyone
net.ipv4.conf.all.proxy_arp = 0
# Don&#39;t accept source route packets
net.ipv4.conf.all.accept_source_route = 0
# Don&#39;t send redirects
net.ipv4.conf.all.send_redirects = 0
# Source route verification on - incoming packets must match outgoing routing
net.ipv4.conf.all.rp_filter = 1
# Don&#39;t accept redirects
net.ipv4.conf.all.accept_redirects = 0
# Don&#39;t forward source routes
net.ipv4.conf.all.mc_forwarding = 0
# Don&#39;t enable forwarding
net.ipv4.conf.all.forwarding = 0
# Don&#39;t allow the arp table to become bigger than this
net.ipv4.neigh.default.gc_thresh3 = 2048
# Tell the gc when to become aggressive with arp table cleaning.
# Adjust this based on size of the LAN. 256 is suitable for most
net.ipv4.neigh.default.gc_thresh2 = 1024
# Adjust where the gc will leave arp table alone - set to 32.
net.ipv4.neigh.default.gc_thresh1 = 32
# Adjust to arp table gc to clean-up more often
net.ipv4.neigh.default.gc_interval = 30
# Increase TCP
net.ipv4.neigh.default.proxy_qlen = 96
net.ipv4.neigh.default.unres_qlen = 6
# Increase size of socket buffers
net.ipv4.tcp_rmem = 4096	98304	349520
net.ipv4.tcp_wmem = 4096	65535	262142
net.ipv4.tcp_mem = 98304	262142	393216
# Turn off sack
net.ipv4.tcp_dsack = 0
# Don&#39;t use ECN because too many sites have wacky routers that can&#39;t handle it`
net.ipv4.tcp_ecn = 0
net.ipv4.tcp_reordering = 3
# Turn off sack/fack
net.ipv4.tcp_fack = 0
# Enable bad error message Protection
net.ipv4.icmp_ignore_bogus_error_responses = 1
# Ignore broadcasts pings, could become part of a Smurf
net.ipv4.icmp_echo_ignore_broadcasts = 1
# But don&#39;t ignore directed pings
net.ipv4.icmp_echo_ignore_all = 0
# Widen local port range
net.ipv4.ip_local_port_range = 33000	60000
# Bump up TCP socket queuer to help with syn floods
net.ipv4.tcp_max_syn_backlog = 2048
# Turn syn-cookie protection on
net.ipv4.tcp_syncookies = 1
# Drop it so lack of FIN times out quicker
net.ipv4.tcp_fin_timeout = 30
# How many times to retry killing an alive TCP connection
net.ipv4.tcp_retries2 = 15
net.ipv4.tcp_retries1 = 3
# Enable a fix for RFC1337 - time-wait assassination hazards in TCP
net.ipv4.tcp_rfc1337 = 1
# Drop keep-alive time
net.ipv4.tcp_keepalive_time = 3600
# Set number of times to retry a SYN-ACK in a half-open new connections
net.ipv4.tcp_synack_retries = 5
# Set number of times to retry SYN in a new connection
net.ipv4.tcp_syn_retries = 5
# Turn off sack
net.ipv4.tcp_sack = 0
# Enable really big (&gt;65kB) TCP window scaling if we want it.
net.ipv4.tcp_window_scaling = 1
# Turn off timestamps
# Turn this back on if you&#39;re on a gigabit or very busy network
# Having it off is one less thing the IP stack needs to work on
net.ipv4.tcp_timestamps = 0
# Increase number of incoming connections backlog
net.core.somaxconn = 512
# Bump optmem_max up
net.core.optmem_max = 20480
# Increase number of incoming connections backlog
net.core.netdev_max_backlog = 1024
net.core.dev_weight = 64
# Bump up default r/wmem to max
net.core.rmem_default = 262141
net.core.wmem_default = 262141
# Bump up max r/wmem
net.core.rmem_max = 262141
net.core.wmem_max = 262141
# Increase size of file handles and inode cache
fs.file-max = 209708&lt;/pre&gt;

&lt;p class=&#34;poweredbyperformancing&#34;&gt;Powered by &lt;a href=&#34;http://scribefire.com/&#34;&gt;ScribeFire&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>