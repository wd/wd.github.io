<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Kernel on wd and cc</title>
    <link>https://wdicc.com/tags/kernel/</link>
    <description>Recent content in Kernel on wd and cc</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 16 Jan 2017 18:37:56 +0800</lastBuildDate>
    
	<atom:link href="https://wdicc.com/tags/kernel/atom.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Upgrade kernel to 4.9 for linode</title>
      <link>https://wdicc.com/upgrade-kernel-to-4.9-for-linode/</link>
      <pubDate>Mon, 16 Jan 2017 18:37:56 +0800</pubDate>
      
      <guid>https://wdicc.com/upgrade-kernel-to-4.9-for-linode/</guid>
      <description>bbr 那么牛逼，赶紧赶一个潮流。其实我之前用了 kcp，也是类似的东西，不过那个要求服务器端和客户端都需要跑 kcp 服务才可以。bbr 就不用了，只需要服务器配置好就可以了。
Linode 实际上已经提供了 4.9 的内核。打开 Dashboard，然后点击你使用的 profile 右侧的 edit，在出来的界面里面，Kernel 右侧的列表里面，有个 4.9 的选项，不过我测试这个内核并不能打开 bbr，不知道是怎么回事，有兴趣的可以试试看，要注意选对架构（就是 64 还是 32）。
所以还是需要自己装内核。debian 官方已经打包好了 kernel 4.9，访问 http://mirrors.kernel.org/debian/pool/main/l/linux/ ，然后找到适合自己的 linux-image-4.9，我的是 http://mirrors.kernel.org/debian/pool/main/l/linux/linux-image-4.9.0-1-amd64-unsigned_4.9.2-2_amd64.deb ，下载到 vps 上面。
然后执行 sudo dkpg -i ./linux-image-4.9.0-1-amd64-unsigned_4.9.2-2_amd64.deb，最后应该会提示一个错误，缺少依赖的包。这个时候执行 sudo apt-get -f install，会提示安装缺失的包。
然后，还需要安装 grub。看你的情况。就刚才 profile 编辑的页面里面，kernel 右侧的选项里面，你看看你的是 grub2 还是 pv-grub。
 grub2: 参考这个
$ sudo apt-get install grub2 $ sudo update-grub  pv-grub: 参考这个
$ sudo apt-get install grub $ sudo mkdir /boot/grub $ sudo update-grub   然后在 profile 编辑页面里面，kernel 右侧选择对应的 grub 选项，重启 vps 就可以了。如果启动失败了，就在这个选项里面，选择之前的选项重启就可以恢复。</description>
    </item>
    
    <item>
      <title>内核的 shmall 和 shmmax 参数</title>
      <link>https://wdicc.com/%E5%86%85%E6%A0%B8%E7%9A%84-shmall-%E5%92%8C-shmmax-%E5%8F%82%E6%95%B0/</link>
      <pubDate>Mon, 02 Mar 2009 00:00:00 +0000</pubDate>
      
      <guid>https://wdicc.com/%E5%86%85%E6%A0%B8%E7%9A%84-shmall-%E5%92%8C-shmmax-%E5%8F%82%E6%95%B0/</guid>
      <description>shmall 是全部允许使用的共享内存大小，shmmax 是单个段允许使用的大小。这两个可以设置为内存的 90%。例如 16G 内存，16*1024*1024*1024*90% = 15461882265，shmall 的大小为 15461882265/4k(getconf PAGESIZE可得到) = 3774873。
修改 /etc/sysctl.conf。
kernel.shmmax=15461882265 kernel.shmall=3774873 kernel.msgmax=65535 kernel.msgmnb=65535 执行 sudo sysctl -p 
可以使用 ipcs -l 看结果。ipcs -u 可以看到实际使用的情况。
------ Shared Memory Limits -------- max number of segments = 4096 max seg size (kbytes) = 15099494 max total shared memory (kbytes) = 15097856 min seg size (bytes) = 1 ------ Semaphore Limits -------- max number of arrays = 128 max semaphores per array = 250 max semaphores system wide = 32000 max ops per semop call = 32 semaphore max value = 32767 ------ Messages: Limits -------- max queues system wide = 16 max size of message (bytes) = 8192 DEFAULT max size of queue (bytes) = 16384</description>
    </item>
    
    <item>
      <title>更新 kenerl 到了 2.6.28</title>
      <link>https://wdicc.com/%E6%9B%B4%E6%96%B0-kenerl-%E5%88%B0%E4%BA%86-2.6.28/</link>
      <pubDate>Sat, 27 Dec 2008 00:00:00 +0000</pubDate>
      
      <guid>https://wdicc.com/%E6%9B%B4%E6%96%B0-kenerl-%E5%88%B0%E4%BA%86-2.6.28/</guid>
      <description>之前用的是 tuxonice 的 kernel, 为了体验他的休眠。可是最近发现我基本就不用休眠。而且 tuxonice 的内核还一直停留在 2.6.26 上面。最近 2.6.28 火的不行，所以就给他升级了。
升级没遇到什么问题。新选择了 ext4 支持，等哪天把 fs 都修改到 ext4 去，不过好像有点折腾，呵呵。
gentoo-souces 也是支持的休眠的。想要在 gnome 下面休眠的话，安装一个 pm-utilus 这个包就可以了。在电源管理那里选休眠就可以了。不过发现 挂起 好像不支持，挂起了就不能唤醒了，很郁闷。我记得 tuxonice 下面挂起好像也不支持，不管他了。
那个号称革命性的 GEM 不知道什么时候能在 radeon 上面出现。等着吧。</description>
    </item>
    
    <item>
      <title>使用 uvesafb</title>
      <link>https://wdicc.com/%E4%BD%BF%E7%94%A8-uvesafb/</link>
      <pubDate>Sun, 13 Apr 2008 00:00:00 +0000</pubDate>
      
      <guid>https://wdicc.com/%E4%BD%BF%E7%94%A8-uvesafb/</guid>
      <description>FB 就是 Frambuffer 了。直观一点说，使用之后，可以给 console 设置分辨率，可以在console下面看电影，看图？
在 Kernel 里面，ATI 显卡有个 Readonfb，使用后不需要修改 grub 就可以直接出现高分辨率的 console，但是他和 ATI 的 fglrx 驱动冲突，会导致死机，所以，基本没法子用，除非你不打算进 x。
uvesafb 以前叫做 vesafb-tng，似乎是从 kernel 2.6.23 开始改名的。使用这个也很简单了，参考作者的 web 页面。
有几个内核参数：
Graphics support ---&amp;gt; Userspace VESA VGA graphics support General Setup ---&amp;gt; Initial RAM filesystem and RAM disk (initramfs/initrd) support 设置为 /usr/share/v86d/initramfs 上面几个设置分别是 CONFIG_CONNECTOR=y CONFIG_FB_UVESA=y CONFIG_INITRAMFS_SOURCE=&#34;/usr/share/v86d/initramfs&#34; 安装 klibc 和 v86d 。修改 grub，添加 video=uvesafb:1024x768-32,mtrr:3,ywrap 如果遇到 &#39;uvesafb: failed to execute /sbin/v86d&#39; 的错误，可能是最后一个内核参数没有设置好的缘故。 </description>
    </item>
    
    <item>
      <title>linux tuning</title>
      <link>https://wdicc.com/linux-tuning/</link>
      <pubDate>Mon, 04 Jun 2007 00:00:00 +0000</pubDate>
      
      <guid>https://wdicc.com/linux-tuning/</guid>
      <description>地址 http://www.enigma.id.au/linux_tuning.txt
# server with a decent amount of memory. # # This file should be saved as /etc/sysctl.conf # You can source it manually if your system has booted by using: # sysctl -e -p /etc/sysctl.conf # # Paul Day, paul (at) bur.st # # Last updated 02/03/05 and tested on 2.6.9 # # Increase RPC slots sunrpc.tcp_slot_table_entries = 32 sunrpc.udp_slot_table_entries = 32 # Increase size of RPC datagram queue length net.</description>
    </item>
    
  </channel>
</rss>