<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Linux on wd and cc</title><link>https://wdicc.com/tags/linux/</link><description>Recent content in Linux on wd and cc</description><generator>Hugo</generator><language>zh-CN</language><lastBuildDate>Mon, 02 Jul 2018 16:47:31 +0800</lastBuildDate><atom:link href="https://wdicc.com/tags/linux/atom.xml" rel="self" type="application/rss+xml"/><item><title>Boot Linux Through PXE</title><link>https://wdicc.com/boot-linux-through-pxe/</link><pubDate>Mon, 02 Jul 2018 16:47:31 +0800</pubDate><guid>https://wdicc.com/boot-linux-through-pxe/</guid><description>&lt;p>测试 porteus 的时候，每次都是做好 iso 之后写到一个 u 盘，然后用 u 盘启动看看效果，发现有点蛋疼，这浪费时间不说，我的 u 盘寿命估计也得少一截。就研究了一下 pxe 启动，这样每次改完之后通过 pxe 直接读取我改了之后的 iso 引导 linux 就好了。&lt;/p></description></item><item><title>Grub2 and UEFI</title><link>https://wdicc.com/grub2-and-uefi/</link><pubDate>Fri, 29 Jun 2018 20:03:54 +0800</pubDate><guid>https://wdicc.com/grub2-and-uefi/</guid><description>&lt;p>这几天搞 Linux 又学习了一些新的东西。&lt;/p>
&lt;p>
以前都是把 grub 装到 MBR，然后通过 grub 可以 chainloader 启动 windows。现在发现我装了之后并不能启动我的 windows 10 了，就只好研究了一下。&lt;/p></description></item><item><title>Custom Netgear r6300v2 wireless router</title><link>https://wdicc.com/custom-netgear-r6300v2-wireless-router/</link><pubDate>Sun, 27 Mar 2016 11:50:38 +0800</pubDate><guid>https://wdicc.com/custom-netgear-r6300v2-wireless-router/</guid><description>&lt;p>接 &lt;a href="https://wdicc.com/Across-the-Great-Wall-we-can-reach-every-corner-in-the-world">科学上网&lt;/a>。买了群晖之后，一直通过群晖上面跑一个 haproxy 来做转发。不过心里总觉得有点不爽，毕竟一方面多转发了一次，另外群晖在不使用的时候，还会休眠，又或多或少担心影响休眠（经过测试应该是不影响的，但是..）。所以买了 r6300v2 之后，就琢磨通过路由器做这个事情。&lt;/p></description></item><item><title>octopress and jeklly 1.0.1</title><link>https://wdicc.com/octopress-and-jeklly-1-dot-0-1/</link><pubDate>Wed, 12 Jun 2013 21:45:00 +0800</pubDate><guid>https://wdicc.com/octopress-and-jeklly-1-dot-0-1/</guid><description>&lt;p>自从 jeklly 1.0.x 发布之后，我的 octopress 站点就在 github，gitcafe 上面更新不了了，写了新帖子然后 push 之后，会收到个邮件，说 generate site faild。&lt;/p></description></item><item><title>octopress and gitcafe</title><link>https://wdicc.com/octopress-and-gitcafe/</link><pubDate>Wed, 12 Jun 2013 21:30:00 +0800</pubDate><guid>https://wdicc.com/octopress-and-gitcafe/</guid><description>&lt;p>ocotpress 支持 github，不过 github 的 pages 貌似被墙了，且速度慢。gitcafe 速度还不错，也支持 pages，刚好可以切换过去。我只是简单粗暴的修改了几个文件。&lt;/p></description></item><item><title>broadcom BCM wireless card on gentoo</title><link>https://wdicc.com/broadcom-wireless-card-on-gentoo/</link><pubDate>Fri, 24 May 2013 17:28:00 +0800</pubDate><guid>https://wdicc.com/broadcom-wireless-card-on-gentoo/</guid><description>&lt;p>昨天又折腾了一下我的无线，是 dell 的本子，broadcom 的卡 BCM4313，准备写一下的时候，发现之前居然折腾过 &lt;a href="https://wdicc.com/bcm4312broadcom-stawpa_supplicantkernel2-6-33/">BCM4312&lt;/a>。。感觉真蛋疼。。&lt;/p></description></item><item><title>redmine-a-good-project-tracker</title><link>https://wdicc.com/redmine-a-good-project-tracker/</link><pubDate>Tue, 11 Dec 2012 14:53:00 +0800</pubDate><guid>https://wdicc.com/redmine-a-good-project-tracker/</guid><description>&lt;p>其实很早，大概2，3年前就听说了 redmine 了，不过他环境是 ruby 的，一直没有勇气去搭一个环境。现在项目人多了，bug 阿 feature 阿，就需要记录一下了，因为有些事情不记录下来总是会忘记。之前是尝试通过 wiki ＋ bugfree 来记录的，bugfree 记录在提测之后的一些问题，wiki 记录一些 feature request 什么的。bugfree 我们没权限管理，wiki 记录又不方便，然后我就又想起来 redmine 了。&lt;/p></description></item><item><title>Join 后面跟两个表</title><link>https://wdicc.com/two-table-after-join/</link><pubDate>Sun, 05 Aug 2012 00:00:00 +0000</pubDate><guid>https://wdicc.com/two-table-after-join/</guid><description>&lt;p>发现 sql 的写法真是千奇百怪，经常遇到没见过的写法。前几天就遇到了一个 sql 在 join 后写两个表，用逗号分隔。类似下面。&lt;/p></description></item><item><title>Postgresql 里面连接其他数据库</title><link>https://wdicc.com/fdw-in-postgresql/</link><pubDate>Sun, 06 May 2012 00:00:00 +0000</pubDate><guid>https://wdicc.com/fdw-in-postgresql/</guid><description>&lt;p>PG 9.x 引入了 fdw，可以通过 pg 去连接其他 db，不仅限于其他 pg，还可以是 mysql，oracle，文件等。按照设计，fdw 还应该提供给查询规划器一些对方 db 的索引等信息，这样在查询过程中可以提升查询速度。&lt;br />
&lt;/p></description></item><item><title>有跳板机的 ssh 登陆</title><link>https://wdicc.com/controlmaster-in-ssh/</link><pubDate>Sun, 06 May 2012 00:00:00 +0000</pubDate><guid>https://wdicc.com/controlmaster-in-ssh/</guid><description>&lt;p>我厂登陆服务器需要先走一个跳板机，不能直接登陆，很是蛋疼。实际上 ssh 早就解决了这个问题。&lt;br />
&lt;/p>&lt;br />
&lt;p>&lt;br />
大意是通过设置 proxycommand 来实现，我也写过一个 &lt;a href="http://wdicc.com/cow-ssh-proxycommand/">http://wdicc.com/cow-ssh-proxycommand/&lt;/a> 。配置如下&lt;br />
&lt;/p></description></item><item><title>org-mode 里面自动归档任务</title><link>https://wdicc.com/auto-archive-task-for-org-mode/</link><pubDate>Sun, 08 Apr 2012 00:00:00 +0000</pubDate><guid>https://wdicc.com/auto-archive-task-for-org-mode/</guid><description>&lt;p>我想应该有不少人在使用 emacs 的 org-mode 来做笔记，任务管理等。我使用 org-mode 比较多的情况是使用他做一些提纲，类似思维导图一样，以及用它来管理 todo list。&lt;br />
&lt;/p></description></item><item><title>mac 里面的 emacs 的几个设置</title><link>https://wdicc.com/emacs-settings-in-mac/</link><pubDate>Tue, 06 Mar 2012 00:00:00 +0000</pubDate><guid>https://wdicc.com/emacs-settings-in-mac/</guid><description>&lt;p>刚开始在 mac 里面使用 emacs 简直就是自虐，因为那个反人类的 command 按键。一般 pc 上面的 alt 是在 space 旁边的，macbook 的 space 旁边是 command，对于一个需要经常在 mac 里面按的键，不是一般的郁闷。这个问题有两个方法解决。&lt;br />
&lt;/p></description></item><item><title>postgres sql 调优一例</title><link>https://wdicc.com/analyse-and-vacuum-in-postgres/</link><pubDate>Sat, 03 Mar 2012 00:00:00 +0000</pubDate><guid>https://wdicc.com/analyse-and-vacuum-in-postgres/</guid><description>&lt;p>前几天发现有个 sql 跑的超慢，第一次拿到 sql 大家简单分析了一下，觉得是写的有问题，里面有对一个大表的查询，数据量大概 800 万，结果还和好几个小表做了 join，而且还是 left join，速度可想而知了。单独对那个大表查询，其实也就是几分钟的事情。&lt;br />
&lt;/p></description></item><item><title>thunderbird 和 davmail 配合连接 exchange</title><link>https://wdicc.com/use-davmail-to-access-exchange-server-better-in-thunderbird/</link><pubDate>Wed, 01 Feb 2012 00:00:00 +0000</pubDate><guid>https://wdicc.com/use-davmail-to-access-exchange-server-better-in-thunderbird/</guid><description>&lt;p>exchange 是个恶心玩意，虽然提供了 imap 接口，但是速度巨慢，发送接收都慢。davmail 可以解决这个问题。&lt;br />
&lt;/p></description></item><item><title>介绍下 org2blog</title><link>https://wdicc.com/about-org2blog/</link><pubDate>Mon, 24 Oct 2011 00:00:00 +0000</pubDate><guid>https://wdicc.com/about-org2blog/</guid><description>&lt;div id="outline-container-1" class="outline-2">&lt;br />
&lt;h2 id="sec-1">org2blog 是什么&lt;/h2>&lt;br />
&lt;div id="text-1" class="outline-text-2">&lt;br />

&lt;a href="https://github.com/punchagan/org2blog">org2blog&lt;/a> 是用来把 org-mode 格式的文章发布到 wordpress 的工具。其实之前使用 webloger.el 也可以发布到 wordpress，不过是&lt;br />
webloger.el 已经基本没人维护了，这个 org2blog 作者支持还很积极，另外 org-mode 还提供了一些额外的方便编辑的方法，所以其实&lt;br />
是个不错的东东。&lt;br />

&lt;/div>&lt;br />
&lt;/div>&lt;br />
&lt;div id="outline-container-2" class="outline-2">&lt;br />
&lt;h2 id="sec-2">安装&lt;/h2>&lt;br />
&lt;div id="text-2" class="outline-text-2">&lt;br />

其实按照上面地址的内容，安装很简单。&lt;br />
&lt;pre class="prettyprint">
(setq load-path (cons "~/.emacs.d/org2blog/" load-path))
(require 'org2blog-autoloads)&lt;/pre>
&lt;ol>
	&lt;li>依赖 &lt;a href="http://launchpad.net/xml-rpc-el">xml-rpc&lt;/a> ，添加到 load-path&lt;/li>
	&lt;li>需要最新版本的 org-mode，我使用的是 emacs 24 里面的 7.7，之前使用 7.5(?) 的时候，遇到了发布的时候会在文章结尾附加
&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt; 导致 blog 的展现挂掉的问题。&lt;/li>
&lt;/ol>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-3" class="outline-2">
&lt;h2 id="sec-3">使用&lt;/h2>
&lt;div id="outline-container-3-1" class="outline-3">
&lt;h3 id="sec-3-1">配置&lt;/h3>
&lt;div id="text-3-1" class="outline-text-3">
&lt;pre class="prettyprint">
;; org2blog
;;

(require 'org2blog-autoloads)
(setq org2blog/wp-blog-alist
 `(("abc"
 :url "http://abc.com/xmlrpc.php"
 :username "admin"
 :password PWD
 :keep-new-lines t
 :confirm t
 :wp-code nil
 :tags-as-categories nil)
 ))

(setq org2blog/wp-buffer-template
 "#+DATE: %s
#+OPTIONS: toc:nil num:nil todo:nil pri:nil tags:nil ^:nil TeX:nil 
#+CATEGORY: Heart
#+TAGS: 
#+PERMALINK: 
#+TITLE:
\n")&lt;/pre>
我不使用 wordpress 的 code 格式，所以设置了 wp-code 为 nil。可以定义多个 blog。

&lt;/div>
&lt;/div>
&lt;div id="outline-container-3-2" class="outline-3">
&lt;h3 id="sec-3-2">登陆，发帖&lt;/h3>
&lt;div id="text-3-2" class="outline-text-3">

M-x org2blog/wp-login 会提示你要登陆哪个 blog
M-x org2blog/wp-new-entry 会使用设置的 template 打开一个 buffer
M-x org2blog/wp-post-buffer 保存成 draft
M-x org2blog/wp-post-buffer-and-publish 真实发布

另外，还可以发布一个 tree 而不是整个 org 文件，以及一些其他的操作就不多说了。

发布源代码可以使用 BEGIN_SRC END_SRC 块，或者冒号开头的行会被当作源代码。

我使用的是 wp-syntax，所以发布源代码使用 BEGIN_HTML 在里面使用 pre 标签
&lt;pre class="prettyprint">
&amp;lt;pre lang="lisp"&amp;gt;
(setq a 1)
&amp;lt;/pre&amp;gt;
#+END_HTML&lt;/pre>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-3-3" class="outline-3">
&lt;h3 id="sec-3-3">其他&lt;/h3>
&lt;div id="text-3-3" class="outline-text-3">

使用 org2blog 只能从 org 发布到 wordpress，不能从 wordpress 回到 org 文件再进行编辑，不过我看到有人已经提供了一个解决方
法，或许将来也会支持这个功能。

使用 org2blog 发布很讨厌的一点是，他会把你的 org 加上很多的 html 代码，再编辑的时候比较讨厌。

org2blog 在 github 的页面 &lt;a href="https://github.com/punchagan/org2blog">https://github.com/punchagan/org2blog&lt;/a> 上面有不少有用的东西，建议看看。

&lt;/div>
&lt;/div>
&lt;/div></description></item><item><title>介绍下 openresty</title><link>https://wdicc.com/intro-openresty/</link><pubDate>Sun, 23 Oct 2011 00:00:00 +0000</pubDate><guid>https://wdicc.com/intro-openresty/</guid><description>一直没有时间使用 ngx_lua，上周算是真正使用了下，总结下，也算是帮忙推广下 openresty。&lt;br />
&lt;div id="outline-container-1" class="outline-2">&lt;br />
&lt;h2 id="sec-1">什么是 openresty&lt;/h2>&lt;br />
&lt;div id="text-1" class="outline-text-2">&lt;br />

openresty 的主力作者是 &lt;a href="http://weibo.com/agentzh">@agentzh&lt;/a> 它的网页在 &lt;a href="http://openresty.org">这里&lt;/a>，上面有介绍。按我的理解，他是介于客户端浏览器 js 和数据库之间的一层。&lt;br />

在 ajex 还没有盛行的时代，数据库的数据需要展现在浏览器的时候，一般都是使用 php/jsp 之类读取数据，然后拼表格/图表这些。在客户端机器越来越牛逼之后，把部分运算放在浏览器里面开始盛行，ajex 也越来越流行。这个时候通常还需要有个服务器端的程序来配合从数据库获取并提供数据，应该也有不少类似的程序来提供这个数据。&lt;br />

老版本的 openresty 是基于 perl 做的，可以上 cpan 上面 &lt;a href="http://search.cpan.org/~agent/OpenResty-0.5.12/lib/OpenResty/Spec/REST_cn.pod">搜到&lt;/a> (不知道为啥这页面我打不开了)。agentzh 还专门为他写了一个 admin site，纯 js + oprensty 来实现的，可以直接在上面配置接口，很方便。目前老版本应该没人用了。&lt;br />

新版本的 openresty 基本上等于是 nginx 和一些 nginx 模块的集合，大部分模块都是 agentzh 和 &lt;a href="https://github.com/chaoslawful">chaoslawful&lt;/a> 完成的，目前 agentzh 离职在家全职开发 openresty 相关，chaoslawful 还在淘宝 &lt;a href="http://linezing.com">量子统计&lt;/a> 。&lt;br />

这大概就是我了解的 openresty 的起源和目前的情况。写的比较简单，里面的曲折就不多说了，可以找上面提到的大牛聊天。&lt;br />

&lt;/div>&lt;br />
&lt;/div>&lt;br />
&lt;div id="outline-container-2" class="outline-2">&lt;br />
&lt;h2 id="sec-2">怎么使用 openresty&lt;/h2>&lt;br />
&lt;div id="text-2" class="outline-text-2">&lt;br />

我下面用一个简单的例子来描述下，我是怎么使用 openresty 的，从中应该能看出来 openresty 能干啥，怎么用。&lt;br />

&lt;/div>&lt;br />
&lt;div id="outline-container-2-1" class="outline-3">&lt;br />
&lt;h3 id="sec-2-1">需求&lt;/h3>&lt;br />
&lt;div id="text-2-1" class="outline-text-3">&lt;br />

在 postgresql 数据库有张网站日访问流量表，包含两个字段 thedate 和 pv。需要把里面的数据展现出来，画出来流量曲线。&lt;br />

&lt;dl>&lt;dt>注意&lt;/dt>&lt;dd>下面的代码大都从现有程序里面扒出来的，所以不一定直接就能用，只是个示意而已。&lt;/dd>&lt;/dl>&lt;/div>&lt;br />
&lt;/div>&lt;br />
&lt;div id="outline-container-2-2" class="outline-3">&lt;br />
&lt;h3 id="sec-2-2">安装 openresty&lt;/h3>&lt;br />
&lt;div id="text-2-2" class="outline-text-3">&lt;br />

首先需要安装 openresty。从 &lt;a href="http://openresty.org">openresty.org&lt;/a> 下载当前的 stable 版本 ngx_openresty-1.0.6.22.tar.gz。&lt;br />
&lt;pre class="prettyprint lang-bash">
$ cd ngx_openresty-1.0.6.22
$ ./configure --with-http_drizzle_module --with-http_postgres_module --with-pg_config=/opt/pg90/bin/pg_config --prefix=/usr/local/openresty --with-libdrizzle=/usr/local/libdrizzle/ --with-luajit --with-http_iconv_module # 这是我用到的参数，按照需要加减
$ make
# make install&lt;/pre>
configure 的时候 postgres_module 是必须的，其他的 drizzle_module 是用来支持从 mysql 获取数据的，iconv_module 是用来做编码转换的，luajit 据说可以提升不少性能。

不出问题的话，在 /usr/local/openresty 目录下面就安装好了。其实更合理的方式应该是提供一个 rpm 或者 deb 包的。

&lt;/div>
&lt;/div>
&lt;div id="outline-container-2-3" class="outline-3">
&lt;h3 id="sec-2-3">启动 nginx&lt;/h3>
&lt;div id="text-2-3" class="outline-text-3">

openresty 给提供了简单可用的 nginx.conf，所以现在可以先尝试启动下 /usr/local/openresty/nginx/sbin/nginx 了，如果启动没问题，那就 ok 了。

配置文件在 /usr/local/openresty/nginx/conf/nginx.conf。

&lt;/div>
&lt;/div>
&lt;div id="outline-container-2-4" class="outline-3">
&lt;h3 id="sec-2-4">配置 nginx&lt;/h3>
&lt;div id="text-2-4" class="outline-text-3">

主要就是配置 /usr/local/openresty/nginx/conf/nginx.conf，以后很多事情都会在这里面来完成，说是 nginx.conf 编程也不为过，呵呵。

增加下面的配置
&lt;pre class="prettyprint lang-conf">

 upstream pgsql {
 postgres_server server_ip:5432 dbname=test password=123 user=test;
 #postgres_keepalive max=2 mode=single overflow=reject;
 postgres_keepalive off;
 }

# server 里面增加一个 location

 location /=/pv {
 postgres_query 'select thedate, pv from pv';
 postgres_pass pgsql;

 rds_json on;
 rds_json_format compact;

 xss_get on;
 xss_callback_arg '_c';
 }&lt;/pre>
&lt;ol>
	&lt;li>其中关于 upstream postgres 用来定义需要连接的数据库信息，和发送 sql 到数据库，可以参考 &lt;a href="https://github.com/FRiCKLE/ngx_postgres/">这里&lt;/a>。&lt;/li>
	&lt;li>rds_json 用来将数据库的输出变成 json 格式，可以参考 &lt;a href="https://github.com/agentzh/rds-json-nginx-module">这里&lt;/a> 。&lt;/li>
	&lt;li>xss_get 用来支持跨域，jquery 默认使用的 callback 参数是 _c，可以参考 &lt;a href="https://github.com/agentzh/xss-nginx-module">这里&lt;/a>。&lt;/li>
&lt;/ol>
这样配置好之后，重启下。结果应该很清晰了，请求 &lt;a href="http://your_ip/=/pv">http://your\_ip/=/pv&lt;/a> 应该就可以得到数据库里面的数据了，可以使用 curl 看看结果，应该类似下面的
&lt;pre class="prettyprint lang-json">
&lt;/div>
&lt;/div>
&lt;div id="outline-container-2-5" class="outline-3">
&lt;h3 id="sec-2-5">js 画图&lt;/h3>
&lt;div id="text-2-5" class="outline-text-3">

挑一个画图程序，比如我用过的 &lt;a href="http://highcharts.com">highcharts&lt;/a>, &lt;a href="http://www.amcharts.com/">amcharts&lt;/a> 这些都不错，amcharts 是使用 flash 画图，兼容各种浏览器，highcharts 号称也支持，不过我弄出来的图在 chrome/firefox 下面没问题，ie 不支持，他用的是 svg 标签。

就写几行代码来示意下吧
&lt;pre class="prettyprint lang-javascript">
 $.ajax({
 url : 'http://your_ip/=/pv',
 success: function (data) {
 renderPvCharts(data);
 }
 });

 function renderPvCharts(data) {
 $('body').append('&lt;/pre>
&lt;pre class="prettyprint lang-javascript">
 var result = Utils.getSplineChartSeries( data ); # 将 nginx 返回的 json 格式数据转化为 highcharts 需要的格式
 var options = {
			chart: {
 zoomType: 'xy',
				renderTo: 'pv', # div 的 id
				defaultSeriesType: 'spline'
			},
			title: {
 text: '每日 pv'
 },
			xAxis: {
 type: 'datetime'
			},
			tooltip: {
				formatter: function() {
			 return '&lt;strong>'+ this.series.name +'&lt;/strong>
'+
						Highcharts.dateFormat('%e. %b', this.x) +': '+ this.y;
				}
			},
			legend: {
				layout: 'vertical',
				align: 'right',
				verticalAlign: 'top',
				x: -10,
				y: 100,
				borderWidth: 0
			},
 series : result.y
 };

 var chart = new Highcharts.Chart( options );
 };

} );&lt;/pre>
简单解释下
&lt;ol>
	&lt;li>在页面 readay 的时候，使用 ajex 设置回调函数并请求接口。&lt;/li>
	&lt;li>回调函数里面使用 Utils.getSplineChartSeries 转换一下数据，方便直接给 options 里面数据赋值，具体需要的数据格式，看 highcharts 的 spline 的 demo 就可以。&lt;/li>
	&lt;li>回调函数里面显示图表。&lt;/li>
&lt;/ol>
这样就完事了，数据就展现出来了。

&lt;/div>
&lt;/div>
&lt;div id="outline-container-2-6" class="outline-3">
&lt;h3 id="sec-2-6">其他&lt;/h3>
&lt;div id="text-2-6" class="outline-text-3">

从上面可以看到整个数据流是怎么回事。openresty 可以做的事情远比上面描述的复杂，上面只是个最简单的应用了。
&lt;ol>
	&lt;li>比如使用 &lt;a href="https://github.com/agentzh/rds-csv-nginx-module">rds_csv&lt;/a> 来直接得到 csv 格式的数据提供给用户，而不是 json。&lt;/li>
	&lt;li>可以使用 &lt;a href="https://github.com/chaoslawful/lua-nginx-module">ngx_lua&lt;/a> 在 nginx.conf 里面使用 lua 来在服务器端对数据做一些处理再丢给浏览器。
大家都知道 js 处理的数据太大的时候，会导致浏览器卡死，所以如果不方便通过 sql 控制输出的时候，可以使用 lua 来处理下。当然 这只是其中一个应用，使用 ngx_lua 你可以干很多事情，比如上面那个使用 js 来生成 spline 数据的函数就可以用 lua 来实现，lua 还可以和 c 结合来做一些事情。对于 location 的参数，在 ngx_lua 里面也是可以访问的，比如 ngx.var.arg_c 这样。具体还是看 wiki 吧，写不完的。
&lt;ol>
	&lt;li>openresty 还能直接访问 redis 和 memcached。&lt;/li>
&lt;/ol>
本篇只能算是一个入门而已，openresty 在淘宝量子统计的应用非常广泛。另外在 &lt;a href="http://qunar.com">去哪网&lt;/a> 也有不少应用，比如我知道的安全过滤模块，和一些数据报表，都是基于 openresty 的。

附一个 highcarts 画的图

&lt;img class="alignnone" title="流量情况" src="http://wdicc.com/images/2011-10-24-171245_1100x312_scrot.png" alt="" width="1100" height="312" />&lt;/li>
&lt;/ol>
&lt;/div>
&lt;/div>
&lt;/div></description></item><item><title>postgresql 里面的 generate_series</title><link>https://wdicc.com/generate_series-function-in-postgresql/</link><pubDate>Fri, 14 Oct 2011 00:00:00 +0000</pubDate><guid>https://wdicc.com/generate_series-function-in-postgresql/</guid><description>&lt;p>有个报表需要把几天的记录按照小时 join 起来，最开始的作法是通过 js 来 join 数据。后来遇到了问题，就是某天某个小时可能会没有记录，然后想破头了，在 js 里面循环的时候设置每天循环到的当前的小时。可崩溃的是还会出现有的是这两小时没有，有的是另外的，用 js 搞不定了，就尝试用 sql 搞定。&lt;br />
&lt;/p></description></item><item><title>了解了下 hbase</title><link>https://wdicc.com/intro-hbase/</link><pubDate>Tue, 02 Aug 2011 00:00:00 +0000</pubDate><guid>https://wdicc.com/intro-hbase/</guid><description>&lt;p>很早就知道 hbase 了，但是一直没有仔细去了解 hbase 是怎么回事。今天了解了下他的表结构。&lt;br />
&lt;/p>&lt;br />
&lt;p>&lt;br />
这篇文章 &lt;a href="http://www.searchtb.com/2011/01/understanding-hbase.html">http://www.searchtb.com/2011/01/understanding-hbase.html&lt;/a> 其实写的挺清楚，下面这个是个例子&lt;br />
&lt;/p></description></item><item><title>alarm 使用不当遇到的问题</title><link>https://wdicc.com/alarm-signal-in-perl/</link><pubDate>Sun, 08 May 2011 00:00:00 +0000</pubDate><guid>https://wdicc.com/alarm-signal-in-perl/</guid><description>&lt;p>前段时间发现有个程序总是运行一段时间就挂掉，看各种日志里面都没有错误信息，感觉就是莫名其妙突然进程就没了。&lt;br />
&lt;/p></description></item><item><title>svn merge</title><link>https://wdicc.com/about-svn-merge/</link><pubDate>Sun, 08 May 2011 00:00:00 +0000</pubDate><guid>https://wdicc.com/about-svn-merge/</guid><description>&lt;p>svn merge 的 help 信息&lt;br />
&lt;pre class="prettyprint">
usage: 1. merge sourceURL1[@N] sourceURL2[@M] [WCPATH]
 2. merge sourceWCPATH1@N sourceWCPATH2@M [WCPATH]
 3. merge [-c M[,N...] | -r N:M ...] SOURCE[@REV] [WCPATH]
&lt;/pre>&lt;br />

svn 的 merge 的本质其实就是在两个版本之间生成 diff，然后把这个 diff 再应用到另外一个版本里面。&lt;br />
&lt;/p></description></item><item><title>hive 里面不能 drop table</title><link>https://wdicc.com/cant-drop-table-in-hive/</link><pubDate>Tue, 03 May 2011 00:00:00 +0000</pubDate><guid>https://wdicc.com/cant-drop-table-in-hive/</guid><description>&lt;p>之前部署 hive 0.6 的时候，发现用 postgress 存 metadb 的时候，不能 drop table，一执行就卡住了。当时试过 mysql，好像是有个什么问题，就没用了，后来只好用 hive 0.5 完事。&lt;br />
&lt;/p></description></item><item><title>rsync files-from 参数</title><link>https://wdicc.com/rsync-files-from-option/</link><pubDate>Sat, 16 Apr 2011 00:00:00 +0000</pubDate><guid>https://wdicc.com/rsync-files-from-option/</guid><description>&lt;div id="outline-container-1" class="outline-2">&lt;br />
&lt;h2 id="sec-1">rsync&lt;/h2>&lt;br />
&lt;div id="outline-container-1_1" class="outline-3">&lt;br />
&lt;h3 id="sec-1_1">include/exclude&lt;/h3>&lt;br />
&lt;div id="text-1_1" class="outline-text-3">&lt;br />

rsync 支持使用 include/exclude 来过滤要同步的文件，使用这两个参数的时候，需要注意下面的这个问题&lt;br />
&lt;pre class="prettyprint">
Note that, when using the –recursive (-r) option (which is implied by -a), every subcomponent of every path is vis‐
 ited from the top down, so include/exclude patterns get applied recursively to each subcomponent’s full name (e.g. to
 include "/foo/bar/baz" the subcomponents "/foo" and "/foo/bar" must not be excluded). The exclude patterns actually
 short-circuit the directory traversal stage when rsync finds the files to send. If a pattern excludes a particular
 parent directory, it can render a deeper include pattern ineffectual because rsync did not descend through that
 excluded section of the hierarchy. This is particularly important when using a trailing ’*’ rule. For instance, this
 won’t work: 

/some/path/this-file-will-not-be-found
/file-is-included 
*&lt;/pre>
rsync 使用 -r 来遍历子目录的时候，如果还想用 exclude include 来过滤文件，那么要注意 一个目录如果满足了 exclude，而且还没有对应的 include，那这个目录下面的子目录也会被 exclude，就算你对这个子目录写了 include 。

虽然能解决问题，可实在很费劲，直到无意中发现了 files-from 参数。

&lt;/div>
&lt;/div>
&lt;div id="outline-container-1_2" class="outline-3">
&lt;h3 id="sec-1_2">files-from&lt;/h3>
&lt;div id="text-1_2" class="outline-text-3">

files-from 是通过指定一个本地/远程的文件来定义需要同步的文件。这个文件生成方法可就多了，你可以用 find/sed/awk/xxxxx 等搭配来得到你这个文件，一行命令不够还可以多行，是不是爽多了？
&lt;pre class="prettyprint">
如果是远程文件，那就 –files-from=:/path/to/files。

&lt;/div>
&lt;/div>
&lt;div id="outline-container-2" class="outline-2">
&lt;h2 id="sec-2">写在后面&lt;/h2>
&lt;div id="text-2" class="outline-text-2">

顺便测试一下 org2blog，这帖子是用 org2blog 写的，给作者提了个建议，加上 permlink 的支持，没几天居然给加上了，刚好测试一下，呵呵。

&lt;/div>
&lt;/div>
&lt;/div></description></item><item><title>解析纯真 ip 库</title><link>https://wdicc.com/parse-qqwry-dat/</link><pubDate>Thu, 10 Mar 2011 00:00:00 +0000</pubDate><guid>https://wdicc.com/parse-qqwry-dat/</guid><description>纯真的 ip 库应用比较广泛，就那个 qqwry.dat。以前尝试过解析，死活弄不明白那写地址和 pack/unpack 啥的，晕的不行。这两天需要解析下，就尝试用 perl 写一个。&lt;br />

开始用 sysread/sysseek 很多都读不出来，看了n遍程序，没觉得有啥问题。后来全部改成了 read/seek 就好了，也不知道怎么回事。画了一个图说明下，参考了 http://lumaqq.linuxsir.org/article/qqwry_format_detail.html 。&lt;br />

&lt;table style="width:auto;">&lt;tr>&lt;td>&lt;a href="https://picasaweb.google.com/lh/photo/f83_NZhjf6QchgG9gGRueg?feat=embedwebsite">&lt;img src="https://lh6.googleusercontent.com/_7OB6ilikjVs/TXie-yreH2I/AAAAAAAAAKY/fTPMq-pkuqU/s640/qqwry.png" height="640" width="269" />&lt;/a>&lt;/td>&lt;/tr>&lt;tr>&lt;td style="font-family:arial,sans-serif; font-size:11px; text-align:right">发件人 &lt;a href="https://picasaweb.google.com/wdicc0/2011310?feat=embedwebsite">2011-3-10&lt;/a>&lt;/td>&lt;/tr>&lt;/table>&lt;br />

读来的3字节地址需要加 "\0" 才能 unpack，不知道怎么回事，对这些问题弄不明白。对了，网上还有个 perl 版的，也能用，需要的话可以搜一下。&lt;br /></description></item><item><title>入了一个 BlackBerry 8900</title><link>https://wdicc.com/blackberry-8900/</link><pubDate>Thu, 27 Jan 2011 00:00:00 +0000</pubDate><guid>https://wdicc.com/blackberry-8900/</guid><description>前两个一个小姨子让帮忙买一个黑莓9800，也不知道小孩怎么想的，告诉她这个难用，还断网，但就是不听，说要买一个用的人少的。。。&lt;br />

顺道，就弄了一个 8900 自己用。之前那个 g1 现在很不给力，速度慢，费电。用上了 89 还是挺不错的，又有点 650 的感觉了，就是软件少了点。&lt;br />

linux 下面有个 barry 可以简单管理一下 bb，不过很有限。可以用 bjavaloader 装 cod 倒是不错，想加一个 service book 发现不行，很郁闷，不过能装软件就不错了。&lt;br />

尝试过在 virtualbox 里面使用，需要 disable usb 2.0。不过后来给 bb 弄了一个 sd 卡之后，发现 vbox 里面不认了，设置里面禁掉卡也不行，也不知道怎么回事。&lt;br /></description></item><item><title>perl 里面的信号处理</title><link>https://wdicc.com/signal-in-perl/</link><pubDate>Sat, 01 Jan 2011 00:00:00 +0000</pubDate><guid>https://wdicc.com/signal-in-perl/</guid><description>perl 里面的信号处理很简单，就是给 %SIG 这个 hash 赋值就好了。前几天遇到个问题，处理 SIG{CHLD} 的时候，我本来只起一个 child 进程，可是发现这个信号会被触发多次，开始弄不明白，后来偶然想到是不是 system，exec 之类的函数弄出来的，搜了下果然。&lt;br />

perl 里面调用外部命令是会 fork 一个子进程的，所以也会触发那个信号，想避免可以设置局部变量，例如&lt;br />
&lt;pre class="prettyprint">
$SIG{CHLD} = sub {
 print "main\n";
};

.....
{
 local $SIG{CHLD} = undef; # 注意调用外部命令的时候，如果 IGNORE 就捕捉不了结果了
 `mv xxx yyy`;
 system(xxxxx);
}

.....
&lt;/pre>&lt;br />

使用 {} 来构造局部变量的方法有时候会让问题变的非常简单。&lt;br />

另外，信号触发的时候，会把 sleep 中断，这个在 sleep 的 doc 里面说的很明白。如果还是想 sleep 到足够的时间，可以用下面的方法。&lt;br />
&lt;pre class="prettyprint">
my $timeLeft = 10;
while ( 1 ) {
 last if $timeLeft &lt;= 0;
 my $actTime = sleep($timeLeft);
 $timeLeft = $timeLeft - $actTime;
}
&lt;/pre>&lt;br />

越来越感觉写 perl 还是很给力的，很多的奇技淫巧，不过我现在也是属于没弄明白多少，瞎写。&lt;br /></description></item><item><title>又安装了一次 oracle</title><link>https://wdicc.com/oracle-install-guide/</link><pubDate>Fri, 05 Nov 2010 00:00:00 +0000</pubDate><guid>https://wdicc.com/oracle-install-guide/</guid><description>好久没有弄 oracle 了，今天有机会又折腾了一天 oracle 的安装，本来觉得是挺简单的事情，没想到也折腾了挺长时间的，我觉得可能主要是因为使用的系统比较新，而 oracle 是 10g 有比较老的缘故。&lt;br />

1 配置 x11forward&lt;br />
我这安装了 xauth 和 libXtst，然后使用 ssh -Y user@host 连接的。使用 -X 好像从来没成功过，也不知道怎么回事，懒得研究了。&lt;br />

2 运行安装程序&lt;br />
解压什么的就没什么好说的了，主要是运行的时候他会检测是不是他支持的发行版，可以使用 -ignoreSysPrereqs，跳过系统检测。&lt;br />

然后其他正常，就是到最后运行 dbca 的时候，会 hung 卡在那，等多久都完成不了。这一步做的操作是会给你 create database，建 init 文件等，没这个的话 oracle 是不可用的。如果你知道手动操作这些后续步骤也可以不理会这个。&lt;br />

dbca 卡住后，可以点那个取消，然后再开一个 term， ps 找到 dbca 然后 kill 掉，前面那个界面应该就会有反应了，就可以继续往下走了。到最后 exit 了事。&lt;br />

然后就是单独启动 dbca 来完成后面的工作。执行 dbca 命令（需要你提前配置好 path），会启动一个窗口，要注意的是，在这时候能看到一个关于字体的错误，据说这个错误就是上面 huang 住的原因，如果看到了这个错误，那么 dbca 的最后一步可能是会执行不了的。。。&lt;br />

我尝试了 n 种方法解决这个问题，发现最简单的是装一个 jdk 1.6 然后把 java 命令链接覆盖 oracle 安装的那个 jdk 1.4 的 $ORACLE_HOME/jdk/jre/bin/java 命令。等于就是说使用 1.6 的 java 来启动 dbca。如果这么做还不行，那可能需要装一些字体相关的东西，比如 xorg-x11-fonts-truetype。如果还不行那就不知道怎么弄了。&lt;br />

dbca 启动后，还遇到了 ora-27102 out of memery 和 ora-01034 oracle not aviliable。后面这个是在遇到前面那个的时候点 ignore 出来的。主要是前面那个。前面那个是因为 kernel 参数关于内存的配置配置的有问题，最大共享内存太大导致的。如果遇到这个问题就去改那些参数吧。&lt;br />


dbca 配置好后，oracle 应该就启动了。你可以连上去看看了。&lt;br />

3 导入导出&lt;br />
导出使用 exp，导入 imp，一般不需要加什么参数。据说加那个 full=y 后，导入的时候会建立用户，不用你操心。&lt;br /></description></item><item><title>自动连接 ssh 并输入密码</title><link>https://wdicc.com/autossh-and-auto-enter-password/</link><pubDate>Wed, 13 Oct 2010 00:00:00 +0000</pubDate><guid>https://wdicc.com/autossh-and-auto-enter-password/</guid><description>这年头不翻墙就看不到真像了，前几天整了个 ssh 代理，就研究了下自动登录。&lt;br />

ssh 自动登录首选就是使用 key 了，可对方不干，那就只能使用密码了。自动输入密码可以用 expect。查这个的时候发现了一个 expect-lite，发现也挺有意思的，他把写 expect 脚本简单化了，比如想 send xxx，那就用 >xxxx 就行了，想 expect yyy 那就 &lt;yyy 就好了，等等这些，呵呵。不过我后来没用这个，还是用的标准的 expect，代码如下。&lt;br />

&lt;pre class="prettyprint lang-expect">
spawn autossh -M 20000 -p SSH_PORT -N -D 7070 YOUR_NAME@YOUR_SERVER
set timeout 60
expect {
 assword: {
 stty -echo
 send "YOUR_PASS\r"
 stty echo
 #exp_continue
 }
 incorrect {
 send_user "invalid password or account\n"
 exit
 }
 timeout {
 send_user "connection to host timed out\n"
 exit
 }
 eof {
 send_user "connection to host failed\n"
 exit
 }
}
if {[fork]!=0} exit
disconnect
&lt;/pre>&lt;br />

那里面那个 autossh 能自动给你重连，没仔细研究。那个 20000 后面的参数都是给 ssh 的，具体含意可以看 ssh 的 man。&lt;br />

最主要是最后那两行，能做到连接上之后主程序就退出了，不占用你的终端，而不影响 ssh 的连接。&lt;br /></description></item><item><title>chrome 的几个字体配置</title><link>https://wdicc.com/some-font-configuration-for-chrome/</link><pubDate>Fri, 01 Oct 2010 00:00:00 +0000</pubDate><guid>https://wdicc.com/some-font-configuration-for-chrome/</guid><description>随着各种 ext 的开发，chrome 目前的可用性已经很高了。阻碍我使用的最大一个问题，主要是字体。在 firefox 里面我喜欢自己配置中文英文字体。英文喜欢使用等宽，比如 consolas，Monaco, dejavu sans mono 之类。比较喜欢 monaco，可是目前能下载到的字体好像有点问题，有些字号没有。&lt;br />

前几天看到 ghost 在 twitter 上说到 chrome，就又动了试试看的念头。后来总算整好了。&lt;br />

chrome 本身自己有个字体设置的地方，在 tools -> options -> Under the Hood 里面，可以设置字体，在这里设置的字体感觉好像比平时理解的要小一点。比如我设置的 15 号才感觉好像看着舒服了点。另外，我这里设置的是英文，中文会根据 fontconfig 配置的来显示，我使用的是 WenQuanYi Zen Hei。&lt;br />

这么设置之后，在很多页面应该已经可以了。不过可能你在 google 的页面里面，还有 extension 的页面里面，还是会看到讨厌的字体。这是因为在设置了使用 css 使用的字体后，chrome 好像会优先使用 css 的设置。google 的页面和 extension 的页面使用的是 Arial 字体。在 term 使用 fc-match arial 可以看到实际使用的字体。&lt;br />

那么修改一下 fontconfig 的配置，设置一下字体替换，比如我这个。&lt;br />
&lt;pre class="prettyprint">
&lt;match target="pattern">
 &lt;test qual="any" name="family">&lt;string>Liberation Sans&lt;/string>&lt;/test>
 &lt;edit name="family" mode="assign">&lt;string>DejaVu Sans Mono&lt;/string>&lt;/edit>
 &lt;/match>
 &lt;/pre>

 再启动 chrome 应该就能看到效果了。:)

 此后还有个问题，那就是 chrome 界面上面没有最小字体的设置，然后很多 n 小的文字，让人讨厌。通过 google 找到了一个&lt;a href='http://wange.im/minimum-font-size-for-chrome-is-12px.html'>解决办法&lt;/a>，我把他贴这里。
 &lt;pre lang='txt'>
 到chrome安装目录下的User Data\Default文件夹；
用记事本打开Preferences，找到：
"webkit": {
"webprefs": {
"default_fixed_font_size": 13,
"default_font_size": 16,
}
在｝里面加上：
"minimum_font_size": 1,
"minimum_logical_font_size": 1
 &lt;/pre>

 现在看，我的 chrome 就好多了，呵呵。效果可以看看这里 http://www.webpagescreenshot.info/img/420779-9292010114845AM .</description></item><item><title>emacs 的列编辑</title><link>https://wdicc.com/rectangles-in-emacs/</link><pubDate>Sun, 29 Aug 2010 00:00:00 +0000</pubDate><guid>https://wdicc.com/rectangles-in-emacs/</guid><description>列编辑我觉得是一个编辑器不能缺少的东西。在 vim 里面使用 C-v 就能进入列编辑，然后我通常用到的，也就是 d (删除) 和 I (插入)。在 emacs 里面一直没怎么用上这个，总感觉是操作很麻烦。最近操作了几次，发现也没那么难，呵呵。&lt;br />

emacs manual 里面关于列编辑的&lt;a href='http://www.gnu.org/software/emacs/manual/html_node/emacs/Rectangles.html'>页面&lt;/a>。emacs 里面那个默认的列编辑不会出来像 vim 里面那样的矩形选区（不过有别的方法好像可以做到），所以当你选择的时候，还是按行来选择的，你只需要关心选择的起始点和结束点之间的那个矩形就好了，你的操作只会在里面起作用。&lt;br />

对应到 vim 的 d，emacs 里面的应该是 C-x r d 或 C-x r k 了吧，对应到 I，应该是 C-x r t string &lt;RET> 了吧，不过 emacs 里面这个是替换选择的东西为 string，你要是选个空的，应该就算是插入了吧。还有个 C-x r y 复制，我觉得会这几个应该就基本可以了吧。。&lt;br /></description></item><item><title>使用 org-mode 来做自己的 job tracker</title><link>https://wdicc.com/use-org-mode-as-a-job-tracker/</link><pubDate>Fri, 23 Jul 2010 00:00:00 +0000</pubDate><guid>https://wdicc.com/use-org-mode-as-a-job-tracker/</guid><description>用 emacs 的应该都知道 org-mode 这个大杀器，一直以来都想在工作里面用上他，可总是习惯不了。&lt;br />

这几天尝试把 org-mode 打造成了我的一个 job tracker，用来记录自己的 todo 和完成情况。&lt;br />

&lt;pre class="prettyprint lang-lisp">
;;
;; org-mode
;;

;; (setq org-agenda-files '("~/org"))
(setq org-agenda-files (file-expand-wildcards "~/org/*.org")) ;; 把 ~/org/*.org 都加入到 agenda 里面，使用 C-c a a 看 agenda 的时候，会从这些文件里面读
(add-to-list 'auto-mode-alist '("\\.org$" . org-mode))
(define-key global-map "\C-cl" 'org-store-link)
(define-key global-map "\C-ca" 'org-agenda)
(setq org-log-done t) ;; 变到 done 状态的时候，记录一下时间

(add-hook 'org-mode-hook
 (lambda ()
 (org-set-local 'yas/trigger-key [tab])
 (define-key yas/keymap [tab] 'yas/next-field-group)))

(setq org-todo-keywords
 '((sequence "TODO(t)" "WAIT(w@/!)" "|" "DONE(d!)" "CANCELED(c@)"))) ;; 设置一下 todo 的关键字，| 左边的是未完成状态，右边是 done 的状态


(setq org-default-notes-file "~/org/todo.org") ;; 设置 remember 的默认文件 

;;; Load Org Remember Stuff
(require 'remember)
(org-remember-insinuate)

;; Start clock in a remember buffer and switch back to previous clocking task on save
;; (add-hook 'remember-mode-hook 'org-clock-in 'append)
;; (add-hook 'org-remember-before-finalize-hook 'bh/clock-in-interrupted-task)

;; I use C-M-r to start org-remember
(global-set-key (kbd "C-c m r") 'org-remember)
;; (define-key global-map "\C-cr" 'org-remember)

;; Keep clocks running
(setq org-remember-clock-out-on-exit nil)

;; C-c C-c stores the note immediately
(setq org-remember-store-without-prompt t)

;; I don't use this -- but set it in case I forget to specify a location in a future template
(setq org-remember-default-headline "Tasks") ;; 设置默认 remember 添加的 headline

;; 3 remember templates for TODO tasks, Notes, and Phone calls
(setq org-remember-templates (quote (("todo" ?t "** TODO %?\nCREATED: %U" nil nil nil)
 ;; ("note" ?n "* %? :NOTE:\n %U\n %a\n :CLOCK:\n :END:" nil bottom nil)
 ;; ("appointment" ?a "* %?\n %U" "~/git/org/todo.org" "Appointments" nil)
 ;; ("org-protocol" ?w "* TODO Review %c%!\n %U" nil bottom nil))))
 ))) ;;设置 todo 的模板，里面第三个参数是模板，里面的变量的意思 google 下


&lt;/pre>&lt;br />

在 todo.org 里面有两个 headline，一个是 * Tasks ，一个是 * Done。&lt;br />

配置好后，在任意的 buffer 按 C-c m r 就可以打开个 buffer，输入 todo 信息，然后按 C-c C-c 就可以把 todo 添加到 todo.org 里面去了，会添加到 * Tasks 这个 headline 下面。&lt;br />

完成一个任务的时候，在那上面按 C-c C-t 然后选择 done 就可以设置完成。手动（还不会自动。。。）把完成的任务挪到 Done 里面。&lt;br />

如果想看看有完成情况的统计，可以在 agenda 里面看，C-c a a，然后按 v，选择不同的模式看。每周的工作情况在那里面一目了然，呵呵。&lt;br />

&lt;pre class="prettyprint">
Week-agenda (W29):
Monday 19 July 2010 W29
Tuesday 20 July 2010
Wednesday 21 July 2010
 todo: 17:33...... [ TODO 多看看 org-mode 的 agenda
Thursday 22 July 2010
 todo: 15:18...... Closed: DONE a test
 todo: 15:18...... [ DONE a test
Friday 23 July 2010
 todo: 14:50...... [ TODO 梳理一下
 todo: 17:08...... [ TODO 了解下
 todo: 22:49...... [ TODO 申请
Saturday 24 July 2010
Sunday 25 July 2010
&lt;/pre>&lt;br /></description></item></channel></rss>