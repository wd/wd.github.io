<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Home on wd and cc</title><link>https://wdicc.com/</link><description>Recent content in Home on wd and cc</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><copyright>Copyright © 2020 wd. All Rights Reserved</copyright><lastBuildDate>Sat, 06 Nov 2021 15:07:32 +0800</lastBuildDate><atom:link href="https://wdicc.com/atom.xml" rel="self" type="application/rss+xml"/><item><title>Setup Policy Route on Openwrt X86 With Wireguard</title><link>https://wdicc.com/setup-policy-route-on-openwrt-x86-with-wireguard/</link><pubDate>Sat, 06 Nov 2021 15:07:32 +0800</pubDate><guid>https://wdicc.com/setup-policy-route-on-openwrt-x86-with-wireguard/</guid><description>刷系统 选择 image，我用的是 x86_64 的硬件。如果你不确定，可以选择 generic 的试试看，如果你能用 64 的，启动的时候</description><content type="text/html" mode="escaped"><h1 id="刷系统">刷系统</h1><p>选择 image，我用的是 x86_64 的硬件。如果你不确定，可以选择 generic 的试试看，如果你能用 64 的，启动的时候提示你用 64 位的性能更好。</p><p>然后需要选择不同的包，主要是在下面两个里面选。</p><ul><li>squashfs-combined：类似传统路由器，可以任意重置路由器。但是磁盘大小也是固定大小。</li><li>ext4-combined：磁盘可以 resize，如果你有超过 50G 的磁盘，都想要在路由器里面用，那就选这个。否则上面那个更好，毕竟有问题的时候重置很方便。这个恐怕只能重新刷系统了，麻烦多了。</li></ul><p>准备两个 u 盘。如果你能有一个 u 盘可以启动加存放那个 img 那就更好了。</p><ul><li>一个刷 debian live cd，启动的时候选择 live</li><li>一个里面放 openwrt 的 img<code>openwrt-21.02.0-x86-64-generic-ext4-combined.img</code>.</li></ul><p>连接显示器，键盘。</p><p>先使用 livecd 启动之后，先确认下盘符。一般 /dev/sda 是内置的磁盘，/dev/sdb 是 livecd。确认后插入另外一个 u 盘，这个的盘符应该是 /dev/sdc。</p><pre tabindex="0"><code>mount /dev/sdc1 /mnt
cd /mnt
dd if=openwrt-21.02.0-x86-64-generic-ext4-combined.img of=/dev/sda</code></pre><p>使用 cfdisk resize 下 /dev/sda2 并写到分区表。然后使用<code>resize2fs /dev/sda2</code> 命令应用到文件系统。这个时候就可以使用路由器自带的 openwrt 启动了。</p><h1 id="初始化">初始化</h1><p>system -> system</p><ul><li>hostname</li><li>timezone</li></ul><p>system -> administration</p><ul><li>set password</li><li>ssh access:<ul><li>interface: lan</li><li>uncheck all the boxes</li></ul></li><li>ssh-keys<ul><li>add your pub keys</li></ul></li></ul><p><code>ssh root@192.168.1.1</code> 测试连接。</p><h1 id="调整网络配置">调整网络配置</h1><p>调整的主要原因是</p><ul><li>192.168.x.x 容易和某些 vpn 什么的冲突</li><li>把 eth0 改成 wan 口，其他都是 lan 口，比较符合直观的感受。</li></ul><p>调整内容</p><ul><li>network<ul><li>interfaces -> lan<ul><li>ip address: 10.10.10.1</li></ul></li><li>interfaces -> wan 和 wan6<ul><li>device: eth0</li></ul></li><li>devices -> br-lan<ul><li>把 eth0 之外都选上
这个操作之后，需要把线改接第二个口了。我遇到情况是 apply 之后部分修改没生效，别慌，把接口接回去应该还能继续配置。</li></ul></li></ul></li></ul><h1 id="使用-dnsmasq-full-替换-dnsmasq">使用 dnsmasq-full 替换 dnsmasq</h1><p>这一步需要通过 ssh 操作。这一步放最前面是为了避免丢失配置，因为为了省事（解决配置冲突）需要删除<code>/etc/config/dhcp</code>。</p><pre tabindex="0"><code>opkg update
opkg remove dnsmasq # 这一步可能会导致 dns 丢失，如果出现问题可以去 /etc/resolve.conf 里面重新配置下 dns
rm /etc/config/dhcp
opkg install dnsmasq-full</code></pre><h1 id="网络拓扑">网络拓扑</h1><p>openwrt -> wifi router -> pc/mac/iphone
10.10.10.1/24 -> 10.10.10.2/10.10.8.1/24 -> 10.10.8.x</p><p>这样的结构下，如果 openwrt 出问题，可以随时把外网接 wifi router 上面继续用，其他设备都不用动。等稳定之后，可以把 wifi router 改成桥接模式。</p><h1 id="配置-wireguard">配置 wireguard</h1><p>参考文档：https://openwrt.org/docs/guide-user/services/vpn/wireguard/server</p><h2 id="规划下-wireguard-各个节点的-ip">规划下 wireguard 各个节点的 ip</h2><p>这里需要提前规划下 wireguard 网络，我的目的是通过远端的 vps 上网，所以我的设置如下</p><ul><li>network: 10.10.20.1/24</li><li>vps: 10.10.20.1</li><li>openwrt: 10.10.20.11</li><li>其他设备: 10.10.20.21(mac),22(iphone)</li></ul><h2 id="安装配置-wireguard">安装配置 wireguard</h2><ul><li>system -> software<ul><li>update lists</li><li>install: wireguard-tools(必须) luci-proto-wireguard(通过配置 luci 配置 wireguard 必须) luci-app-wireguard(显示一些连接信息，不是必须)</li></ul></li></ul><p>这个时候可能需要重启下路由器才能继续，否则可能在菜单里面看不到 wireguard 这个选项</p><ul><li>network -> interfaces<ul><li>Add new interface<ul><li>name: wg0</li><li>protocal: wireguard vpn</li><li>create interface<ul><li>private key: 可以点那个 generate key</li><li>listen port: 54321</li><li>ip address: 10.10.20.11</li></ul></li><li>save</li></ul></li><li>save and apply</li></ul></li></ul><p>这个时候执行 wg 命令应该可以看到 wg 设备的情况了。在 status -> wireguard 也可以看到。如果想要在这里支持 qr/code ，还需要安装一些 qrcode 相关的包。</p><h2 id="配置-firewall">配置 firewall</h2><p>单独为 wg 创建一个 zone。允许通过 wg 访问 wan 和 lan。</p><ul><li>network -> firewall -> zones<ul><li>add<ul><li>name: wireguard</li><li>forward: accept</li><li>mss clamping</li><li>masquerading</li><li>covered networks: wg0</li><li>allow forward to dest zone: lan, wan, wan6，也可以设置只允许访问 wan。</li><li><em>allow forward from source zone: lan</em>(这个好像是需要的)</li><li>save</li></ul></li><li>save and apply</li></ul></li></ul><p>允许通过 wan 访问 54321</p><ul><li>network -> firewall -> traffic rule<ul><li>add<ul><li>name: Allow-wireguard-from-wan</li><li>protocol: udp</li><li>dest zone: input</li><li>dest port: 54321</li><li>save</li></ul></li><li>save and apply</li></ul></li></ul><h2 id="配置-wireguard-peers">配置 wireguard peers</h2><ul><li>network -> interfaces -> wg0 -> edit -> peers<ul><li>add peer(客户端 peer)<ul><li>description: Mac</li><li>pub key:</li><li>allowed ips: 10.10.20.21/32</li></ul></li><li>add peer(vps server)<ul><li>description: vps</li><li>endpoint host:<code>vps ip</code></li><li>endpoint port:<code>vps port</code></li><li>allowed ips: 0.0.0.0/0</li></ul></li><li>save</li><li>save and apply</li><li>restart interface</li></ul></li></ul><p>这个时候执行 wg 命令或者去 status -> wireguard 应该能看到更多信息了。比较关键的是确认下 vps 那个有没有连接成功，看<code>latest handshake</code> 是什么时候。</p><pre tabindex="0"><code>peer: &lt;pub_key>
endpoint: &lt;ip:port>
allowed ips: 0.0.0.0/0
latest handshake: 45 seconds ago
transfer: 92 B received, 212 B sent
persistent keepalive: every 25 seconds</code></pre><p>也可以测试下是不是可以通过电脑或者手机连接这个 openwrt 上面的 wireguard。这个时候应该只能 handshake 成功，但是不能通过这个连接访问任何网站，因为还没有配置相关的路由。DNS 也不通。</p><h1 id="配置路由">配置路由</h1><p>配置针对 10.10.20.0/24 网段的路由，配置之后就可以通过 wg 访问路由器的ip 10.10.10.1 了。</p><pre tabindex="0"><code>route add -net 10.10.20.0 netmask 255.255.255.0 dev wg0</code></pre><p>如果你还想通过 wg 访问内网的设备(10.10.8.x)，还需要配置一条路由</p><p>network -> dhcp and dns -> static leases</p><ul><li>找到 wifi router 的设备，给它设置为固定 ip</li></ul><p>network -> static routes -> add</p><ul><li>interface: lan</li><li>target: 10.10.8.0</li><li>netmask: 255.255.255.0</li><li>gateway: 10.10.10.2(这个是 wifi router 的固定 ip)</li></ul><p>注意几点</p><ul><li>需要关闭 wifi 的防火墙，因为路由器一般默认不允许从 wan 连接。</li><li>wireguard 客户端的路由配置里面，增加 10.10.8.1/24，默认是没有的。</li></ul><h1 id="增加-route-table">增加 route table</h1><p>编辑<code>/etc/iproute2/rt_tables</code>，增加一行</p><pre tabindex="0"><code>200 gfw</code></pre><h1 id="配置-dnsmasq-和-ipset">配置 dnsmasq 和 ipset</h1><h2 id="配置-ipset">配置 ipset</h2><p>安装 ipset</p><p>创建<code>/etc/gfw.ip.ipset</code> 文件。里面存放需要通过 wg 访问的 ip。</p><pre tabindex="0"><code>8.8.8.8
1.1.1.1</code></pre><p>创建<code>/etc/gfw.net.ipset</code> 文件。里面存放需要通过 wg 访问的 cidr</p><pre tabindex="0"><code># telegram
67.198.55.0/24
91.108.4.0/22
91.108.8.0/22
91.108.12.0/22
91.108.16.0/22
91.108.56.0/22
109.239.140.0/24
149.154.160.0/20
149.154.164.0/22
149.154.168.0/22
149.154.172.0/22
205.172.60.0/22</code></pre><p>修改<code>/etc/config/firewall</code> 文件。增加下面的内容</p><pre tabindex="0"><code>config ipset
option name 'gfw'
option match 'ip'
option storage 'hash'
option enabled '1'
option loadfile '/etc/gfw.ip.ipset'
config ipset
option name 'gfwnet'
option match 'net'
option storage 'hash'
option enabled '1'
option loadfile '/etc/gfw.net.ipset'</code></pre><p>重启 firewall<code>/etc/init.d/firewall restart</code>. 执行<code>ipset list</code> 查看结果</p><pre tabindex="0"><code>Name: gfwip
Type: hash:ip
Revision: 4
Header: family inet hashsize 1024 maxelem 65536
Size in memory: 200
References: 0
Number of entries: 0
Members:
1.1.1.1
8.8.8.8
Name: gfwnet
Type: hash:net
Revision: 6
Header: family inet hashsize 1024 maxelem 65536
Size in memory: 1216
References: 0
Number of entries: 12
Members:
149.154.172.0/22
109.239.140.0/24
91.108.8.0/22
67.198.55.0/24
149.154.168.0/22
149.154.160.0/20
91.108.12.0/22
91.108.16.0/22
149.154.164.0/22
91.108.56.0/22
91.108.4.0/22
205.172.60.0/22</code></pre><p><strong>日后这两个文件<code>/etc/gfw.net.ipset</code> 和<code>/etc/gfw.ip.ipset</code> 就是管理静态的需要走 wg 的 ip 的文件。</strong></p><h2 id="配置-dnsmasq">配置 dnsmasq</h2><p>network -> dhcp and dns</p><ul><li>Listen interfaces: lan, wg</li></ul><p>这个配置之后应该可以通过 wg 访问 openwrt 的 dns 了。</p><p>创建<code>/etc/dnsmasq.d/gfw.conf</code> 文件，可以根据需要自己写，也可以使用别人写好的。格式如下</p><pre tabindex="0"><code>server=/twitter.com/8.8.8.8
ipset=/twitter.com/gfwip</code></pre><p>也可以使用我整理好的<a href="https://github.com/wd/gfwlist-ipset/blob/main/gfwlist-ipset.conf">https://github.com/wd/gfwlist-ipset/blob/main/gfwlist-ipset.conf</a></p><p>修改<code>/etc/config/dhcp</code> 文件，增加一行</p><pre tabindex="0"><code>config dnsmasq
...
option confdir '/etc/dnsmasq.d'</code></pre><p>重启 dnsmasq,<code>/etc/init.d/dnsmasq restart</code>. 测试下</p><pre tabindex="0"><code># dig twitter.com
; &lt;&lt;>> DiG 9.17.13 &lt;&lt;>> twitter.com
;; global options: +cmd
;; Got answer:
;; ->>HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 13344
;; flags: qr rd ra; QUERY: 1, ANSWER: 2, AUTHORITY: 0, ADDITIONAL: 1
;; OPT PSEUDOSECTION:
; EDNS: version: 0, flags:; udp: 1232
;; QUESTION SECTION:
;twitter.com. IN A
;; ANSWER SECTION:
twitter.com. 1227 IN A 104.244.42.193
twitter.com. 1227 IN A 104.244.42.1
;; Query time: 0 msec
;; SERVER: 127.0.0.1#53(127.0.0.1) (UDP)
;; WHEN: Sun Oct 24 22:38:47 CST 2021
;; MSG SIZE rcvd: 72
# ipset list gfwip
Name: gfwip
Type: hash:ip
Revision: 4
Header: family inet hashsize 1024 maxelem 65536
Size in memory: 392
References: 0
Number of entries: 4
Members:
8.8.8.8
104.244.42.193
1.1.1.1
104.244.42.1</code></pre><p>能看到 twitter ip 已经加入到了 ipset 里面。（这个测试里面不一定能返回正确的 twitter 的 ip，只是测试 dnsmasq + ipset 是正常工作的）。</p><p><strong>以后需要翻墙的域名就在这个<code>/etc/dnsmasq.d/gfw.conf</code> 文件里面维护。也可以在这个目录放多个文件。</strong></p><h2 id="配置匹配-ipset-的包走-wg">配置匹配 ipset 的包走 wg</h2><p>network -> firewall -> custom rules</p><pre tabindex="0"><code>iptables -t mangle -N fwmark
iptables -t mangle -A PREROUTING -j fwmark
iptables -t mangle -A OUTPUT -j fwmark
iptables -t mangle -A fwmark -m set --match-set gfwip dst -j MARK --set-mark 1
iptables -t mangle -A fwmark -m set --match-set gfwnet dst -j MARK --set-mark 1</code></pre><p>路由规则</p><pre tabindex="0"><code># 有 0x1 标记的，都走 gfw 这个 table
ip rule add fwmark 0x1 table gfw
# gfw 这个 table 默认都从 10.10.20.1 出去
ip route add default via 10.10.20.1 dev wg0 table gfw</code></pre><h2 id="配置-hotplug">配置 hotplug</h2><p>上面的路由规则目前都是通过手动配置的，重启设备就没有了。需要配置一个自动添加的脚本。</p><p>创建一个文件<code>/etc/hotplug.d/iface/50-wg</code></p><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="cp">#!/bin/sh</span><span class="cp"/><span class="k">if</span><span class="o">[</span><span class="s2">"ifup"</span><span class="o">=</span><span class="s2">"</span><span class="nv">$ACTION</span><span class="s2">"</span><span class="o">]</span><span class="o">&amp;&amp;</span><span class="o">[</span><span class="s2">"</span><span class="nv">$INTERFACE</span><span class="s2">"</span><span class="o">=</span><span class="s2">"wg0"</span><span class="o">]</span><span class="p">;</span><span class="k">then</span>
ip route add 10.10.20.0/24 dev wg0
ip rule<span class="p">|</span>grep -q<span class="s1">'fwmark 0x1 lookup gfw'</span><span class="o">||</span> ip rule add fwmark 0x1 table gfw
ip route add default via 10.10.20.1 dev wg0 table gfw<span class="k">fi</span></code></pre></div><h1 id="排查错误">排查错误</h1><p>在全部配置好之后，最好重启下 openwrt，确保重启后依然是可以上网的。如果有问题，可以参考下面的步骤。</p><p>确保 ipset ok，应该有两个set<code>gfwip</code> 和<code>gfwnet</code>。查询一个被屏蔽的 dns 之后能在 ipset 列表里面看到。</p><pre tabindex="0"><code># ipset list</code></pre><p>确保路由规则都在</p><pre tabindex="0"><code># ip route show table gfw
default via 10.10.20.1 dev wg0
# ip rule|grep fwmark
32765: from all fwmark 0x1 lookup gfw
# ip route |grep wg
10.10.20.0/24 dev wg0 scope link</code></pre><p>iptables 规则 ok</p><pre tabindex="0"><code># iptables -t mangle -nvL PREROUTING
Chain PREROUTING (policy ACCEPT 26721 packets, 5880K bytes)
pkts bytes target prot opt in out source destination
27M 31G fwmark all -- * * 0.0.0.0/0 0.0.0.0/0
# iptables -t mangle -nvL OUTPUT
Chain OUTPUT (policy ACCEPT 6295 packets, 2828K bytes)
pkts bytes target prot opt in out source destination
307K 86M fwmark all -- * * 0.0.0.0/0 0.0.0.0/0
# iptables -t mangle -nvL fwmark
Chain fwmark (2 references)
pkts bytes target prot opt in out source destination
188K 29M MARK all -- * * 0.0.0.0/0 0.0.0.0/0 match-set gfwip dst MARK set 0x1
1417 157K MARK all -- * * 0.0.0.0/0 0.0.0.0/0 match-set gfwnet dst MARK set 0x1</code></pre><p>启用 log
system -> logging</p><ul><li>write system log to file: /tmp/system.log</li></ul><p>通过看 FORWARD 和 POSTROUTING 的日志来判断可能是哪里有问题。</p><pre tabindex="0"><code>DEST=8.8.8.8
iptables -t filter -A FORWARD -d $DEST -j LOG --log-prefix 'FWD:'
iptables -t mangle -A POSTROUTING -d $DEST -j LOG --log-prefix 'POST:'
DEST=10.10.8.1
iptables -t filter -D FORWARD -d $DEST -j LOG --log-prefix 'FWD:'
iptables -t mangle -D POSTROUTING -d $DEST -j LOG --log-prefix 'POST:'</code></pre><p>如果只有 FORWARD 没有 POSTROUTING，那就是包被 drop 了。同时也观察包是否有正确的 src dst 和 mark。</p><h1 id="其他">其他</h1><h2 id="iptv">iptv</h2><p>network -> interfaces -> add</p><ul><li>name: iptv</li><li>protocal: dhcp</li><li>device: eth0</li><li>advanced settings<ul><li>use default geteway: 去掉选择</li></ul></li></ul><p>安装 luci-app-udpxy</p><p>services -> udpxy</p><ul><li>enabled 选上</li><li>status 选上</li><li>port 4022</li><li>source ip/interface: eth0</li><li>其他都留空</li><li>save and apply</li></ul><p>访问 http://10.10.10.1:4022/status 能看到<code>Multicast address</code> 是 192.168.1.x 这样的 ip。可以找一个地址测试下是不是可以用吧。</p><h2 id="ddns">ddns</h2><p>安装 ddns-scripts-cloudflare ca-certificates</p><p>services -> ddns -> add</p><ul><li>hostname: x.abc.com</li><li>ddns service provider: cloudflare.com-v4</li><li>domain:<a href="mailto:x@abc.com">x@abc.com</a></li><li>username: Bearer</li><li>password: token from cloudflare</li><li>path to ca certs: /etc/ssl/certs</li><li>save</li></ul><p>点击那个 reload 可以重复执行。点击 edit 可以看 log，如果遇到 ssl 错误，可能需要安装<code>libwolfssl4.8.1.66253b90</code>，openwrt 默认使用<a href="https://openwrt.org/releases/21.02/notes-21.02.0-rc1#tls_and_https_support_included_by_default">wolfssl</a> 。</p><h2 id="其他-1">其他</h2><ul><li>通过配置 port-foward -> router 开放 router 下面客户端的端口。例如 NAS bt 下载用的 p2p 端口。注意还需要在 router 里面也做这个映射。当然也可以直接把 nas 接到 openwrt。</li><li>如果在路由配置好之前发生了针对被污染的域名的 dns 查询，那很可能会缓存被污染的结果，目前没想到什么好办法。不过好在一般等 dns 过期之后就正常了。</li></ul><h2 id="todo">TODO</h2><ul><li>ipv6 支持：因为这个方案目前不支持 ipv6，所以如果有 app 优先使用 ipv6 查询的话，那么返回的 ipv6 地址是不会走 wg 的，这个时候就会出现不能用。解决方法就是关闭这个设备的 ipv6，或者直接关闭 openwrt 的 ipv6 支持。</li></ul></content></item><item><title>An Incomplete List of Skills Senior Engineers Need Beyond Coding</title><link>https://wdicc.com/an-incomplete-list-of-skills-senior-engineers-need-beyond-coding/</link><pubDate>Sat, 25 Sep 2021 17:37:11 +0800</pubDate><guid>https://wdicc.com/an-incomplete-list-of-skills-senior-engineers-need-beyond-coding/</guid><description>看到一篇文章，An incomplete list of skills senior engineers need, beyond coding, 感觉挺有意思，本来想要翻译的，结果发现已经有人翻译了，直接贴这里</description><content type="text/html" mode="escaped"><p>看到一篇文章，<a href="https://skamille.medium.com/an-incomplete-list-of-skills-senior-engineers-need-beyond-coding-8ed4a521b29f">An incomplete list of skills senior engineers need, beyond coding</a>, 感觉挺有意思，本来想要翻译的，结果发现已经有人翻译了，直接贴这里好了。。</p><p>
翻译参考了:<a href="https://kanchengzxdfgcv.blogspot.com/2021/07/incomplete-list-of-skills-senior.html">https://kanchengzxdfgcv.blogspot.com/2021/07/incomplete-list-of-skills-senior.html</a></p><p>
How to run a meeting, and no, being the person who talks the most in the meeting is not the same thing as running it</p><p>
> 知道如何主持会议。要注意成为会议里面说的最多的那个人并不同于主持会议。</p><p>
How to write a design doc, take feedback, and drive it to resolution, in a reasonable period of time</p><p>
> 知道如何在合理的时间内写设计文档，获取反馈，并推动解决。</p><p>
How to mentor an early-career teammate, a mid-career engineer, a new manager who needs technical advice</p><p>
> 知道如何指导刚工作的新人同事，中级工程师和给经理技术方面的建议。</p><p>
How to indulge a senior manager who wants to talk about technical stuff that they don’t really understand, without rolling your eyes or making them feel stupid</p><p>
> 知道怎么娇惯一位高级经理谈论一些他们并不懂的技术，而不是给他们翻白眼让他们觉得自己很蠢。</p><p>
How to explain a technical concept behind closed doors to a senior person too embarrassed to openly admit that they don’t understand it</p><p>
> 知道当一个高级人员犯技术方面的错误的时候怎么偷偷给他纠正而不让他觉得尴尬。</p><p>
How to influence another team to use your solution instead of writing their own</p><p>
> 说服别的团队使用你的方案而不是自己造轮子。</p><p>
How to get another engineer to do something for you by asking for help in a way that makes them feel appreciated</p><p>
> 知道如何让其他的工程师自愿帮你做事。</p><p>
How to lead a project even though you don’t manage any of the people working on the project</p><p>
> 知道如何在参与的人员都不归你管的情况下领导一个项目。</p><p>
How to get other engineers to listen to your ideas without making them feel threatened</p><p>
> 让其他工程师自愿听你的想法。</p><p>
How to listen to other engineers’ ideas without feeling threatened</p><p>
> 愿意倾听别人的想法。</p><p>
How to give up your baby, that project that you built into something great, so you can do something else</p><p>
> 放弃给自己创造过辉煌的项目，好让自己可以有精力做其他事情。</p><p>
How to teach another engineer to care about that thing you really care about (operations, correctness, testing, code quality, performance, simplicity, etc)</p><p>
> 说服别的工程师认同你关于一些方面的想法（操作，正确性，测试，代码质量，性能，简单等等）</p><p>
How to communicate project status to stakeholders</p><p>
> 知道如何和利益相关者沟通项目情况。</p><p>
How to convince management that they need to invest in a non-trivial technical project</p><p>
> 说服管理者去投资一个重大的技术项目。</p><p>
How to build software while delivering incremental value in the process</p><p>
> 在开发软件的同时，逐步发挥软件增值。</p><p>
How to craft a project proposal, socialize it, and get buy-in to execute it</p><p>
> 知道如何制定项目方案，搞好关系，付诸实施。</p><p>
How to repeat yourself enough that people start to listen</p><p>
> 如何通过不断重复让别人开始倾听。</p><p>
How to pick your battles</p><p>
> 知道怎么选择自己的战场。</p><p>
How to help someone get promoted</p><p>
> 知道怎么让别人或者晋升。</p><p>
How to get information about what’s really happening (how to gossip, how to network)</p><p>
> 知道如何或得真实发生的事情（通过八卦，社交）</p><p>
How to find interesting work on your own, instead of waiting for someone to bring it to you</p><p>
> 知道自己找到喜欢的工作，而不是等某人提供给你。</p><p>
How to tell someone they’re wrong without making them feel ashamed</p><p>
> 如何在不让别人感觉羞耻的情况下告诉对方错了.</p><p>
How to take negative feedback gracefully</p><p>
> 如何在不生气的情况下接收负面反馈.</p></content></item><item><title>Limit and Request in Kubernetes</title><link>https://wdicc.com/limit-and-request-in-kubernetes/</link><pubDate>Sun, 01 Aug 2021 17:28:00 +0800</pubDate><guid>https://wdicc.com/limit-and-request-in-kubernetes/</guid><description>程序跑在 K8s 里面的时候，特别要注意的是设置正确的 Request 和 limit。其中 Request 是 guaranteed 的资源是下限，如果节点上面不</description><content type="text/html" mode="escaped"><p>程序跑在 K8s 里面的时候，特别要注意的是设置正确的 Request 和 limit。其中 Request 是 guaranteed 的资源是下限，如果节点上面不能给你保证这个资源，那么 pod 是不会调度上去的。而 Limit 是 burstable 资源，这部分资源有时候是会需要和节点上面其他程序竞争的。对于 CPU 来说，如果产生了竞争，那会遇到比较严重的 throttle，对于内存，那可能就会遇到 OOM kill 了。这些内容很容易查到资料，不多说了。</p><p>
那么，例如一个程序运行的时候只需要 500m，设置 request 是 800m，那是不是就不会有 throttle 了呢？答案是不一定。这个是和 kernel 如何分配 CPU 资源有关的。</p><p>
CPU 资源并不和内存资源一样，无法把一个 CPU 核心划分成几部分，然后大家各用各的互相不影响。对于一个 CPU 核心来说，一段程序在使用的时候，别的程序是无法使用的。并且使用的时候也是全速使用的，并不是说会限速到你 request 的数量。那么内核到底是怎么限制程序的 CPU 使用的？</p><p>
目前大部分情况下应该都是基于 CFS 来做内核调度的，内核会通过轮流使用也就是限制使用时间来达到公平。我们假设一个节点上面有一个 CPU 核心，并且只有两个程序。这个时候每个程序要求使用 500m 的 CPU，那可以假设，比如一天内，让其中一个程序使用 12 小时，另外一个程序使用 12 小时，这样一天看下来，是不是差不多就是每个程序使用到了 50% 的 CPU？一天其实有点粒度太大了，在内核层面，实际上是通过<code class="verbatim">cpu.cfs_period_us</code> 这个粒度控制的，这个默认是 100ms。那么就是相当于是每 100ms 评估下程序的使用情况。这个是评估时间窗口，还有一个参数是 =cpu.cfs_quota_us=，这个是控制在这个时间窗口内可以使用的配额是多少。还是上面的例子，相当于在 100ms 内，每个程序会使用 50% 的配额也就是 50ms。这么说是什么意思呢，例如如果其中一个程序没有在 50ms 内完成使用，那么他就需要等 50ms 到下一个 period 才能继续使用。而在这个期间就是被 throttled。</p><p>
再进一步说，如果那个程序的 latency 都小于 50ms，那么这个程序一定可能性下应该不会被 throttle。throttle 应该只影响程序 p99 的指标，对于 p95 影响应该不大。(这里实际还需要考虑的是线程数量的问题，因为每个 periods 里面都是基于所有的线程使用的总量考虑的。)</p><p>
Limit 会决定每个窗口里面可用的配额是多少，那么 Limit 设置成多少合适？如果 latency 在 100ms 之内的，例如如果是 19ms，那么只要给 200m(相当于 quota 是 20ms，那么这个计算在一个 period 内就可以完成) 就可以很好的完成工作了。如果是需要超过 100ms 才能完成，如果程序一点都不想要被 throttle，那么恐怕需要设置为 1000m，因为这种情况下，必须是连续的 periods 才能完成计算，而只有在 quota 是 100 的情况下才能有连续的 periods。</p><p>
除了上面这些，还需要注意有些程序可能并不是 cgroups-aware 的，那么这些程序可能会出现不合理的 cpu 预期（例如任务整个 node 的 cpu 都可用），导致程序出现不合预期的表现。目前我看到 JVM Erlang VM 都需要针对 container 模式做一些特别的注意。</p><p>
另外对于内存需要注意的是，对于 JVM 程序，不止需要考虑 Xmx 参数，还需要考虑 JVM 运行需要的内存，例如 GC 等操作也是需要内存的。另外还需要考虑程序读取的文件等等，这些都是需要消耗内存的。对于打开之后又关闭的文件，内核实际会放在缓存里面，这部分内容占用的内存在需要的时候内核是会主动回收的，我们通过监控看到的内存使用很可能是包含的这部分内存，所以也需要注意下。</p><p>
参考：<a href="https://amixr.io/blog/what-wed-do-to-save-from-the-well-known-k8s-incident/">https://amixr.io/blog/what-wed-do-to-save-from-the-well-known-k8s-incident/</a><a href="https://medium.com/omio-engineering/cpu-limits-and-aggressive-throttling-in-kubernetes-c5b20bd8a718">https://medium.com/omio-engineering/cpu-limits-and-aggressive-throttling-in-kubernetes-c5b20bd8a718</a><a href="https://www.youtube.com/watch?v=UE7QX98-kO0">https://www.youtube.com/watch?v=UE7QX98-kO0</a></p></content></item><item><title>Local Persistent Volume vs HostPath</title><link>https://wdicc.com/local-persist-volume-vs-hostpath/</link><pubDate>Sun, 28 Feb 2021 14:52:23 +0800</pubDate><guid>https://wdicc.com/local-persist-volume-vs-hostpath/</guid><description>Kubernetes 可以用 Local persistent volume 来使用本机的磁盘。那和 hostPath volume 有啥区别呢？ 这篇文档有说明，大致翻译下。 一般来说 Persistent volume 都是通过</description><content type="text/html" mode="escaped"><p>Kubernetes 可以用 Local persistent volume 来使用本机的磁盘。那和 hostPath volume 有啥区别呢？<a href="https://kubernetes.io/blog/2019/04/04/kubernetes-1.14-local-persistent-volumes-ga/">这篇文档</a>有说明，大致翻译下。</p><p>
一般来说 Persistent volume 都是通过远程文件系统实现的。远程文件系统可以不依赖 kubernetes 节点而保存数据。但是远程文件系统往往不能提供本地文件系统一样的性能。</p><p>
为了能更好的理解 Local Persistent Volume，有必要把它和 HostPath volume 比较下。HostPath volume 是挂载主机的一个文件或者目录到 pod。类似的 Local Persistent Volume 是挂载主机的一块磁盘或者分区到一个 pod。</p><p>
主要的不同在于，Kubernetes scheduler 知道一个 Local Persistent Volume 是属于哪个节点。而对于 HostPath volume，一个 pod 使用的 volume 可能会被 scheduler 移动到别的节点而导致数据丢失。Kubernetes scheduler 会保证 pod 使用的 Local Persistent Volume 总是规划到同一个节点。</p><p>
HostPath volume 可以通过 PVC 或者直接在 pod 里面定义使用，Local Persistent Volume 只能通过 PVC 使用。这样能提供更多的安全特性，因为 Persistent Volume 一般都是管理员创建的，可以阻止 pod 可以访问任意的主机上面的目录。</p><p>
还有一些其他的特性，例如可以在挂载的时候格式化磁盘，和使用 fsGroup 设置 volume 的属主。</p></content></item><item><title>Upgrade Yourself</title><link>https://wdicc.com/upgrade-yourself/</link><pubDate>Sun, 21 Feb 2021 10:37:37 +0800</pubDate><guid>https://wdicc.com/upgrade-yourself/</guid><description>前几年一直在做管理，之前写过一篇成长。最近开始做独立开发者，感觉可能前面忽视了一些东西。这里补充总结</description><content type="text/html" mode="escaped"><p>前几年一直在做管理，之前写过一篇<a href="/upgrade-myself/">成长</a>。最近开始做独立开发者，感觉可能前面忽视了一些东西。这里补充总结下。</p><p>
对于各方面能力都很强的人来说，做管理人员可以让他成就更大的事情。毕竟一个人精力有限，即使很多方面都精通也没法说 7x24 把这些方面的事情都安排的妥妥当当的，这个时候必定会需要代理给别人，那就是组建团队和做所谓的管理了。</p><p>
但是这样的厉害的人毕竟是少数。之前一个同事说过一个说法，一个人总是会被提拔到一个他不能胜任的位置。这恐怕是两个方面的原因，一个原因是因为没真实的经历过，很难直接否定别人说让你高一个级别你会搞不定。另一个原因是，他自己通常也不知道自己的瓶颈在哪里，甚至还有可能遇到了瓶颈自己也不知道。所以我是同意这个说法的。</p><p>
对于能力并没有那么强的人，一般也就是小头目或者顶多是中层（再高层我也不懂了。。），这些管理人员属于夹心饼干，对上跪舔，对下还得替他们背锅，毕竟自己团队能力不行，直接原因可能还是因为自己能力太差。那句老话兵熊熊一个，将熊熊一窝是有道理的。除非牛逼到不行，要不通常这些人成天活在被替换的恐惧中，毕竟除非你牛逼到马云那样的忽悠能力，要不管理谁还不会做呢？想想你多久没有坚持自己的想法去顶撞你的老板了？当然不顶撞有时候可能真的是他们对的，但是你会发现大部分时候就是扯淡的。你不敢怼不过是因为怕被辞退了没地方有类似的位置给你，让你继续感觉风光无限而已。也因为常年把时间花在管理扯皮上面，让你没时间钻研技术而什么都懂但是其实什么都不懂，害怕无法通过新公司的面试而已。</p><p>
这些人另外一个问题就是突破难。雷厉风行，手段高超的恐怕用不了个几年就升上去了。一直墨迹在高不成低不就的位置的人，要意识到这可能是因为你的老板能力差他自己没法升迁，没有坑给你。或者可能是因为你自己能力差，老板实在不想把你往更高的位置放。</p><p>
相比较下来，如果你是个技术大牛，独当一面。八成可以随意怼人，天不怕地不怕，因为大不了就走人嘛，靠实力吃饭，此处不留爷，自有留爷处。这个时候只需要专心学习技术而已，相反可能更简单。如果这个公司看你不顺眼，无非就是因为你的技术产出不满足他们的预期，那么要么提升技术，要不找一个需要你的技术的公司就好，不用跪舔，当然其实也是因为跪舔一点用都没有。</p><p>
《软技能》那本书讲的很好，你可以想象把自己的人生当作一个公司来运转。你给别的公司打工的时候，就像是外包公司接业务一样，去工作的公司不过是这个外包公司的一个合作伙伴而已。只有发展出来更多的潜在合作伙伴，你自己的公司命脉才不会被人抓在手里随意揉搓。另外，大家也知道，公司业务如果太单一，那么也容易在这个行业不景气的时候死在这个寒冬里面。所以还应该适当的去多发展其他的业务方向，例如那本书里面提到的写书，炒股等等。</p></content></item><item><title>HTTPS SNI Host and Envoy</title><link>https://wdicc.com/https-sni-host-and-envoy/</link><pubDate>Sun, 14 Feb 2021 19:24:36 +0800</pubDate><guid>https://wdicc.com/https-sni-host-and-envoy/</guid><description>TLS handshake TLS 握手之前需要先 TCP 三次握手，之后就是正式的 Client hello, Server hello, Cert key exchange 等等正常的 TLS 握手动作了。这期间会决定使用</description><content type="text/html" mode="escaped"><div id="outline-container-headline-1" class="outline-3"><h3 id="headline-1">
TLS handshake</h3><div id="outline-text-headline-1" class="outline-text-3"><p>
TLS 握手之前需要先 TCP 三次握手，之后就是正式的 Client hello, Server hello, Cert key exchange 等等正常的 TLS 握手动作了。这期间会决定使用的加密版本，协商用来对称加密的密钥等。Cloudflare<a href="https://www.cloudflare.com/zh-cn/learning/ssl/what-happens-in-a-tls-handshake/">这篇文章</a>似乎讲的很清楚。</p></div></div><div id="outline-container-headline-2" class="outline-3"><h3 id="headline-2">
HTTP2</h3><div id="outline-text-headline-2" class="outline-text-3"><p>
http2 并不是必须使用 https 部署。但是因为主流浏览器都只支持基于 https 的 http2，所以如果服务是面向浏览器的，那还是应该使用 https。<a href="https://imququ.com/post/protocol-negotiation-in-http2.html">这篇文章</a>讲的很好。</p><p>
我常遇到的一个问题是，会有用户把 plain 的 http2 的请求发给只支持 https 的服务器。这个时候的表现是请求等一段时间会超时。服务器端那边能看到<code class="verbatim">"PRI * HTTP/2.0" 400</code> 这样的错误信息。这是因为客户端期待通过 Magic 桢完成 http2 协商，但是服务器端认为是错误的请求，所以返回 400。</p><p>
对于这样的错误，一般是设置通过 https 方式访问就好。例如 grpcurl 不要用那个<code class="verbatim">-plaintext</code> 参数，envoy 使用 tls transport 等。</p></div></div><div id="outline-container-headline-3" class="outline-3"><h3 id="headline-3">
Host</h3><div id="outline-text-headline-3" class="outline-text-3"><p>
一个 ip 和端口下面提供多个网站的服务，这个很常见了。那么用户连接过来的时候是如何区分的呢？http 协议里面，规定了可以使用 Host 这个 header 来制定需要访问的主机是哪个。例如下面这个请求。如果不指定 Host，一般会给返回默认主机的内容。</p><div class="src src-text"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text">> GET / HTTP/2
> Host: www.qunar.com
> User-Agent: curl/7.64.1
> Accept: */*</code></pre></div></div></div></div><div id="outline-container-headline-4" class="outline-3"><h3 id="headline-4">
SNI</h3><div id="outline-text-headline-4" class="outline-text-3"><p>
如果一个 ip 和端口为多个域名提供 https 服务，那用户发起 tls 握手的时候，也得知道给用户返回哪个域名的证书才行（当然你也可以用通配符证书）。因为这个时候还没有握手成功，http 协议规定的那些都还没发生呢，所以 Host header 是不能用了。<a href="https://zh.wikipedia.org/wiki/%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%90%8D%E7%A7%B0%E6%8C%87%E7%A4%BA">SNI</a> 作为 tls 的一个扩展就是解决这个问题的。</p><p>
SNI 数据做为握手数据是明文发送的，当然现在也有 ESNI 但是还没有普及。服务器根据 SNI 数据返回对应的证书。</p></div></div><div id="outline-container-headline-5" class="outline-3"><h3 id="headline-5">
Host + SNI?</h3><div id="outline-text-headline-5" class="outline-text-3"><p>
上面提到这两个有各自的用途，所以你会发现，他们对应的域名其实可以不一样。例如你知道一个服务器上面同时为几个域名提供服务，那大概你可以 TLS 握手使用一个域名，实际 http 协议使用另一个域名。例如下面这个。</p><div class="src src-text"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text">curl -I -v --http2 -H 'Host: www.qunar.com' https://qunar.com
* Trying 117.122.224.176...
* TCP_NODELAY set
* Connected to qunar.com (117.122.224.176) port 443 (#0)
* ALPN, offering h2
* ALPN, offering http/1.1
* successfully set certificate verify locations:
* CAfile: /etc/ssl/cert.pem
CApath: none
* TLSv1.2 (OUT), TLS handshake, Client hello (1):
* TLSv1.2 (IN), TLS handshake, Server hello (2):
* TLSv1.2 (IN), TLS handshake, Certificate (11):
* TLSv1.2 (IN), TLS handshake, Server key exchange (12):
* TLSv1.2 (IN), TLS handshake, Server finished (14):
* TLSv1.2 (OUT), TLS handshake, Client key exchange (16):
* TLSv1.2 (OUT), TLS change cipher, Change cipher spec (1):
* TLSv1.2 (OUT), TLS handshake, Finished (20):
* TLSv1.2 (IN), TLS change cipher, Change cipher spec (1):
* TLSv1.2 (IN), TLS handshake, Finished (20):
* SSL connection using TLSv1.2 / ECDHE-RSA-CHACHA20-POLY1305
* ALPN, server accepted to use h2
* Server certificate:
* subject: C=CN; ST=Beijing; L=Beijing; O=\U5317\U4EAC\U8DA3\U62FF\U4FE1\U606F\U6280\U672F\U6709\U9650\U516C\U53F8; CN=qunar.com
* start date: Nov 15 10:36:04 2019 GMT
* expire date: Feb 8 23:59:59 2022 GMT
* subjectAltName: host "qunar.com" matched cert's "qunar.com"
* issuer: C=BE; O=GlobalSign nv-sa; CN=GlobalSign RSA OV SSL CA 2018
* SSL certificate verify ok.
* Using HTTP2, server supports multi-use
* Connection state changed (HTTP/2 confirmed)
* Copying HTTP/2 data in stream buffer to connection buffer after upgrade: len=0
* Using Stream ID: 1 (easy handle 0x7f8cfd00f800)
> HEAD / HTTP/2
> Host: www.qunar.com
> User-Agent: curl/7.64.1
> Accept: */*
>
* Connection state changed (MAX_CONCURRENT_STREAMS == 128)!
&lt; HTTP/2 200
HTTP/2 200
&lt; date: Sun, 21 Feb 2021 06:30:45 GMT
date: Sun, 21 Feb 2021 06:30:45 GMT
&lt; content-type: text/html; charset=utf-8
content-type: text/html; charset=utf-8
&lt; content-length: 206076
content-length: 206076
&lt; set-cookie: QN1=00001480306c2f4420a844ed; Expires=Thu, 31-Dec-37 23:55:55 GMT; Max-Age=31536000; Domain=qunar.com; Path=/
set-cookie: QN1=00001480306c2f4420a844ed; Expires=Thu, 31-Dec-37 23:55:55 GMT; Max-Age=31536000; Domain=qunar.com; Path=/
&lt; x-powered-by: QXF/1.1.1
x-powered-by: QXF/1.1.1
&lt; cache-control: no-cache
cache-control: no-cache
&lt; expires: 0
expires: 0
&lt; etag: W/"9sjEldYHMh6Ne03Bxy1MFA=="
etag: W/"9sjEldYHMh6Ne03Bxy1MFA=="
&lt; vary: Accept-Encoding
vary: Accept-Encoding
&lt; server: QWS/1.0
server: QWS/1.0
&lt; req-id: 00001480306c2f4420a844ed
req-id: 00001480306c2f4420a844ed
&lt; p3p: policyref="/w3c/p3p.xml", CP="CUR ADM OUR NOR STA NID"
p3p: policyref="/w3c/p3p.xml", CP="CUR ADM OUR NOR STA NID"
&lt; set-cookie: QN300=organic; Domain=qunar.com; Max-Age=630720000; Path=/
set-cookie: QN300=organic; Domain=qunar.com; Max-Age=630720000; Path=/
&lt; set-cookie: QN99=7459; Domain=qunar.com; expires=Thu, 31-Dec-2081 23:55:55 GMT;Max-Age=630720000; Path=/
set-cookie: QN99=7459; Domain=qunar.com; expires=Thu, 31-Dec-2081 23:55:55 GMT;Max-Age=630720000; Path=/
&lt; cache-status: BYPASS
cache-status: BYPASS
&lt;
* Connection #0 to host qunar.com left intact
* Closing connection 0</code></pre></div></div><p>
可以看到<code class="verbatim">* subjectAltName: host "qunar.com" matched cert's "qunar.com"</code> 这里对应的域名是 qunar.com。后面<code class="verbatim">Host: www.qunar.com</code> 是另外一个。可以比较下使用和不使用 host 的返回结果。</p></div></div><div id="outline-container-headline-6" class="outline-3"><h3 id="headline-6">
Envoy</h3><div id="outline-text-headline-6" class="outline-text-3"><p>
Enovy 里面如果想要配置一个 cluster 是 http2 的话，可以参考下面的例子。</p><div class="src src-yaml"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="w"/><span class="nt">transport_socket</span><span class="p">:</span><span class="w"/><span class="w"/><span class="nt">name</span><span class="p">:</span><span class="w"/><span class="l">envoy.transport_sockets.tls</span><span class="w"/><span class="w"/><span class="nt">typed_config</span><span class="p">:</span><span class="w"/><span class="w"/><span class="nt">"@type":</span><span class="l">type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext</span><span class="w"/><span class="w"/><span class="nt">sni</span><span class="p">:</span><span class="w"/><span class="l">abc.com</span><span class="w"/><span class="w"/><span class="nt">common_tls_context</span><span class="p">:</span><span class="w"/><span class="w"/><span class="nt">alpn_protocols</span><span class="p">:</span><span class="w"/><span class="p">[</span><span class="w"/><span class="s2">"h2,http/1.1"</span><span class="w"/><span class="p">]</span><span class="w"/><span class="w"/><span class="nt">validation_context</span><span class="p">:</span><span class="w"/><span class="w"/><span class="nt">match_subject_alt_names</span><span class="p">:</span><span class="w"/><span class="w"/>-<span class="nt">exact</span><span class="p">:</span><span class="w"/><span class="s2">"abc.com"</span><span class="w"/><span class="w"/><span class="nt">trusted_ca</span><span class="p">:</span><span class="w"/><span class="w"/><span class="nt">filename</span><span class="p">:</span><span class="w"/><span class="l">/etc/ssl/cert.pem</span></code></pre></div></div><p>
这个配置里面，<code class="verbatim">envoy.transport_sockets.tls</code> 使用 tls 连接目标服务器，要不然会遇到上面提到的<code class="verbatim">PRI * 400</code> 那个错误。<code class="verbatim">sni: abc.com</code> 用来告诉服务器和哪个域名做 TLS 握手。<code class="verbatim">validation_context</code> 部分指定如何做证书校验，如果没有这部分的话，envoy 不会做证书校验，就是说即使对方返回的证书并不是那个 SNI 指定的也不管。</p></div></div></content></item><item><title>Year in Review 2020</title><link>https://wdicc.com/year-in-review-2020/</link><pubDate>Mon, 04 Jan 2021 19:27:00 +0800</pubDate><guid>https://wdicc.com/year-in-review-2020/</guid><description>2020 ends with the pandemic. WFH is the new normal. Many thanks to my company, I was staying at home for most of last year. Family My daughter was born last year. Here name is Yoyo. Thanks for the WFH, that I could stay with her most of the time.</description><content type="text/html" mode="escaped"><p>
2020 ends with the pandemic. WFH is the new normal. Many thanks to my company, I was staying at home for most of last year.</p><div id="outline-container-headline-1" class="outline-3"><h3 id="headline-1">
Family</h3><div id="outline-text-headline-1" class="outline-text-3"><p>My daughter was born last year. Here name is Yoyo. Thanks for the WFH, that I could stay with her most of the time. Sometimes it was enjoyable to watch her grow up. Last winter, my wife and I have to go to the hospital to do regular checks every 2 or 3 days in the morning very early. It was tough for us. But anyway, Yoyo joins the family. She looks smart and adorable. I hope she will grow up soon. So we can travel over the world. I can't wait to through her into the clean water in the Maldives and see the smiling face from here.</p><p>
My wife and I will be entering our 16 years marriage this year. I hope she and Yoyo will be happy every day, like what I said in the blog's subtitle.</p></div></div><div id="outline-container-headline-2" class="outline-3"><h3 id="headline-2">
Works</h3><div id="outline-text-headline-2" class="outline-text-3"><p>Last year I left the BrilliantAero and joined Tubi, a small(?) company in the US. I worked in the Beijing office as SRE. It was a challenge for me that I need to learn lots of things, especially English. I think my English improved a lot during last year. I also learned a lot about AWS, Terraform, Ansible, and Infrastructure as Code.</p><p>
We discuss topics on Github issues. I learned about how to review codes, how to cooperate with colleagues on Github. I'm immensely enjoying the time I work from home. No one will disturb you. You can work immersively.</p></div></div><div id="outline-container-headline-3" class="outline-3"><h3 id="headline-3">
Readings</h3><div id="outline-text-headline-3" class="outline-text-3"><p>I begin to read some novels write for youth, so that I can persist in reading them.</p><p>
Booklists:</p><ul><li><p>His Dark Materials: I finished the book before the last season of the TV show was released.</p></li><li><p>The healer</p></li><li><p>In the Middle of nowhere</p></li><li><p>东野圭吾：信</p></li><li><p>刺杀骑士团长</p></li><li><p>盗梦侦探 Paprika: I read this book after I watched the movie. The book has more details than the film. It's worth reading if you like the film.</p></li><li><p>以色列：一个国家的诞生</p></li><li><p>Kubernetes in Action: It's a great book to learn Kubernetes for beginners.</p></li></ul></div></div><div id="outline-container-headline-4" class="outline-3"><h3 id="headline-4">
English Study</h3><div id="outline-text-headline-4" class="outline-text-3"><p>I have lots of practice during my work now. I finished the Anki deck<a href="https://ankiweb.net/shared/info/1035811674">托福词汇-词以类记(词典完美版)</a> I started in 2019.</p><p>
The quality of the deck for Anki is critical. After finished that deck, I haven't started a new deck yet. I think I will begin the deck for English Grammars. And I also begin to read a book about English Grammars. I found I almost forget what I have learned about Grammars in the colleges.</p></div></div><div id="outline-container-headline-5" class="outline-3"><h3 id="headline-5">
TV</h3><div id="outline-text-headline-5" class="outline-text-3"><p>
I have watched a lots of TV shows, list some of them(also reccommand):</p><ul><li><p>Homeland</p></li><li><p>13 Reasons Why</p></li><li><p>Tales From The Loop</p></li><li><p>Lost in Space(2018)</p></li><li><p>Altered Carbon</p></li><li><p>The Expanse</p></li><li><p>Chilling Advanture of Sabrina</p></li><li><p>His Dark Meterials</p></li><li><p>Mandalorian</p></li><li><p>The Boys</p></li><li><p>Raised By Wolves</p></li><li><p>Westworld</p></li><li><p>The Witcher</p></li><li><p>The Umbrella Academy</p></li><li><p>kindom</p></li><li><p>Alice in Borderland</p></li><li><p>Dark</p></li><li><p>Queens Gambit</p></li><li><p>Devs</p></li><li><p>Chernobyl</p></li></ul></div></div></content></item><item><title>How to Write a Git Commit Message</title><link>https://wdicc.com/how-to-write-a-git-commit-message/</link><pubDate>Fri, 01 Jan 2021 09:44:57 +0800</pubDate><guid>https://wdicc.com/how-to-write-a-git-commit-message/</guid><description>原文这里: https://chris.beams.io/posts/git-commit/, 只记录下关键内容。 The seven rules of a great Git commit message 举个例子： Summarize changes in around 50 characters or less More detailed explanatory text, if necessary. Wrap it to about 72 characters or</description><content type="text/html" mode="escaped"><p>原文这里:<a href="https://chris.beams.io/posts/git-commit/,">https://chris.beams.io/posts/git-commit/,</a> 只记录下关键内容。</p><div id="outline-container-headline-1" class="outline-2"><h2 id="headline-1">
The seven rules of a great Git commit message</h2><div id="outline-text-headline-1" class="outline-text-2"><p>
举个例子：</p><pre class="example">
Summarize changes in around 50 characters or less
More detailed explanatory text, if necessary. Wrap it to about 72
characters or so. In some contexts, the first line is treated as the
subject of the commit and the rest of the text as the body. The
blank line separating the summary from the body is critical (unless
you omit the body entirely); various tools like `log`, `shortlog`
and `rebase` can get confused if you run the two together.
Explain the problem that this commit is solving. Focus on why you
are making this change as opposed to how (the code explains that).
Are there side effects or other unintuitive consequences of this
change? Here's the place to explain them.
Further paragraphs come after blank lines.
- Bullet points are okay, too
- Typically a hyphen or asterisk is used for the bullet, preceded
by a single space, with blank lines in between, but conventions
vary here
If you use an issue tracker, put references to them at the bottom,
like this:
Resolves: #123
See also: #456, #789</pre><div id="outline-container-headline-2" class="outline-3"><h3 id="headline-2">
1. 用空行把消息标题和消息内容分开</h3><div id="outline-text-headline-2" class="outline-text-3"><p>
git 命令的帮助文档这么写：</p><blockquote><p>Though not required, it’s a good idea to begin the commit message with a single short (less than 50 character) line summarizing the change, followed by a blank line and then a more thorough description. The text up to the first blank line in a commit message is treated as the commit title, and that title is used throughout Git. For example, Git-format-patch(1) turns a commit into email, and it uses the title on the Subject line and the rest of the commit in the body.</p></blockquote><p>
Firstly, not every commit requires both a subject and a body. Sometimes a single line is fine, especially when the change is so simple that no further context is necessary. For example:</p><p>
首先，不是所有的提交信息都需要有消息标题和消息内容。有时候只有一行标题也是可以的。例如：</p><pre class="example">
Fix typo in introduction to user guide</pre><p>
不用写过多的内容；如果看这个消息的人想要知道具体的 typo 是啥，他可以看看那个提交里面的包含的修改。使用<code>git show</code> ，<code>git diff</code> ，<code>git log -p</code> 都可以。</p><p>
如果你是从命令行提交这样的信息，可以使用<code>-m</code> 参数：</p><pre class="example">
$ git commit -m"Fix typo in introduction to user guide"</pre><p>
当然，如果一个提交里面包含需要说明的，你可以在消息内容里面包含更多信息。例如：</p><pre class="example">
Derezz the master control program
MCP turned out to be evil and had become intent on world domination.
This commit throws Tron's disc into MCP (causing its deresolution)
and turns it back into a chess game.</pre><p>
包含消息内容的提交信息不太好用<code>-m</code> 参数搞定。最好使用一个文本编辑器来做。如果你还没给命令行的 git 设置好编辑器，那可以去看看 Pro Git。</p><p>
不管哪种情况，分开的好处会体现在浏览提交日志的时候。这里有个例子：</p><pre class="example">
$ git log
commit 42e769bdf4894310333942ffc5a15151222a87be
Author: Kevin Flynn &lt;kevin@flynnsarcade.com>
Date: Fri Jan 01 00:00:00 1982 -0200
Derezz the master control program
MCP turned out to be evil and had become intent on world domination.
This commit throws Tron's disc into MCP (causing its deresolution)
and turns it back into a chess game.</pre><p>
使用<code>git log --oneline</code> 只输出消息标题。</p><pre class="example">
$ git log --oneline
42e769 Derezz the master control program</pre><p>
或者使用<code>git shortlog</code> 针对提交用户分组，依然只显示消息标题。</p><pre class="example">
$ git shortlog
Kevin Flynn (1):
Derezz the master control program
Alan Bradley (1):
Introduce security program "Tron"
Ed Dillinger (3):
Rename chess program to "MCP"
Modify chess program
Upgrade chess program
Walter Gibbs (1):
Introduce protoype chess program</pre><p>
Git 里面还有一些别的东西也是依赖那个空行的。</p></div></div><div id="outline-container-headline-3" class="outline-3"><h3 id="headline-3">
2. 消息标题限制在 50 个字符内</h3><div id="outline-text-headline-3" class="outline-text-3"><p>
50 个字符不是死限制，尽量控制到这个数量内来让消息标题更易读，同时也强迫写的人去思考如何更准确的描述发生了什么。</p><pre class="example">
提示：如果你发现你总结起来比较费劲，那可能是因为你一次提交了太多内容了。尽量做到原子提交吧（不同话题分开提交）。</pre><p>
当超过 50 个字符的时候，GitHub UI 会提示你。</p><p>
[图1]</p><p>
会只显示 72 个字符加省略号。</p><p>
[图2]</p><p>
所以 50 个字符最佳，但是不要超过 72 个。</p></div></div><div id="outline-container-headline-4" class="outline-3"><h3 id="headline-4">
3. 标题行首字母大写</h3><div id="outline-text-headline-4" class="outline-text-3"><p>
这个看这个挺简单，就是所有的提交信息的标题行首字母大写。</p><p>
例如：</p><pre class="example">
Accelerate to 88 miles per hour</pre><p>
而不要用这个：</p><pre class="example">
accelerate to 88 miles per hour</pre></div></div><div id="outline-container-headline-5" class="outline-3"><h3 id="headline-5">
4. 标题行句尾不要加句号。</h3><div id="outline-text-headline-5" class="outline-text-3"><p>
标题行里面句尾的标点不是必须的，尤其在还需要保持 50 个字符以内的时候。</p><p>
例子：</p><pre class="example">
Open the pod bay doors</pre><p>
而不要这样：</p><pre class="example">
Open the pod bay doors.</pre></div></div><div id="outline-container-headline-6" class="outline-3"><h3 id="headline-6">
5. 标题行里面使用祈使语气</h3><div id="outline-text-headline-6" class="outline-text-3"><p>
祈使语气指的是说话或者写作就像是下命令或者指导一样。例子</p><pre class="example">
Clean your room
Close the door
Take out the trash</pre><p>
这 7 条规则本身使用的就是祈使语气。</p><p>
祈使语气听着会有点粗鲁，这也是为啥不常用的原因。但是这个用来做提交信息的标题栏很完美。一个原因就是 git 本身产生的一些提交里面使用的就是祈使语气。</p><p>
例如，<code>git merge</code> 产生的默认提交信息如下：</p><pre class="example">
Merge branch 'myfeature'</pre><p>
以及使用<code>git revert</code> 的时候：</p><pre class="example">
Revert "Add the thing with the stuff"
This reverts commit cc87791524aedd593cff5a74532befe7ab69ce9d.</pre><p>
或者在 GitHub 上面的 pull request 点击 Merge 按钮的时候：</p><pre class="example">
Merge pull request #123 from someuser/somebranch</pre><p>
所以当你在自己的提交里面使用祈使语气的时候，其实也是跟随了 Git 的思路。例如：</p><pre class="example">
Refactor subsystem X for readability
Update getting started documentation
Remove deprecated methods
Release version 1.0.0</pre><p>
这么写可能开始的时候会感觉有点尴尬。说话的时候使用祈使语气一般是用来汇报事实。这也是为什么阅读提交信息的时候一般会看到下面这样的情况：</p><pre class="example">
Fixed bug with Y
Changing behavior of X</pre><p>
有些时候提交信息会是内容的描述：</p><pre class="example">
More fixes for broken stuff
Sweet new API methods</pre><p>
这里有一个简单的规则。</p><p><strong><strong>一个好的 git 提交标题行总是可以很好的填入到下面的句式里面：</strong></strong></p><pre class="example">
If applied, this commit will +your subject line here+</pre><p>
例如：</p><pre class="example">
If applied, this commit will refactor subsystem X for readability
If applied, this commit will update getting started documentation
If applied, this commit will remove deprecated methods
If applied, this commit will release version 1.0.0
If applied, this commit will merge pull request #123 from user/branch</pre><p>
对于其他非祈使语气的例子就不太符合这个句式：</p><pre class="example">
If applied, this commit will fixed bug with Y
If applied, this commit will changing behavior of X
If applied, this commit will more fixes for broken stuff
If applied, this commit will sweet new API methods</pre><p>
注意：只需要在提交消息标题行使用祈使语气。对于消息内容可以随意一点。</p></div></div><div id="outline-container-headline-7" class="outline-3"><h3 id="headline-7">
6. 提交信息内容每 72 个字符折行</h3><div id="outline-text-headline-7" class="outline-text-3"><p>
Git 不会自动折行。当你提交的时候，需要自己设置好边缘，然后手动折行。</p><p>
建议控制为 72 个字符，以便 git 有足够的空间处理缩进并保持所有行都在 80 个字符以内。</p><p>
好的文本编辑器可以帮忙处理这个。vim 里面很容易配置当你在写提交信息的时候自动 72 个字符折行。然而传统上 IDE 们都做的比较差（不过在最近的一些版本里面 IntelliJ IDEA 做的比较好了）。</p></div></div><div id="outline-container-headline-8" class="outline-3"><h3 id="headline-8">
7. 在消息内容里面解释做了什么和为什么，而不是怎么做</h3><div id="outline-text-headline-8" class="outline-text-3"><p>
这个比特币核心代码里面的提交是个很好的例子，解释了做了什么变更以及为什么这么做：</p><pre class="example">
commit eb0b56b19017ab5c16c745e6da39c53126924ed6
Author: Pieter Wuille &lt;pieter.wuille@gmail.com>
Date: Fri Aug 1 22:57:55 2014 +0200
Simplify serialize.h's exception handling
Remove the 'state' and 'exceptmask' from serialize.h's stream
implementations, as well as related methods.
As exceptmask always included 'failbit', and setstate was always
called with bits = failbit, all it did was immediately raise an
exception. Get rid of those variables, and replace the setstate
with direct exception throwing (which also removes some dead
code).
As a result, good() is never reached after a failure (there are
only 2 calls, one of which is in tests), and can just be replaced
by !eof().
fail(), clear(n) and exceptions() are just never called. Delete
them.</pre><p>
看看这个提交，想想作者提交的上下文信息为其他维护人员和未来的维护人员省了多少时间。如果他没有写，很可能就永远丢失了。</p><p>
大部分情况下，你可以不写变更是怎么做的。代码本身就是解释（如果代码确实比较复杂，那应该添加代码注释说明）。主要是说清楚为啥做这个变更，变更 以前是怎么个情况，以及有什么问题，现在是怎么个情况，以及你为啥用这样的方式解决。</p><p>
未来的维护人员包括你自己都会很感谢你。</p></div></div></div></div></content></item><item><title>English Learning</title><link>https://wdicc.com/english-learning/</link><pubDate>Sat, 26 Dec 2020 17:48:51 +0800</pubDate><guid>https://wdicc.com/english-learning/</guid><description>我大概算是从 2019 年中开始算是比较多的花了一些时间在英语学习上面，标志是开始认真的去背单词了。在此之前顶</description><content type="text/html" mode="escaped"><p>我大概算是从 2019 年中开始算是比较多的花了一些时间在英语学习上面，标志是开始认真的去背单词了。在此之前顶多算是一点零散的学习，或者都算不上什么学习。这里多少总结下自己的学习过程。</p><div id="outline-container-headline-1" class="outline-2"><h2 id="headline-1">
使用 Anki 等符合记忆曲线的工具帮助记忆单词</h2><div id="outline-text-headline-1" class="outline-text-2"><p>
背单词是学习英语必经之路，宣传不用背单词就可以提升英语能力的都是在耍流氓。而单词学习又是一个很枯燥也基本没有捷径的事情，所以如果真的想提升自己的英语能力，先找一个能让自己坚持下来的单词记忆方式吧。</p><p>
在使用 Anki 之前也使用过一些别的，例如使用时间比较长的百词斩，界面以及单词卡片做的都很完美，但是对于记忆曲线却并不友好。人们对于单词记忆实际是有区别的，一些单词可能很容易记住，一些可能怎么都记不住。所以记忆过程中是需要分门别类的来设置不同的 review 时间的。Anki 按照记忆曲线会合理安排单词的复习时间，让记住的单词出现的频率降低，记不住的单词出现频率变高。</p><p>
关于 Anki 我有<a href="/use-anki-to-leaning-english">另外一篇文章</a>有详细一点的说明，这里就不多说了。</p></div></div><div id="outline-container-headline-2" class="outline-2"><h2 id="headline-2">
营造沉浸环境</h2><div id="outline-text-headline-2" class="outline-text-2"><p>
沉浸环境很重要，语言学习中听说读写都需要多锻炼才能有提升。国内缺少交流环境，尤其对于已经毕业的人，除非在外企工作，或者出国旅行，要不很少会遇到周围都是英语的环境。这个环境需要自己营造，可以尝试的方式比如：</p><ul><li><p>把所有自己使用的系统设置为英文。比如我的电脑，手机，电视盒子等都是英文系统。</p></li><li><p>去读英文的文档。开始可以读自己工作相关的，这样会毕竟容易上手，慢慢到各种新闻等。</p></li><li><p>看各种英文的视频，听不懂可以打开字幕看，还可以减速听，暂停反复听。</p></li><li><p>听英文的播客，这个没有字幕可以看，但是可以调慢速度听。对于有声的资料（视频和播客），可以在路上，睡觉前，做家务等的时候听。</p></li><li><p>看英语的新闻。</p></li><li><p>看英语小说。找到合适的小说很重要，可以先从针对青少年的小说看起。实在看不下去就看针对更年轻用户的。</p></li></ul><p>每个人的基础水平不一样，所以上面的这些事情量力而行，一般建议是比如读的文章里面的生词量维持在一个自己可以读下去，又不觉得恶心的比例。毕竟不能坚持下去的话，说什么都没用了。</p><p>
我手机上面没有抖音微博这些软件，微信也把之前加过的大部分群都退了，同时也关闭了消息提醒。所以我的手机平时非常安静，即使在我想打发时间的时候，也只能打开 Google News，Reddit 等软件看，这也算是另外一种让自己沉浸的方法吧。</p></div></div><div id="outline-container-headline-3" class="outline-2"><h2 id="headline-3">
重复，不断重复</h2><div id="outline-text-headline-3" class="outline-text-2"><p>
只是浮光掠影的看看听听的话，学习速度会比较慢，因为短期记忆很容易丢失。重复会让这个记忆变的更可靠，其实背单词就是这样的。我曾经一部美剧看过 3-5 遍。看到后面感觉角色说什么都能听懂了。我也看过很多讲英语学习课程，都非常强调重复。现在看看其实以前学校老师让大家背诵课文，也应该是类似的道理。</p><p>
英语语境里面，很多时候说话会有语调，吞音和连读。这些只有在不断的重复下去体会和把握一句话的重点。开始听的时候可能会觉得每个词都需要听明白，自己才能理解一句话。但是听多了就会发现，其实并不需要这样，结合语境上下文只需要抓住几个词就能明白。这些在大量的练习之后才能找准。</p><p>
另外还有一个提升的方式就是跟读。找一段自己喜欢的场景对话，模仿里面角色的发音语调等，一样是不断重复多加练习培养自己的口语。</p></div></div><div id="outline-container-headline-4" class="outline-2"><h2 id="headline-4">
坚持</h2><div id="outline-text-headline-4" class="outline-text-2"><p>
我自己觉得语言学习没有速成的方法，需要持之以恒的训练自己，慢慢提升。例如使用 Anki 记忆单词的时候，如果今天的单词不 review 完毕，这些单词就需要明天 review，然后明天还有明天的单词需要 review，这样就会发现一旦断开一天，接下来就更难了。所以我从来不敢让 Anki 的 review 断开，即使在旅行度假，我每天一早都会先完成功课，或者就是在各种等人，发呆的间隙把 review 完成。</p><p>
一定要记住，能坚持是最重要的。一旦坚持不下去，即使定了绝美的计划，即使交了很多学费，买了最好的辅助学习工具，也是一场空。所以哪怕今天只是完成了 review 而没有学习新的内容，那也比什么都不做强。</p></div></div></content></item><item><title>Kustomize Plugins</title><link>https://wdicc.com/kustomize-plugins/</link><pubDate>Sat, 12 Sep 2020 02:35:02 +0800</pubDate><guid>https://wdicc.com/kustomize-plugins/</guid><description>Kustomize support us to write plugins by using python, shell scripts, or any language that can create executables in your system. Here is the doc.
There are two types of plugins, generators and transformers. Both of the plugin executable will receive the definition for it as arg[1]. And for transformers, it will receive all the other resource definitions also, so you can do transform works.</description><content type="text/html" mode="escaped"><p>Kustomize support us to write plugins by using python, shell scripts, or any language that can create executables in your system. Here is the<a href="https://kubernetes-sigs.github.io/kustomize/guides/plugins/execpluginguidedexample/">doc</a>.</p><p>
There are two types of plugins, generators and transformers. Both of the plugin executable will receive the definition for it as arg[1]. And for transformers, it will receive all the other resource definitions also, so you can do transform works.</p><p>
The<code class="verbatim">apiVersion</code> in the plugin definition yaml file determines the location of the executable. So if you set it to<code class="verbatim">apiVersion: wd/v1</code> , then kustomize will try to find the plugin at these places:</p><ul><li><p>(''; homed in $KUSTOMIZE_PLUGIN_HOME)</p></li><li><p>('kustomize/plugin'; homed in $XDG_CONFIG_HOME)</p></li><li><p>('<em>Users/wd</em>.config/kustomize/plugin'; homed in default value of $XDG_CONFIG_HOME)</p></li><li><p>('/Users/wd/kustomize/plugin'; homed in home directory)</p></li></ul><p>You can put your plugin at these directories. For me, I'd like to put it in<code class="verbatim">(pwd)/kustomize/plugin/</code>, and then run kustomize<code class="verbatim">XDG_CONFIG_HOME=$(pwd) kustomize build --enable_alpha_plugins apps/base/nginx/</code> .</p></content></item><item><title>Using Cert-manager + rout53 With Kiam</title><link>https://wdicc.com/use-certmanager-with-kiam/</link><pubDate>Thu, 10 Sep 2020 10:59:41 +0800</pubDate><guid>https://wdicc.com/use-certmanager-with-kiam/</guid><description>As described here: https://cert-manager.io/docs/configuration/acme/dns01/route53/#set-up-an-iam-role, First you need to create a role, for example `dns-manager`.
{ &amp;#34;Version&amp;#34;: &amp;#34;2012-10-17&amp;#34;, &amp;#34;Statement&amp;#34;: [ { &amp;#34;Effect&amp;#34;: &amp;#34;Allow&amp;#34;, &amp;#34;Action&amp;#34;: &amp;#34;route53:GetChange&amp;#34;, &amp;#34;Resource&amp;#34;: &amp;#34;arn:aws:route53:::change/*&amp;#34; }, { &amp;#34;Effect&amp;#34;: &amp;#34;Allow&amp;#34;, &amp;#34;Action&amp;#34;: [ &amp;#34;route53:ChangeResourceRecordSets&amp;#34;, &amp;#34;route53:ListResourceRecordSets&amp;#34; ], &amp;#34;Resource&amp;#34;: &amp;#34;arn:aws:route53:::hostedzone/*&amp;#34; }, { &amp;#34;Effect&amp;#34;: &amp;#34;Allow&amp;#34;, &amp;#34;Action&amp;#34;: &amp;#34;route53:ListHostedZonesByName&amp;#34;, &amp;#34;Resource&amp;#34;: &amp;#34;*&amp;#34; } ] } You can replace the * in arn:aws:route53:::hostedzone/* with a specific zone id.</description><content type="text/html" mode="escaped"><p>
As described here:<a href="https://cert-manager.io/docs/configuration/acme/dns01/route53/#set-up-an-iam-role,">https://cert-manager.io/docs/configuration/acme/dns01/route53/#set-up-an-iam-role,</a> First you need to create a role, for example `dns-manager`.</p><div class="src src-json"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="p">{</span><span class="nt">"Version"</span><span class="p">:</span><span class="s2">"2012-10-17"</span><span class="p">,</span><span class="nt">"Statement"</span><span class="p">:</span><span class="p">[</span><span class="p">{</span><span class="nt">"Effect"</span><span class="p">:</span><span class="s2">"Allow"</span><span class="p">,</span><span class="nt">"Action"</span><span class="p">:</span><span class="s2">"route53:GetChange"</span><span class="p">,</span><span class="nt">"Resource"</span><span class="p">:</span><span class="s2">"arn:aws:route53:::change/*"</span><span class="p">},</span><span class="p">{</span><span class="nt">"Effect"</span><span class="p">:</span><span class="s2">"Allow"</span><span class="p">,</span><span class="nt">"Action"</span><span class="p">:</span><span class="p">[</span><span class="s2">"route53:ChangeResourceRecordSets"</span><span class="p">,</span><span class="s2">"route53:ListResourceRecordSets"</span><span class="p">],</span><span class="nt">"Resource"</span><span class="p">:</span><span class="s2">"arn:aws:route53:::hostedzone/*"</span><span class="p">},</span><span class="p">{</span><span class="nt">"Effect"</span><span class="p">:</span><span class="s2">"Allow"</span><span class="p">,</span><span class="nt">"Action"</span><span class="p">:</span><span class="s2">"route53:ListHostedZonesByName"</span><span class="p">,</span><span class="nt">"Resource"</span><span class="p">:</span><span class="s2">"*"</span><span class="p">}</span><span class="p">]</span><span class="p">}</span></code></pre></div></div><p>
You can replace the<code class="verbatim">*</code> in<code class="verbatim">arn:aws:route53:::hostedzone/*</code> with a specific zone id.</p><div id="outline-container-headline-1" class="outline-3"><h3 id="headline-1">
Use cert-manager with out kiam</h3><div id="outline-text-headline-1" class="outline-text-3"><p>
If you didn't use kiam, you just need to allow the instance(role) to assume this role. Attach this policy to the instance role</p><div class="src src-json"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="p">{</span><span class="nt">"Version"</span><span class="p">:</span><span class="s2">"2012-10-17"</span><span class="p">,</span><span class="nt">"Statement"</span><span class="p">:</span><span class="p">[</span><span class="p">{</span><span class="nt">"Action"</span><span class="p">:</span><span class="s2">"sts:AssumeRole"</span><span class="p">,</span><span class="nt">"Principal"</span><span class="p">:</span><span class="p">{</span><span class="nt">"AWS"</span><span class="p">:</span><span class="err">&lt;role-arn></span><span class="p">},</span><span class="nt">"Effect"</span><span class="p">:</span><span class="s2">"Allow"</span><span class="p">}</span><span class="p">]</span><span class="p">}</span></code></pre></div></div><p>
Replace the<code class="verbatim">&lt;role-arn></code> to the instance role.</p><p>
And then define a<code class="verbatim">ClusterIssuer</code> , and tell the issuer to assume this role to manage the zone.</p><div class="src src-yaml"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"/><span class="l">cert-manager.io/v1</span><span class="w"/><span class="w"/><span class="nt">kind</span><span class="p">:</span><span class="w"/><span class="l">ClusterIssuer</span><span class="w"/><span class="w"/><span class="nt">metadata</span><span class="p">:</span><span class="w"/><span class="w"/><span class="nt">name</span><span class="p">:</span><span class="w"/><span class="l">letsencrypt-prod</span><span class="w"/><span class="w"/><span class="nt">spec</span><span class="p">:</span><span class="w"/><span class="w"/><span class="nt">acme</span><span class="p">:</span><span class="w"/><span class="w"/><span class="l">.... other options</span><span class="w"/><span class="w"/>-<span class="nt">selector</span><span class="p">:</span><span class="w"/><span class="w"/><span class="nt">dnsZones</span><span class="p">:</span><span class="w"/><span class="w"/>-<span class="s2">"example.com"</span><span class="w"/><span class="w"/><span class="nt">dns01</span><span class="p">:</span><span class="w"/><span class="w"/><span class="nt">route53</span><span class="p">:</span><span class="w"/><span class="w"/><span class="nt">region</span><span class="p">:</span><span class="w"/><span class="l">us-east-1</span><span class="w"/><span class="w"/><span class="nt">hostedZoneID</span><span class="p">:</span><span class="w"/><span class="l">DIKER8JEXAMPLE</span><span class="w"/><span class="c"># optional, see policy above</span><span class="w"/><span class="w"/><span class="nt">role</span><span class="p">:</span><span class="w"/><span class="l">arn:aws:iam::YYYYYYYYYYYY:role/dns-manager</span></code></pre></div></div></div></div><div id="outline-container-headline-2" class="outline-3"><h3 id="headline-2">
Use cert-manager with kiam</h3><div id="outline-text-headline-2" class="outline-text-3"><p>
You need to get kiam work first. And then We need to allow kiam server to assume the<code class="verbatim">dns-manager</code> role. Attach this policy to kiam server role.</p><div class="src src-json"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="p">{</span><span class="nt">"Version"</span><span class="p">:</span><span class="s2">"2012-10-17"</span><span class="p">,</span><span class="nt">"Statement"</span><span class="p">:</span><span class="p">[</span><span class="p">{</span><span class="nt">"Action"</span><span class="p">:</span><span class="s2">"sts:AssumeRole"</span><span class="p">,</span><span class="nt">"Principal"</span><span class="p">:</span><span class="p">{</span><span class="nt">"AWS"</span><span class="p">:</span><span class="err">&lt;role-arn></span><span class="p">},</span><span class="nt">"Effect"</span><span class="p">:</span><span class="s2">"Allow"</span><span class="p">}</span><span class="p">]</span><span class="p">}</span></code></pre></div></div><p>
Replace the<code class="verbatim">&lt;role-arn></code> to kiam server role arn.</p><p>
Define a<code class="verbatim">ClusterIssuer</code> , this time we didn't need to assume the role to get it work.</p><div class="src src-yaml"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"/><span class="l">cert-manager.io/v1</span><span class="w"/><span class="w"/><span class="nt">kind</span><span class="p">:</span><span class="w"/><span class="l">ClusterIssuer</span><span class="w"/><span class="w"/><span class="nt">metadata</span><span class="p">:</span><span class="w"/><span class="w"/><span class="nt">name</span><span class="p">:</span><span class="w"/><span class="l">letsencrypt-prod</span><span class="w"/><span class="w"/><span class="nt">spec</span><span class="p">:</span><span class="w"/><span class="w"/><span class="nt">acme</span><span class="p">:</span><span class="w"/><span class="w"/><span class="l">.... other options</span><span class="w"/><span class="w"/>-<span class="nt">selector</span><span class="p">:</span><span class="w"/><span class="w"/><span class="nt">dnsZones</span><span class="p">:</span><span class="w"/><span class="w"/>-<span class="s2">"example.com"</span><span class="w"/><span class="w"/><span class="nt">dns01</span><span class="p">:</span><span class="w"/><span class="w"/><span class="nt">route53</span><span class="p">:</span><span class="w"/><span class="w"/><span class="nt">region</span><span class="p">:</span><span class="w"/><span class="l">us-east-1</span><span class="w"/><span class="w"/><span class="nt">hostedZoneID</span><span class="p">:</span><span class="w"/><span class="l">DIKER8JEXAMPLE</span><span class="w"/><span class="c"># optional, see policy above</span></code></pre></div></div><p>
But we need to add an annotation to cert-manager pod.</p><div class="src src-yaml"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nt">iam.amazonaws.com/role</span><span class="p">:</span><span class="w"/><span class="l">&lt;role-arn></span></code></pre></div></div><p>
Replace the<code class="verbatim">&lt;role-arn></code> to the role arn of<code class="verbatim">dns-manager</code> .</p></div></div></content></item><item><title>Use Ansible Synchronize Module to Sync Files Include Templates</title><link>https://wdicc.com/use-ansible-synchronize-module-to-sync-files-include-templates/</link><pubDate>Mon, 27 Jul 2020 16:34:23 +0800</pubDate><guid>https://wdicc.com/use-ansible-synchronize-module-to-sync-files-include-templates/</guid><description>Inspired by this post, I finally find the way to sync a directory include template files to remote.
Put you files in {{ role_path }}/files/, if you need to put in another directory, please replace all the role_path variable.
- name:&amp;#34;Create temporary directory&amp;#34;local_action:tempfile state=directoryregister:temp_file_path- name:&amp;#34;Find j2 files&amp;#34;local_action:module:findpaths:&amp;#34;{{ role_path }}/files/&amp;#34;patterns:&amp;#34;*.j2&amp;#34;file_type:fileuse_regex:norecurse:yesregister:files_j2- name:&amp;#34;Find normal files&amp;#34;local_action:module:findpaths:&amp;#34;{{ role_path }}/files/&amp;#34;excludes:&amp;#34;*.</description><content type="text/html" mode="escaped"><p>Inspired by<a href="https://stackoverflow.com/questions/51486767/use-ansible-templating-but-rysnc-to-move-files/51612544">this post</a>, I finally find the way to sync a directory include template files to remote.</p><p>
Put you files in<code class="verbatim">{{ role_path }}/files/</code>, if you need to put in another directory, please replace all the<code class="verbatim">role_path</code> variable.</p><div class="src src-yaml"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml">-<span class="nt">name</span><span class="p">:</span><span class="w"/><span class="s2">"Create temporary directory"</span><span class="w"/><span class="w"/><span class="nt">local_action</span><span class="p">:</span><span class="w"/><span class="l">tempfile state=directory</span><span class="w"/><span class="w"/><span class="nt">register</span><span class="p">:</span><span class="w"/><span class="l">temp_file_path</span><span class="w"/><span class="w"/><span class="w"/>-<span class="nt">name</span><span class="p">:</span><span class="w"/><span class="s2">"Find j2 files"</span><span class="w"/><span class="w"/><span class="nt">local_action</span><span class="p">:</span><span class="w"/><span class="w"/><span class="nt">module</span><span class="p">:</span><span class="w"/><span class="l">find</span><span class="w"/><span class="w"/><span class="nt">paths</span><span class="p">:</span><span class="w"/><span class="s2">"{{ role_path }}/files/"</span><span class="w"/><span class="w"/><span class="nt">patterns</span><span class="p">:</span><span class="w"/><span class="s2">"*.j2"</span><span class="w"/><span class="w"/><span class="nt">file_type</span><span class="p">:</span><span class="w"/><span class="l">file</span><span class="w"/><span class="w"/><span class="nt">use_regex</span><span class="p">:</span><span class="w"/><span class="kc">no</span><span class="w"/><span class="w"/><span class="nt">recurse</span><span class="p">:</span><span class="w"/><span class="kc">yes</span><span class="w"/><span class="w"/><span class="nt">register</span><span class="p">:</span><span class="w"/><span class="l">files_j2</span><span class="w"/><span class="w"/><span class="w"/>-<span class="nt">name</span><span class="p">:</span><span class="w"/><span class="s2">"Find normal files"</span><span class="w"/><span class="w"/><span class="nt">local_action</span><span class="p">:</span><span class="w"/><span class="w"/><span class="nt">module</span><span class="p">:</span><span class="w"/><span class="l">find</span><span class="w"/><span class="w"/><span class="nt">paths</span><span class="p">:</span><span class="w"/><span class="s2">"{{ role_path }}/files/"</span><span class="w"/><span class="w"/><span class="nt">excludes</span><span class="p">:</span><span class="w"/><span class="s2">"*.j2"</span><span class="w"/><span class="w"/><span class="nt">file_type</span><span class="p">:</span><span class="w"/><span class="l">file</span><span class="w"/><span class="w"/><span class="nt">use_regex</span><span class="p">:</span><span class="w"/><span class="kc">no</span><span class="w"/><span class="w"/><span class="nt">recurse</span><span class="p">:</span><span class="w"/><span class="kc">yes</span><span class="w"/><span class="w"/><span class="nt">register</span><span class="p">:</span><span class="w"/><span class="l">files_normal</span><span class="w"/><span class="w"/><span class="w"/>-<span class="nt">name</span><span class="p">:</span><span class="w"/><span class="s2">"Ensure directory exists"</span><span class="w"/><span class="w"/><span class="nt">local_action</span><span class="p">:</span><span class="w"/><span class="w"/><span class="nt">module</span><span class="p">:</span><span class="w"/><span class="l">file</span><span class="w"/><span class="w"/><span class="nt">path</span><span class="p">:</span><span class="w"/><span class="s2">"{{ item.path | replace(role_path + '/files', temp_file_path.path) | dirname }}"</span><span class="w"/><span class="w"/><span class="nt">state</span><span class="p">:</span><span class="w"/><span class="l">directory</span><span class="w"/><span class="w"/><span class="nt">with_items</span><span class="p">:</span><span class="w"/><span class="w"/>-<span class="s2">"{{ files_j2.files }}"</span><span class="w"/><span class="w"/>-<span class="s2">"{{ files_normal.files }}"</span><span class="w"/><span class="w"/><span class="w"/>-<span class="nt">name</span><span class="p">:</span><span class="w"/><span class="s2">"Copy templates files"</span><span class="w"/><span class="w"/><span class="nt">local_action</span><span class="p">:</span><span class="w"/><span class="w"/><span class="nt">module</span><span class="p">:</span><span class="w"/><span class="l">template</span><span class="w"/><span class="w"/><span class="nt">src</span><span class="p">:</span><span class="w"/><span class="s2">"{{ item.path }}"</span><span class="w"/><span class="w"/><span class="nt">mode</span><span class="p">:</span><span class="w"/><span class="s2">"preserve"</span><span class="w"/><span class="w"/><span class="nt">dest</span><span class="p">:</span><span class="w"/><span class="s2">"{{ item.path | replace(role_path + '/files', temp_file_path.path) | regex_replace('.j2$', '') }}"</span><span class="w"/><span class="w"/><span class="nt">with_items</span><span class="p">:</span><span class="w"/><span class="s2">"{{ files_j2.files }}"</span><span class="w"/><span class="w"/><span class="w"/>-<span class="nt">name</span><span class="p">:</span><span class="w"/><span class="s2">"Copy normal files to temp directory"</span><span class="w"/><span class="w"/><span class="nt">local_action</span><span class="p">:</span><span class="w"/><span class="w"/><span class="nt">module</span><span class="p">:</span><span class="w"/><span class="l">template</span><span class="w"/><span class="w"/><span class="nt">src</span><span class="p">:</span><span class="w"/><span class="s2">"{{ item.path }}"</span><span class="w"/><span class="w"/><span class="nt">mode</span><span class="p">:</span><span class="w"/><span class="s2">"preserve"</span><span class="w"/><span class="w"/><span class="nt">dest</span><span class="p">:</span><span class="w"/><span class="s2">"{{ item.path | replace(role_path + '/files', temp_file_path.path) }}"</span><span class="w"/><span class="w"/><span class="nt">with_items</span><span class="p">:</span><span class="w"/><span class="s2">"{{ files_normal.files }}"</span><span class="w"/><span class="w"/><span class="w"/>-<span class="nt">name</span><span class="p">:</span><span class="w"/><span class="s2">"Sync these to the destination"</span><span class="w"/><span class="w"/><span class="nt">synchronize</span><span class="p">:</span><span class="w"/><span class="w"/><span class="nt">src</span><span class="p">:</span><span class="w"/><span class="s2">"{{ temp_file_path.path }}/"</span><span class="w"/><span class="w"/><span class="nt">dest</span><span class="p">:</span><span class="w"/><span class="s2">"{{ config_root }}/"</span><span class="w"/><span class="w"/><span class="nt">delete</span><span class="p">:</span><span class="w"/><span class="kc">yes</span><span class="w"/><span class="w"/><span class="nt">rsync_opts</span><span class="p">:</span><span class="w"/><span class="w"/>-<span class="s2">"--chown=root:root"</span></code></pre></div></div></content></item><item><title>Use Datadog to Monitor Your Cluster Build by Rke</title><link>https://wdicc.com/use-datadog-to-monitor-your-cluster-build-by-rke/</link><pubDate>Mon, 27 Jul 2020 15:47:33 +0800</pubDate><guid>https://wdicc.com/use-datadog-to-monitor-your-cluster-build-by-rke/</guid><description>There are many tools you can choose when you want to build your kubernetes cluster, we use Rancher Kubernetes Engine (RKE) to build our kubernetes cluster.
We run datadog as daemonset in our cluster, and datadog has auto discovery feature to discovery pods/containers need to check. When we deployed a redis database, datadog will notice that and run checks against the redis pods, we didn&amp;#39;t need to do any configurations.</description><content type="text/html" mode="escaped"><p>There are many tools you can choose when you want to build your kubernetes cluster, we use Rancher Kubernetes Engine (RKE) to build our kubernetes cluster.</p><p>
We run datadog as daemonset in our cluster, and datadog has auto discovery feature to discovery pods/containers need to check. When we deployed a redis database, datadog will notice that and run checks against the redis pods, we didn't need to do any configurations.</p><p>
Datadog auto discovery also supports core kubernetes components, like APIServer, KubeScheduler, KubeProxy, etc. But when you setup you cluster by using RKE, you will find the auto discovery didn't work for these components.</p><p>
The auto discovery feature for these core components relies on<a href="https://docs.datadoghq.com/agent/guide/ad_identifiers/">autodiscovery container identifiers(ad_identifiers)</a>, the image name or image short name need to match the default<code class="verbatim">ad_identifiers</code> settings for these components. Unfortunately, rancher uses<code class="verbatim">rancher/hyperkube</code> to build most of the core components, they all have the same image name.</p><p>
The<code class="verbatim">ad_identifiers</code> also support to set to a container label, but that will need use to rebuild the container image to add the label, it's a mission impossible too. After some tests, I found the way to run checks against these containers by use annotations.</p><p>
Datadog supports us to<a href="https://docs.datadoghq.com/agent/kubernetes/integrations/?tab=kubernetes#datadog-redis-integration">use annotations</a> to notify datadog that we need to run check on some urls.</p><div class="src src-yaml"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"/><span class="l">v1</span><span class="w"/><span class="w"/><span class="nt">kind</span><span class="p">:</span><span class="w"/><span class="l">Pod</span><span class="w"/><span class="w"/><span class="c"># (...)</span><span class="w"/><span class="w"/><span class="nt">metadata</span><span class="p">:</span><span class="w"/><span class="w"/><span class="nt">name</span><span class="p">:</span><span class="w"/><span class="s1">'&lt;POD_NAME>'</span><span class="w"/><span class="w"/><span class="nt">annotations</span><span class="p">:</span><span class="w"/><span class="w"/><span class="nt">ad.datadoghq.com/&lt;CONTAINER_IDENTIFIER>.check_names</span><span class="p">:</span><span class="w"/><span class="s1">'[&lt;INTEGRATION_NAME>]'</span><span class="w"/><span class="w"/><span class="nt">ad.datadoghq.com/&lt;CONTAINER_IDENTIFIER>.init_configs</span><span class="p">:</span><span class="w"/><span class="s1">'[&lt;INIT_CONFIG>]'</span><span class="w"/><span class="w"/><span class="nt">ad.datadoghq.com/&lt;CONTAINER_IDENTIFIER>.instances</span><span class="p">:</span><span class="w"/><span class="s1">'[&lt;INSTANCE_CONFIG>]'</span><span class="w"/><span class="w"/><span class="c"># (...)</span><span class="w"/><span class="w"/><span class="nt">spec</span><span class="p">:</span><span class="w"/><span class="w"/><span class="nt">containers</span><span class="p">:</span><span class="w"/><span class="w"/>-<span class="nt">name</span><span class="p">:</span><span class="w"/><span class="s1">'&lt;CONTAINER_IDENTIFIER>'</span><span class="w"/><span class="w"/><span class="c"># (...)</span></code></pre></div></div><p>
Here is an example for apache. Did you see the<code class="verbatim">"url": "http://%%host%%/website_1"</code> in the<code class="verbatim">instances</code> settings? You can imagine that what will happen if we change this url to a service exposed by kubernetes.</p><div class="src src-yaml"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"/><span class="l">v1</span><span class="w"/><span class="w"/><span class="nt">kind</span><span class="p">:</span><span class="w"/><span class="l">Pod</span><span class="w"/><span class="w"/><span class="nt">metadata</span><span class="p">:</span><span class="w"/><span class="w"/><span class="nt">name</span><span class="p">:</span><span class="w"/><span class="l">apache</span><span class="w"/><span class="w"/><span class="nt">annotations</span><span class="p">:</span><span class="w"/><span class="w"/><span class="nt">ad.datadoghq.com/apache.check_names</span><span class="p">:</span><span class="w"/><span class="s1">'["apache","http_check"]'</span><span class="w"/><span class="w"/><span class="nt">ad.datadoghq.com/apache.init_configs</span><span class="p">:</span><span class="w"/><span class="s1">'[{},{}]'</span><span class="w"/><span class="w"/><span class="nt">ad.datadoghq.com/apache.instances</span><span class="p">:</span><span class="w"/><span class="p">|</span><span class="sd"/><span class="sd"> [</span><span class="sd"> [</span><span class="sd"> {</span><span class="sd"> "apache_status_url": "http://%%host%%/server-status?auto"</span><span class="sd"> }</span><span class="sd"> ],</span><span class="sd"> [</span><span class="sd"> {</span><span class="sd"> "name": "&lt;WEBSITE_1>",</span><span class="sd"> "url": "http://%%host%%/website_1",</span><span class="sd"> "timeout": 1</span><span class="sd"> },</span><span class="sd"> {</span><span class="sd"> "name": "&lt;WEBSITE_2>",</span><span class="sd"> "url": "http://%%host%%/website_2",</span><span class="sd"> "timeout": 1</span><span class="sd"> }</span><span class="sd"> ]</span><span class="sd"> ]</span><span class="w"/><span class="w"/><span class="nt">labels</span><span class="p">:</span><span class="w"/><span class="w"/><span class="nt">name</span><span class="p">:</span><span class="w"/><span class="l">apache</span><span class="w"/><span class="w"/><span class="nt">spec</span><span class="p">:</span><span class="w"/><span class="w"/><span class="nt">containers</span><span class="p">:</span><span class="w"/><span class="w"/>-<span class="nt">name</span><span class="p">:</span><span class="w"/><span class="l">apache</span><span class="w"/><span class="w"/><span class="nt">image</span><span class="p">:</span><span class="w"/><span class="l">httpd</span><span class="w"/><span class="w"/><span class="nt">ports</span><span class="p">:</span><span class="w"/><span class="w"/>-<span class="nt">containerPort</span><span class="p">:</span><span class="w"/><span class="m">80</span></code></pre></div></div><p>
Actually, datadog didn't care about you container. It only cares about settings you put in the annotations. I use this<code class="verbatim">feature</code> to add checks to my RKE built cluster.</p><p>
Here is an example for monitoring components runs on controlplan. Don't forget to allow your datadog daemonset run on your master nodes first. And please take notice about the<code class="verbatim">tolerations</code> and<code class="verbatim">nodeSelector</code> I added in the yaml.</p><div class="src src-yaml"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"/><span class="l">apps/v1</span><span class="w"/><span class="w"/><span class="nt">kind</span><span class="p">:</span><span class="w"/><span class="l">DaemonSet</span><span class="w"/><span class="w"/><span class="nt">metadata</span><span class="p">:</span><span class="w"/><span class="w"/><span class="nt">name</span><span class="p">:</span><span class="w"/><span class="l">controlplane-monitor</span><span class="w"/><span class="w"/><span class="nt">spec</span><span class="p">:</span><span class="w"/><span class="w"/><span class="nt">selector</span><span class="p">:</span><span class="w"/><span class="w"/><span class="nt">matchLabels</span><span class="p">:</span><span class="w"/><span class="w"/><span class="nt">name</span><span class="p">:</span><span class="w"/><span class="l">controlplane-monitor</span><span class="w"/><span class="w"/><span class="nt">template</span><span class="p">:</span><span class="w"/><span class="w"/><span class="nt">metadata</span><span class="p">:</span><span class="w"/><span class="w"/><span class="nt">labels</span><span class="p">:</span><span class="w"/><span class="w"/><span class="nt">name</span><span class="p">:</span><span class="w"/><span class="l">controlplane-monitor</span><span class="w"/><span class="w"/><span class="nt">annotations</span><span class="p">:</span><span class="w"/><span class="w"/><span class="nt">ad.datadoghq.com/kube-scheduler.check_names</span><span class="p">:</span><span class="w"/><span class="s1">'["kube_scheduler"]'</span><span class="w"/><span class="w"/><span class="nt">ad.datadoghq.com/kube-scheduler.init_configs</span><span class="p">:</span><span class="w"/><span class="s1">'[{}]'</span><span class="w"/><span class="w"/><span class="nt">ad.datadoghq.com/kube-scheduler.instances</span><span class="p">:</span><span class="w"/><span class="p">|-</span><span class="sd"/><span class="sd"/><span class="w"/><span class="p">[</span>{<span class="nt">"prometheus_url": "http://%%host%%:10251/metrics", "leader_election":</span><span class="s2">"true"</span>}<span class="p">]</span><span class="w"/><span class="w"/><span class="w"/><span class="nt">ad.datadoghq.com/kube-controller-manager.check_names</span><span class="p">:</span><span class="w"/><span class="s1">'["kube_controller_manager"]'</span><span class="w"/><span class="w"/><span class="nt">ad.datadoghq.com/kube-controller-manager.init_configs</span><span class="p">:</span><span class="w"/><span class="s1">'[{}]'</span><span class="w"/><span class="w"/><span class="nt">ad.datadoghq.com/kube-controller-manager.instances</span><span class="p">:</span><span class="w"/><span class="p">|-</span><span class="sd"/><span class="sd"/><span class="w"/><span class="p">[</span>{<span class="nt">"prometheus_url": "http://%%host%%:10251/metrics", "leader_election":</span><span class="s2">"true"</span>}<span class="p">]</span><span class="w"/><span class="w"/><span class="w"/><span class="nt">ad.datadoghq.com/kube-apiserver.check_names</span><span class="p">:</span><span class="w"/><span class="s1">'["kube_apiserver_metrics"]'</span><span class="w"/><span class="w"/><span class="nt">ad.datadoghq.com/kube-apiserver.init_configs</span><span class="p">:</span><span class="w"/><span class="s1">'[{}]'</span><span class="w"/><span class="w"/><span class="nt">ad.datadoghq.com/kube-apiserver.instances</span><span class="p">:</span><span class="w"/><span class="p">|-</span><span class="sd"/><span class="sd"/><span class="w"/><span class="p">[</span>{<span class="nt">"prometheus_url":</span><span class="s2">"https://%%host%%:6443/metrics"</span><span class="p">,</span><span class="w"/><span class="s2">"tls_ca_cert"</span><span class="p">:</span><span class="s2">"/etc/kubernetes/ssl/kube-ca.pem"</span>}<span class="p">]</span><span class="w"/><span class="w"/><span class="w"/><span class="nt">spec</span><span class="p">:</span><span class="w"/><span class="w"/><span class="nt">hostNetwork</span><span class="p">:</span><span class="w"/><span class="kc">true</span><span class="w"/><span class="w"/><span class="nt">nodeSelector</span><span class="p">:</span><span class="w"/><span class="w"/><span class="nt">"node-role.kubernetes.io/controlplane":</span><span class="s2">"true"</span><span class="w"/><span class="w"/><span class="nt">tolerations</span><span class="p">:</span><span class="w"/><span class="w"/>-<span class="nt">key</span><span class="p">:</span><span class="w"/><span class="s2">"node-role.kubernetes.io/controlplane"</span><span class="w"/><span class="w"/><span class="nt">value</span><span class="p">:</span><span class="w"/><span class="s2">"true"</span><span class="w"/><span class="w"/><span class="nt">effect</span><span class="p">:</span><span class="w"/><span class="s2">"NoSchedule"</span><span class="w"/><span class="w"/><span class="nt">restartPolicy</span><span class="p">:</span><span class="w"/><span class="l">Always</span><span class="w"/><span class="w"/><span class="nt">terminationGracePeriodSeconds</span><span class="p">:</span><span class="w"/><span class="m">0</span><span class="w"/><span class="w"/><span class="nt">containers</span><span class="p">:</span><span class="w"/><span class="w"/>-<span class="nt">image</span><span class="p">:</span><span class="w"/><span class="l">busybox</span><span class="w"/><span class="w"/><span class="nt">command</span><span class="p">:</span><span class="w"/><span class="w"/>-<span class="l">sleep</span><span class="w"/><span class="w"/>-<span class="l">infinity</span><span class="w"/><span class="w"/><span class="nt">name</span><span class="p">:</span><span class="w"/><span class="l">kube-scheduler</span><span class="w"/><span class="w"/>-<span class="nt">image</span><span class="p">:</span><span class="w"/><span class="l">busybox</span><span class="w"/><span class="w"/><span class="nt">command</span><span class="p">:</span><span class="w"/><span class="w"/>-<span class="l">sleep</span><span class="w"/><span class="w"/>-<span class="l">infinity</span><span class="w"/><span class="w"/><span class="nt">name</span><span class="p">:</span><span class="w"/><span class="l">kube-controller-manager</span><span class="w"/><span class="w"/>-<span class="nt">image</span><span class="p">:</span><span class="w"/><span class="l">busybox</span><span class="w"/><span class="w"/><span class="nt">command</span><span class="p">:</span><span class="w"/><span class="w"/>-<span class="l">sleep</span><span class="w"/><span class="w"/>-<span class="l">infinity</span><span class="w"/><span class="w"/><span class="nt">name</span><span class="p">:</span><span class="w"/><span class="l">kube-apiserver</span></code></pre></div></div></content></item><item><title>Use Certbot Docker to Manage Certs</title><link>https://wdicc.com/use-certbot-docker-to-manage-certs/</link><pubDate>Sun, 19 Jul 2020 16:58:03 +0800</pubDate><guid>https://wdicc.com/use-certbot-docker-to-manage-certs/</guid><description>I think everyone knows Let&amp;#39;s Encrypt these days. I use letsencrypt for some of my personal services.
I was using the system shipped certs at the beginning, and using systemd jobs to auto renew the certs. I was using the HTTP-01 challenge mode at first, and using the certbot standalone mode to achieve that.</description><content type="text/html" mode="escaped"><p>I think everyone knows<a href="https://letsencrypt.org/">Let's Encrypt</a> these days. I use letsencrypt for some of my personal services.</p><p>
I was using the system shipped certs at the beginning, and using systemd jobs to auto renew the certs. I was using the HTTP-01 challenge mode at first, and using the certbot standalone mode to achieve that. Certbot will need to run a webserver at 443/80 to finish the challenge, so we have to add pre/post hook to certbot to stop/start our nginx servers. If certbot can't stop your webserver, it will fail the challenge. After failed many times, I decide to change to Caddy.</p><p>
Caddy was a modern webserver, it can automatically apply and extend your letsencrypt certs which is very convenient. But after some time, I found that I only can use these certs inside Caddy, if I want to add certs to an other service, I have to use Caddy as the reverse proxy, that wasn't what I want. So I have to found a new way.</p><p>
After some research, I decide to use a certbot docker to apply the certs.</p><div id="outline-container-headline-1" class="outline-3"><h3 id="headline-1">
Use certbot docker to apply certs</h3><div id="outline-text-headline-1" class="outline-text-3"><p>
As I mentioned early, the HTTP-01 challenge method has some problems, I try to use DNS-01 this time.</p><p>
My domain was managed by Cloudflare, which already supported by certbot. First create a API token with DNS zone edit permission at Cloudflare, create a file named<code class="verbatim">cloudflare.ini</code> .</p><div class="src src-ini"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ini" data-lang="ini"><span class="na">dns_cloudflare_api_token</span><span class="o">=</span><span class="s">YOUR_TOKEN</span></code></pre></div></div><p>
Run command bellow to apply certs, the certs will be placed at<code class="verbatim">./certs</code> .</p><div class="src src-bash"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">docker run -it --rm --name certbot<span class="se">\</span><span class="se"/>-v<span class="s2">"./certs:/etc/letsencrypt"</span><span class="se">\</span><span class="se"/>-v<span class="s2">"./cloudflare.ini:/cloudflare.ini"</span><span class="se">\</span><span class="se"/>certbot/dns-cloudflare certonly --dns-cloudflare --dns-cloudflare-credentials /cloudflare.ini<span class="se">\</span><span class="se"/>-m YOUR_EMAIL --agree-tos --no-eff-email<span class="se">\</span><span class="se"/>--dns-cloudflare-propagation-seconds<span class="m">20</span><span class="se">\</span><span class="se"/>-d my.wdicc.com</code></pre></div></div><p>
Then you can mount<code class="verbatim">./certs</code> to other containers to use the certs.</p></div></div><div id="outline-container-headline-2" class="outline-3"><h3 id="headline-2">
Renew certs</h3><div id="outline-text-headline-2" class="outline-text-3"><p>
Certs renew is easy, and after renew the certs, we also need to reload our webserver or applications to use the new certs, it's very important.</p><p>
Certbot didn't provide a way to run a daemon in docker container to renew the certs. After some research, I decide to use<a href="https://github.com/willfarrell/docker-crontab">docker-crontab</a> finally.</p><p>
Create<code class="verbatim">crontab/config.json</code> as bellow, alter<code class="verbatim">/path/to</code> to absolute path on the host.</p><div class="src src-javascript"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="p">[{</span><span class="s2">"comment"</span><span class="o">:</span><span class="s2">"renew certs"</span><span class="p">,</span><span class="s2">"onstart"</span><span class="o">:</span><span class="kc">true</span><span class="p">,</span><span class="s2">"schedule"</span><span class="o">:</span><span class="s2">"0 0 * * 1"</span><span class="p">,</span><span class="s2">"command"</span><span class="o">:</span><span class="s2">"renew --dns-cloudflare --dns-cloudflare-credentials /cloudflare.ini"</span><span class="p">,</span><span class="s2">"dockerargs"</span><span class="o">:</span><span class="s2">"--rm -v /path/to/certs:/etc/letsencrypt -v /path/to/cloudflare.ini:/cloudflare.ini"</span><span class="p">,</span><span class="s2">"image"</span><span class="o">:</span><span class="s2">"certbot/dns-cloudflare"</span><span class="p">,</span><span class="s2">"trigger"</span><span class="o">:</span><span class="p">[</span><span class="p">{</span><span class="s2">"command"</span><span class="o">:</span><span class="s2">"echo 'restart trojan' &amp;&amp; docker restart nginx"</span><span class="p">,</span><span class="s2">"container"</span><span class="o">:</span><span class="s2">"cron"</span><span class="p">},</span><span class="p">{</span><span class="s2">"command"</span><span class="o">:</span><span class="s2">"echo 'restart caddy' &amp;&amp; docker restart caddy"</span><span class="p">,</span><span class="s2">"container"</span><span class="o">:</span><span class="s2">"cron"</span><span class="p">}</span><span class="p">]</span><span class="p">}]</span></code></pre></div></div><p>
Create the crontab container.</p><div class="src src-bash"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">docker run -d --name crontab<span class="se">\</span><span class="se"/> -v /var/run/docker.sock:/var/run/docker.sock:ro<span class="se">\</span><span class="se"/> -v ./crontab:/opt/crontab:rw<span class="se">\</span><span class="se"/> willfarrell/crontab</code></pre></div></div><p>
As you can see, I use<code class="verbatim">docker restart container</code> to reload the certs in the<code class="verbatim">config.json</code> , you can change it to a better version like bellow to avoid downtime for you website.</p><div class="src src-javascript"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="s2">"trigger"</span><span class="o">:</span><span class="p">[{</span><span class="s2">"command"</span><span class="o">:</span><span class="s2">"sh -c '/usr/sbin/nginx -t &amp;&amp; /usr/sbin/nginx -s reload'"</span><span class="p">,</span><span class="s2">"container"</span><span class="o">:</span><span class="s2">"nginx"</span><span class="p">}]</span></code></pre></div></div><p>
You can use<code class="verbatim">docker logs crontab</code> to check the logs, with<code class="verbatim">"onstart": true,</code> in<code class="verbatim">config.json</code> , the task will run when the container starts.</p></div></div></content></item><item><title>To Be a Terraform Expert</title><link>https://wdicc.com/to-be-a-terraform-expert/</link><pubDate>Tue, 30 Jun 2020 17:17:34 +0800</pubDate><guid>https://wdicc.com/to-be-a-terraform-expert/</guid><description>I was using AWS before I join the current company, but I don&amp;#39;t even know terraform before I interview with the current company. I got hit by Terraform at first, it&amp;#39;s really hard to deal with states.
Use -target with plan command to collaborate When you work with your colleagues with same terraform project, sometimes they maybe need to apply some changes that haven&amp;#39;t merged yet for testing, when you run the plan command, you will find that terraform want to destroy his resources.</description><content type="text/html" mode="escaped"><p>
I was using AWS before I join the current company, but I don't even know terraform before I interview with the current company. I got hit by Terraform at first, it's really hard to deal with states.</p><div id="outline-container-headline-1" class="outline-3"><h3 id="headline-1">
Use<code class="verbatim">-target</code> with<code class="verbatim">plan</code> command to collaborate</h3><div id="outline-text-headline-1" class="outline-text-3"><p>
When you work with your colleagues with same terraform project, sometimes they maybe need to apply some changes that haven't merged yet for testing, when you run the plan command, you will find that terraform want to destroy his resources. You can wait until his changes have merged. But actually, you can use the<code class="verbatim">-target</code> to limit your resources for the plan command. So, you can run the plan command happily without destroying other people's resources.</p></div></div><div id="outline-container-headline-2" class="outline-3"><h3 id="headline-2">
Use remote state to collaborate with others</h3><div id="outline-text-headline-2" class="outline-text-3"><p>
If you need to work on the same project with your colleagues, you need to set up a remote state. We use<code class="verbatim">s3</code> as our state backend, it will use s3 bucket to store the state file, and a DynamoDB table to store the lock. If you encounter some problems, you maybe need to check these resources manually to confirm it's all working properly.</p></div></div><div id="outline-container-headline-3" class="outline-3"><h3 id="headline-3">
Use<code class="verbatim">state rm</code> command to put resources outside terraform</h3><div id="outline-text-headline-3" class="outline-text-3"><p>
You know, the state file includes the states terraform known about your resources, but what will happen if you delete some resources through other tools (e.g., make changes through AWS console)? Terraform didn't know those changes. We can use<code class="verbatim">state rm</code> command to tell terraform not to manage these states in the feature. Beware that, the<code class="verbatim">destroy</code> command will remove remote resources, and the<code class="verbatim">state rm</code> will only remove from the state, if you haven't removed the remote resources through other tools, the resources will still there.</p></div></div><div id="outline-container-headline-4" class="outline-3"><h3 id="headline-4">
Use<code class="verbatim">state mv</code> command after you rename resources</h3><div id="outline-text-headline-4" class="outline-text-3"><p>
We may need to change the resource name in our codes, for example rename or put the resource under another module. After the rename the Terraform usually will create a plan that include destroy and create. We can use<code class="verbatim">mv</code> to rename the resource names in the state file, so that Terraform will know the changes and create a correct plan.</p></div></div><div id="outline-container-headline-5" class="outline-3"><h3 id="headline-5">
Use<code class="verbatim">import</code> command to import resources inside terraform</h3><div id="outline-text-headline-5" class="outline-text-3"><p>
Sometimes, it's easy to create some resources through web UI. With<code class="verbatim">import</code> command, we can create resources through the web UI, and then import them to terraform state.</p></div></div><div id="outline-container-headline-6" class="outline-3"><h3 id="headline-6">
Use fake modules to solve dependency</h3><div id="outline-text-headline-6" class="outline-text-3"><p>
If you have use providers in your module when you delete that module, terraform will report an error, that it can't find providers. It's annoying when you use modules in modules. You can simply create some fake module, these modules only have the same names as the original modules, but didn't have any resources. After apply, you can safely remove these fake modules.</p></div></div><div id="outline-container-headline-7" class="outline-3"><h3 id="headline-7">
Use temporary workspace and<code class="verbatim">console</code> to test terraform expressions</h3><div id="outline-text-headline-7" class="outline-text-3"><p>
HCL for terraform was not a programming language, but we can't stop to do programming in terraform. When we write some expressions, we need to test it. I suggest creating a temporary project to test it. Think about that you have a big project with 20+ resources, you need to refresh the states every time you want to run terraform plan.</p><p>
Simply put the expressions in a<code class="verbatim">locals</code> block, and output the results in<code class="verbatim">output</code> blocks, you will see the terraform plan command run very fast.</p></div></div></content></item><item><title>Transparent Proxys</title><link>https://wdicc.com/transparent-proxys/</link><pubDate>Mon, 29 Jun 2020 17:21:26 +0800</pubDate><guid>https://wdicc.com/transparent-proxys/</guid><description>这次说说透明代理。所谓透明代理指的是用户无感知的情况下（也就是不需要对自己的电脑手机做任何设置，运行</description><content type="text/html" mode="escaped"><p>这次说说透明代理。所谓透明代理指的是用户无感知的情况下（也就是不需要对自己的电脑手机做任何设置，运行任何代理软件），就可以直接访问被屏蔽的网站。一般都是通过在路由器上面做设置来实现。</p><p>
翻墙这个事情最重要的就是解决两个问题</p><ol><li><p>解决 DNS 污染</p></li><li><p>通过 tunnel 访问到被屏蔽的 ip 地址</p></li></ol><div id="outline-container-headline-1" class="outline-3"><h3 id="headline-1">
DNS 污染</h3><div id="outline-text-headline-1" class="outline-text-3"><p>
解决 DNS 污染，肯定首先需要有一个无污染的 dns，一般来说，国内的 dns 都是被污染的，估计也没人敢放出来无污染的给大家用。国外的 dns 里面，对于使用 dns udp 协议的，在经过出国网关的时候一般都会被污染。对于 dns tcp 协议的估计会直接连不上。对于其他的比较著名的 DoT DoH 的 dns 很多也连不上了。所以怎么能有一个无污染的 dns 呢？</p><div id="outline-container-headline-2" class="outline-4"><h4 id="headline-2">
自建 DNS</h4><div id="outline-text-headline-2" class="outline-text-4"><p>
自己有 vps 的话，可以自己搭一个自用，但是当然不能用 udp 协议之类的，一来容易被用来当作肉鸡，而来在出国网关哪里也还是会被污染。要搭就搭一个支持 DoT 或者 DoH 的服务。可以使用<a href="https://github.com/m13253/dns-over-https">dns-over-https</a> 来搭建一个 DoH 服务。通过 nginx 或者 caddy 之类包装一下就可以提供服务了。</p></div></div><div id="outline-container-headline-3" class="outline-4"><h4 id="headline-3">
通过代理访问被屏蔽的无污染 DNS</h4><div id="outline-text-headline-3" class="outline-text-4"><p>
上面不是提到么，国外 dns 是无污染的，那可以通过代理提供的 tunnel 访问这些 dns 来得到无污染的结果。例如<code class="verbatim">ss-tunnel</code> 就是可以用来做这个事情的。v2ray 的<code class="verbatim">dns-in</code> 也可以做这个事情。</p></div></div><div id="outline-container-headline-4" class="outline-4"><h4 id="headline-4">
广播 dns 给客户端</h4><div id="outline-text-headline-4" class="outline-text-4"><p>
有了无污染 dns 还需要广播给客户端使用才行。一般客户端连接到路由器的时候，路由器会 push 自己的 ip 地址做 dns。路由器上其实一般是会跑一个 dnsmasq 来提供 dns 和 dhcp 服务的。dnsmasq 默认使用的是通过 ppoe 或者其他方式获取的上游 dns 作为自己的上游，这样获取到的 dns 显然是被污染的。那么就需要配置 dnsmasq 使用我们刚才得到的无污染的 dns 来做上游。对于支持 udp 协议的 dns 可以直接给 dnsmasq 使用，对于 DoT DoH 的 dns，dnsmasq 不支持，还需要转换一下，上面提到的那个 dns-over-https 不止提供了 server ，也提供了 client，可以用那个 client 把 DoH 的 dns 转换成一个 udp 协议的 dns。</p></div></div><div id="outline-container-headline-5" class="outline-4"><h4 id="headline-5">
还存在的问题</h4><div id="outline-text-headline-5" class="outline-text-4"><p>
实际上，一个软件是可以自己决定是不是要使用系统的 dns 的。国内有时候会有一些地方的 isp 有 dns 劫持，有些软件为了避免这个问题，就不会使用系统的 dns 而使用自己的 dns。这样这些 dns 实际还是被污染的。当然这是比较少数的情况。还有一种情况是，类似一些 Android TV 盒子，它压根就不使用 dhcp push 的 dns，就是坚持用自己的 dns，这样的 dns 还是系统级别的，这样会导致这个系统上面跑的 app 都得到污染的结果，这种一般都是国外的设备居多，因为人家就压根不需要考虑污染的问题。</p><p>
如果遇到这些情况，会发现即使实现了透明代理，部分软件或者功能还是不能用，因为他们访问的依然是污染后的 ip。例如我的 Mi Box 国际版里面的 netflix 就用到了自己的 dns，即使我配置好了无污染的 dns 他也不会用。</p><p>
对于这样的情况，还有一个办法是找到他们使用的 dns ，然后通过 iptables 强制让这些请求也走代理。dns udp/tcp 比较好搞，因为一般都是 53 端口，抓包就可以，但是 DoT DoH 就麻烦一点了。</p></div></div></div></div><div id="outline-container-headline-6" class="outline-3"><h3 id="headline-6">
支持 redir 方式转发的代理</h3><div id="outline-text-headline-6" class="outline-text-3"><p>
这个很多软件支持，比较容易找，比如 ss, v2ray, clash 都支持。</p></div></div><div id="outline-container-headline-7" class="outline-3"><h3 id="headline-7">
把 DNS 解析结果和代理软件结合起来</h3><div id="outline-text-headline-7" class="outline-text-3"><p>
理想情况下，我们肯定只是希望被屏蔽的 ip 才通过代理访问，其他 ip 都直接连接最好了。通过无污染 dns 得到正确的 ip 之后，如何能让这些 ip 通过代理走，而其他 ip 不通过代理走呢？</p><div id="outline-container-headline-8" class="outline-4"><h4 id="headline-8">
dnsmasq + ipset</h4><div id="outline-text-headline-8" class="outline-text-4"><p>
一般我们路由器上面用的都是 dnsmasq，而 dnsmasq 可以针对指定的域名，使用指定的 dns 来解析，例如</p><div class="src src-text"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text">server=/.google.com/127.0.0.1#5380
ipset=/.google.com/free</code></pre></div></div><p>
这个设置可以让<code class="verbatim">.google.com</code> 都通过<code class="verbatim">127.0.0.1</code> 的端口是<code class="verbatim">5380</code> 的 dns 来解析。然后同时把解析的结果放到 ipset 的名叫 free 的 list 里面。通过类似的方式可以把所有被屏蔽的域名做这样的设置，那么就可以动态的得到一个被屏蔽的 ip 的列表了。然后通过 ipables 的<code class="verbatim">-m set --match-set free</code> 这样的匹配方式，把目标 ip 匹配到这个列表里面的请求转发给代理软件。</p><p>
很多基于 gfwlist 来设置的翻墙实际就是用的这个模式。这个模式的好处是，只会处理被屏蔽的域名对应的 ip，其他完全不会处理，这样也不会有比如把对国内 ip 的访问转发给代理的情况。但是这个也有一个弊端，如果一个服务是基于 ip 访问的，并且这个 ip 已经被屏蔽，那这样的方式发不行的，例如 telegram。处理方法是，找到网上别人整理的 telegram 网段，自己放到 ipset 的 list 就可以。目前我似乎就发现 telegram 这么一个特例。</p><p>
这个方法如果是一些公司内部使用，可能并不希望把所有被屏蔽的网站都支持，例如一些 porn 站点可能就没有支持的意义，这样就可以自己维护自己的域名列表，也很方便控制。</p></div></div><div id="outline-container-headline-9" class="outline-4"><h4 id="headline-9">
china ip list + ipset</h4><div id="outline-text-headline-9" class="outline-text-4"><p>
当我们的代理的速度比较快的时候，可能有人会希望说我要把所有出国的流量都走我的代理。这样可以使用 china ip list 这样的列表添加的 ipset 的 list 里面，来实现目标。</p><p>
china ip list 有几个版本，一个是 chnroute 的，一个是 ipip.net 提供的，我比较倾向于 ipip.net 的。对于这样的 ip list，需要说的是肯定无法做到 100% 准确的情况，理解他们的生成方法之后，我觉得 ipip.net 的更加可靠一点。通过这个 list 搭配 iptables 的<code class="verbatim">--match-set</code> ，可以做到对于这个列表外的 ip 都通过代理请求。</p><p>
这个列表还有另外一个用法，就是给国外用户访问国内服务用。一些网站，比如 taobao，视频网站，都会针对用户 ip 做一些不同的限制。国内用户和国外用户看到的界面和内容都不一样。有些视频可能国外用户付费也无法观看，这个时候他们就会需要通过一个国内代理来访问这些服务。那么就可以设置比如在 china ip list 里面的 ip 通过国内的代理访问。这就是所谓的回国模式。</p></div></div><div id="outline-container-headline-10" class="outline-4"><h4 id="headline-10">
v2ray sniffing</h4><div id="outline-text-headline-10" class="outline-text-4"><p>
这个值得特别拿出来说一下。v2ray 提供了一个 sniffing 功能，通过 SNI 可以获取到一个连接请求的域名，然后可以配置自动使用代理。使用之后效果就是，不用在关心 dns 污染了。</p><div class="src src-json"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="p">{</span><span class="nt">"port"</span><span class="p">:</span><span class="mi">12345</span><span class="p">,</span><span class="nt">"protocol"</span><span class="p">:</span><span class="s2">"dokodemo-door"</span><span class="p">,</span><span class="nt">"settings"</span><span class="p">:</span><span class="p">{</span><span class="nt">"network"</span><span class="p">:</span><span class="s2">"tcp,udp"</span><span class="p">,</span><span class="nt">"followRedirect"</span><span class="p">:</span><span class="kc">true</span><span class="p">},</span><span class="nt">"sniffing"</span><span class="p">:</span><span class="p">{</span><span class="nt">"enabled"</span><span class="p">:</span><span class="kc">true</span><span class="p">,</span><span class="nt">"destOverride"</span><span class="p">:</span><span class="p">[</span><span class="s2">"http"</span><span class="p">,</span><span class="s2">"tls"</span><span class="p">]</span><span class="p">}</span><span class="p">}</span></code></pre></div></div><p>
例如上面这个就是支持 iptables redirect 方式转发的入站协议，里面配置了 sniffing。假如用户要访问 google.com，它真实的 ip 假设是 1.1.1.1，用户通过污染的 dns 会获取到例如 2.2.2.2 这样的 ip 地址，用户的软件就会去连接 2.2.2.2 这个地址，到了路由器之后，路由器会把请求转发给 v2ray 这个入站，因为配置了 sniffing，这个时候 v2ray 会尝试通过内置的一套的逻辑（一般人可能不用管，但是这套逻辑也可以相当复杂）去获取相应的 ip，这个时候会得到 1.1.1.1 这个地址，那 v2ray 会忽视用户想要连接的地址，而连接 1.1.1.1 这个正确的地址，这样用户会得到正确的结果。</p><p>
这个里面唯一的存在问题是，用户使用的 dns 服务是知道用户想要访问 google.com 这个事实的。但是，what ever 我感觉不是什么大问题。</p><p>
还记得前面解决 dns 污染遇到的问题么？这个 sniffing 把那些问题也解决了。因为不管用户或者软件使用了什么 dns 得到了一个域名的 ip，到了 v2ray 这里，都会通过自己的逻辑再次获取一下正确的 ip 地址。</p><p>
基于这个，我强烈推荐使用 v2ray 来翻墙，目前我还没看到有其他软件实现这个功能的。v2ray 自己还支持差异化需求配置，例如可以只有某些域名或者 ip 才通过代理访问什么的，这样就非常灵活了，完全可以抛弃 ipset 了。</p><p>
我这里有一个<a href="https://github.com/wd/f-k-g-f-w/tree/master/router">自己使用的例子</a>，相当简单，丢到路由器（应该 linux 也可以，但是可能会需要调整 iptables 规则.. ）上面用<code class="verbatim">run.sh update</code> 安装一下 v2ray 和域名，ip库，就可以<code class="verbatim">run.sh start</code> 了。难点可能是，我的路由器配置了 opkg，以及 swap。因为 update 需要用到 jq，以及 v2ray 内存占用比较高，一般路由器都内存不够，所以需要配置 swap。我也懒得细说了，已经浪费了很多时间在这上面了。。.</p></div></div></div></div></content></item><item><title>10 Most Common Mistakes Using Kubernetes</title><link>https://wdicc.com/10-most-common-mistakes-using-kubernetes/</link><pubDate>Sun, 24 May 2020 09:45:20 +0800</pubDate><guid>https://wdicc.com/10-most-common-mistakes-using-kubernetes/</guid><description>翻译自 10 most common mistakes using kubernetes resources - requests and limits 这个绝对值得一开始就讲。 CPU 限制通常都是 not set（没设置）或者 set very low（</description><content type="text/html" mode="escaped"><p>
翻译自<a href="https://blog.pipetail.io/posts/2020-05-04-most-common-mistakes-k8s/">10 most common mistakes using kubernetes</a></p><div id="outline-container-headline-1" class="outline-3"><h3 id="headline-1">
resources - requests and limits</h3><div id="outline-text-headline-1" class="outline-text-3"><p>
这个绝对值得一开始就讲。</p><p>
CPU 限制通常都是 not set（没设置）或者 set very low（设置很低）（因此可以一次在一个节点放很多 pod），节点因此就会容易被过度使用。在需求旺盛的情况下，节点的 CPU 会被充分利用。我们的工作负载仅会获得“要求的算力”，会得到 CPU 使用限制，一般会导致应用程序延迟和超时增加，等等。</p><p>
越多越好的策略（请别这么做）</p><div class="src src-yaml"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="w"/><span class="nt">resources</span><span class="p">:</span><span class="w"/>{}</code></pre></div></div><p>
限制特别低的策略（请别这么做）</p><div class="src src-yaml"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="w"/><span class="nt">resources</span><span class="p">:</span><span class="w"/><span class="w"/><span class="nt">requests</span><span class="p">:</span><span class="w"/><span class="w"/><span class="nt">cpu</span><span class="p">:</span><span class="w"/><span class="s2">"1m"</span></code></pre></div></div><p>
另一方面，设置 CPU 限制会无必要的限制 pod 的使用，即使节点的 CPU 并没有被充分利用，这也会导致应用的延迟增加。围绕 Linux 内核中的 CPU CFS 限额和基于设置的 CPU 限额并关闭 CFS 的限额有一些公开讨论。CPU 限制导致的问题比解决的问题更多。可以参考后面的链接查看更多信息。</p><p>
内存过度使用会导致更多问题。达到 CPU 限制会导致限流，达到内存限制会导致 pod 被杀掉。见过 OOMkill 么？对的，我们说的就是这个。想要减少他的出现么？不要超额使用内存，使用有保障的 QoS ，像下面例子一样设置内存 request 等于 limit。可以看看<a href="https://www.slideshare.net/try_except_/optimizing-kubernetes-resource-requestslimits-for-costefficiency-and-latency-highload">Henning Jacobs 的讲稿</a>查看更多。</p><p>
允许超量的策略（可能会出现更多的 OOMKill）</p><div class="src src-yaml"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="w"/><span class="nt">resources</span><span class="p">:</span><span class="w"/><span class="w"/><span class="nt">requests</span><span class="p">:</span><span class="w"/><span class="w"/><span class="nt">memory</span><span class="p">:</span><span class="w"/><span class="s2">"128Mi"</span><span class="w"/><span class="w"/><span class="nt">cpu</span><span class="p">:</span><span class="w"/><span class="s2">"500m"</span><span class="w"/><span class="w"/><span class="nt">limits</span><span class="p">:</span><span class="w"/><span class="w"/><span class="nt">memory</span><span class="p">:</span><span class="w"/><span class="s2">"256Mi"</span><span class="w"/><span class="w"/><span class="nt">cpu</span><span class="p">:</span><span class="w"/><span class="m">2</span></code></pre></div></div><p>
有保障的策略</p><div class="src src-yaml"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="w"/><span class="nt">resources</span><span class="p">:</span><span class="w"/><span class="w"/><span class="nt">requests</span><span class="p">:</span><span class="w"/><span class="w"/><span class="nt">memory</span><span class="p">:</span><span class="w"/><span class="s2">"128Mi"</span><span class="w"/><span class="w"/><span class="nt">cpu</span><span class="p">:</span><span class="w"/><span class="m">2</span><span class="w"/><span class="w"/><span class="nt">limits</span><span class="p">:</span><span class="w"/><span class="w"/><span class="nt">memory</span><span class="p">:</span><span class="w"/><span class="s2">"128Mi"</span><span class="w"/><span class="w"/><span class="nt">cpu</span><span class="p">:</span><span class="w"/><span class="m">2</span></code></pre></div></div><p>
那么在设置资源限制的时候，有什么参考呢？</p><p>
通过 mertics-server 你可以查看当前各 pod（以及他们的容器） 的 cpu 和内存使用情况。如果你已经运行他们了，执行下面的命令即可。</p><div class="src src-bash"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">kubectl top pods
kubectl top pods --containers
kubectl top nodes</code></pre></div></div><p>
然而这些只是当前的用量。这些可以用来产生一些比较粗糙的限额的想法，但是你最终还是想要看到历史的使用情况（回答类似的问题：cpu 使用的峰值是多少，昨天的用量是多少，等等）。你可以使用 Prometheus, DataDog 以及其他的一些工具收集这些数据。这些工具收集和保存之后，你就可以查询和画图了。</p><p><a href="https://cloud.google.com/kubernetes-engine/docs/concepts/verticalpodautoscaler">VerticalPodAutoscaler</a> 可以帮助你自动处理这些事情，通过监控 cpu 内存历史使用情况来调整新的 request 和 limit 策略。</p><p>
有效利用节点性能并不容易。就像玩俄罗斯方块一样。如果你发现在节点利用率比较低的情况下（例如 ~ 10%）账单比较高，那你可能可以看看基于 AWS Fargate 或者 Virtual Kubelet 的产品，这些基于用量付费的的产品可能更便宜。</p></div></div><div id="outline-container-headline-2" class="outline-3"><h3 id="headline-2">
liveness and readiness probes</h3><div id="outline-text-headline-2" class="outline-text-3"><p>
默认情况下是没有 liveness 和 readiness 检测的。很多时候也没人管这个..</p><p>
但是如果出现了不可恢复的错误的时候，你的服务如何重启？负载均衡器如何知道特定的 pod 已经可以开始处理流量了？以及还可以处理更多流量？</p><p>
很多时候人们不知道这两个的区别</p><ul><li><p>Liveness 检查在失效的时候会重启 pod</p></li><li><p>Readiness 检查在失效的时候会从 service 里面移除这个 pod（你可以通过<code class="verbatim">kubectl get endpoionts</code> 查看），在这个检查恢复之前是不会有流量发送给这个 pod 的。</p></li></ul><p>并且，两个都是在整个 pod 的生命周期里面持续检查的。这很重要。</p><p>
人们有时会认为 readiness 检查只在 pod 启动的时候指示这个 pod 已经 Ready 并且可以接受请求了。但那个只是他的一个应用场景而已。</p><p>
另外一个场景是指示在 pod 生命周期里面这个 pod 是不是接受了太多的请求了（或者一些比较高昂的计算），因而可以停止发送更多请求过去，让这个 pod 冷却下，当 readiness 恢复的时候再继续发送请求。这种情况下，如果 liveness 检查也失败可能适得其反。为啥要重启一个健康的并且处理很多请求的 pod 呢？</p><p>
很多情况下两个的不设置好于设置错了。就像前面说的，如果 liveness 检查和 readiness 检查一样，你可能会遇到大问题。你可能需要从<a href="https://twitter.com/sszuecs/status/1175803113204269059">只设置 readiness</a> 开始，因为<a href="https://srcco.de/posts/kubernetes-liveness-probes-are-dangerous.html">liveness 检查比较危险</a>。</p><p>
不要因为依赖的服务 down 了就把其中任何一个设置为失效，这可能会导致所有 pod 集联失效。你等于是<a href="https://blog.colinbreck.com/kubernetes-liveness-and-readiness-probes-how-to-avoid-shooting-yourself-in-the-foot/">搬起石头砸自己脚</a>。</p></div></div><div id="outline-container-headline-3" class="outline-3"><h3 id="headline-3">
LoadBalancer for every http service</h3><div id="outline-text-headline-3" class="outline-text-3"><p>
当你有很多 http 服务的时候你会需要把他们暴露给外界。</p><p>
如果你暴露 kubernetes 服务为<code class="verbatim">type: LoadBalancer</code> 类型，他的控制器（不同供应商不一样）会给你分配一个外部的 LB（一般不需要 L7 的，大都是 L4），当你创建比较多的这些（固定的 ipv4 地址，计算能力，按秒付费。。。）服务的时候可能会比较贵。</p><p>
这种情况下，使用<code class="verbatim">type: NodePort</code> 暴露你的服务，然后共享同一个外部负载均衡器会比较合理。或者更好一点的是，部署一个 nginx-ingress-controller（或者 traefik）作为外部的负载均衡器的入口，然后把所有流量都通过 kubernetes 的 ingress 资源来路由分配。</p><p>
其他集群内部的（微）服务之间可以通过 CluterIP 服务类型来获得开箱即用的 dns 发现功能。小心不用使用公网的 DNS/IP，这可能导致延迟增加和费用增加。</p></div></div><div id="outline-container-headline-4" class="outline-3"><h3 id="headline-4">
non-kubernetes-aware cluster autoscaling</h3><div id="outline-text-headline-4" class="outline-text-3"><p>
当你给集群增加或者减少节点的时候，你不需要考虑一些简单的指标，例如这些节点的 cpu 使用率。当编排 pod 的时候，你会使用很多的编排限制，例如 pod 或者节点的 affinities, taints 和 tolerations, resource requests, QoS 等等。外部的自动伸缩机制一般不理解这些限制，可能会导致问题。</p><p>
想象一下有一个新的 pod 需要编排，但是所有的 CPU 都已经被请求（request）了，pod 会卡在 pending 状态。外部的自动伸缩机制会看到当前平均使用的 CPU（不是请求的）而不扩张（不增加新的节点）。pod 还是不会被编排。</p><p>
缩减（减少集群里面的节点）通常比较难。想象一下你有一个有状态的 pod（有使用持久化的 volume），通常持久化的 volume 资源会属于某个特定的可用区（availability zone）而不能在整个 region 扩展。你的自定义伸缩机制移除这个 pod 运行的节点之后，pod 不能在一个不是这个可用区的节点上面编排。pod 还是会卡在 pending 状态。</p><p><a href="https://github.com/kubernetes/autoscaler/tree/master/cluster-autoscaler">cluster-autoscaler</a> 正在被社区广泛使用，它运行在你的集群里面，集成了大部分主要的公有云的 API，理解这些限制，所以可以在上面的例子里面合理的扩展。它也知道是不是可以安静的缩减节点而不影响我们设置的任何限制而省钱。</p></div></div><div id="outline-container-headline-5" class="outline-3"><h3 id="headline-5">
Not using the power of IAM/RBAC</h3><div id="outline-text-headline-5" class="outline-text-3"><p>
不要给程序使用使用永久密钥的 IAM 用户，应该使用零时的 role 或者 service account。</p><p>
经常会看到，把 access key 和 secret key 硬编码到程序的配置里面，从来也不会轮转他们。使用 IAM 角色或者 service accounts 来代替。</p><p>
跳过 kube2iam，像<a href="https://blog.pipetail.io/posts/2020-04-13-more-eks-tips/">这篇文章</a>描述的一样直接在 service account 使用 IAM 角色。</p><div class="src src-yaml"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"/><span class="l">v1</span><span class="w"/><span class="w"/><span class="nt">kind</span><span class="p">:</span><span class="w"/><span class="l">ServiceAccount</span><span class="w"/><span class="w"/><span class="nt">metadata</span><span class="p">:</span><span class="w"/><span class="w"/><span class="nt">annotations</span><span class="p">:</span><span class="w"/><span class="w"/><span class="nt">eks.amazonaws.com/role-arn</span><span class="p">:</span><span class="w"/><span class="l">arn:aws:iam::123456789012:role/my-app-role</span><span class="w"/><span class="w"/><span class="nt">name</span><span class="p">:</span><span class="w"/><span class="l">my-serviceaccount</span><span class="w"/><span class="w"/><span class="nt">namespace</span><span class="p">:</span><span class="w"/><span class="l">default</span></code></pre></div></div><p>
只需要一条 annotation，没那么难，是吧？</p><p>
不是必须要的时候，不要给 service account 或者 instalce profile admin 和 cluster-admin 权限。这会稍微麻烦 一点，特别是基于 k8s RBAC，但是还是值得的。</p></div></div><div id="outline-container-headline-6" class="outline-3"><h3 id="headline-6">
self anti-affinities for pods</h3><div id="outline-text-headline-6" class="outline-text-3"><p>
在一个 deployment 里面让 pod 运行 3 个复制，节点挂掉的时候，所有的复制都在这个节点。嗯？所有复制都在一个节点？kubernetes 难道不应该提供 HA 吗？</p><p>
你不能指望 kubernetes scheduler 会给你的 pod 设置互相反亲和的特性。你需要自己明确定义他们。</p><div class="src src-yaml"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="l">// omitted for brevity</span><span class="w"/><span class="w"/><span class="nt">labels</span><span class="p">:</span><span class="w"/><span class="w"/><span class="nt">app</span><span class="p">:</span><span class="w"/><span class="l">zk</span><span class="w"/><span class="w"/><span class="l">// omitted for brevity</span><span class="w"/><span class="w"/><span class="nt">affinity</span><span class="p">:</span><span class="w"/><span class="w"/><span class="nt">podAntiAffinity</span><span class="p">:</span><span class="w"/><span class="w"/><span class="nt">requiredDuringSchedulingIgnoredDuringExecution</span><span class="p">:</span><span class="w"/><span class="w"/>-<span class="nt">labelSelector</span><span class="p">:</span><span class="w"/><span class="w"/><span class="nt">matchExpressions</span><span class="p">:</span><span class="w"/><span class="w"/>-<span class="nt">key</span><span class="p">:</span><span class="w"/><span class="s2">"app"</span><span class="w"/><span class="w"/><span class="nt">operator</span><span class="p">:</span><span class="w"/><span class="l">In</span><span class="w"/><span class="w"/><span class="nt">values</span><span class="p">:</span><span class="w"/><span class="w"/>-<span class="l">zk</span><span class="w"/><span class="w"/><span class="nt">topologyKey</span><span class="p">:</span><span class="w"/><span class="s2">"kubernetes.io/hostname"</span></code></pre></div></div><p>
这就可以了。这个会保证 pod 会分布在不同的节点（这只会在编排阶段检查，而不是运行时，基于<code class="verbatim">requiredDuringSchedulingIgnoredDuringExecution</code> ）。</p><p>
我们说的是 pod 基于节点名称的反亲和逻辑 -<code class="verbatim">topologyKey: "kubernetes.io/hostname"</code> ，而不是基于可用区。如果你真的需要 HA，那深入了解下这个话题吧。</p></div></div><div id="outline-container-headline-7" class="outline-3"><h3 id="headline-7">
no poddisruptionbudget</h3><div id="outline-text-headline-7" class="outline-text-3"><p>
在 kubernetes 上面运行生产环境的工作负载。随着时间流逝，你的节点和集群会需要升级，或者下架机器。PodDisruptionBudget（PDB）是一个位于集群管理员和集群用户间的某种服务保证的 API 。</p><p>
确保创建了<code class="verbatim">pdb</code> 来避免在下线节点的时候造成不必要的服务故障。</p><div class="src src-yaml"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"/><span class="l">policy/v1beta1</span><span class="w"/><span class="w"/><span class="nt">kind</span><span class="p">:</span><span class="w"/><span class="l">PodDisruptionBudget</span><span class="w"/><span class="w"/><span class="nt">metadata</span><span class="p">:</span><span class="w"/><span class="w"/><span class="nt">name</span><span class="p">:</span><span class="w"/><span class="l">zk-pdb</span><span class="w"/><span class="w"/><span class="nt">spec</span><span class="p">:</span><span class="w"/><span class="w"/><span class="nt">minAvailable</span><span class="p">:</span><span class="w"/><span class="m">2</span><span class="w"/><span class="w"/><span class="nt">selector</span><span class="p">:</span><span class="w"/><span class="w"/><span class="nt">matchLabels</span><span class="p">:</span><span class="w"/><span class="w"/><span class="nt">app</span><span class="p">:</span><span class="w"/><span class="l">zookeeper</span></code></pre></div></div><p>
集群用户可以使用这个来告诉集群管理员：嘿，我在这有一个 zookeeper 集群，不管你打算做啥，给我保留 2 个可用复制。</p><p><a href="https://blog.marekbartik.com/posts/2018-06-29_kubernetes-in-production-poddisruptionbudget/">这有个更加深入的帖子</a>。</p></div></div><div id="outline-container-headline-8" class="outline-3"><h3 id="headline-8">
more tenants or envs in shared cluster</h3><div id="outline-text-headline-8" class="outline-text-3"><p>
kubernetes 的命名空间不提供很强的隔离。</p><p>
人们总觉得使用命名空间分开非生产环境和生产环境后，一个环境不会影响另一个环境。一定意义上是可能的 - resource requests and limits, quotas, priorityClasses - and isolation - affinities, tolerations, taints (or nodeselectors) 想要物理上隔绝会让事情变得很麻烦。</p><p>
你如果想要两种类型的工作在一个集群里面，那就必须忍受这种复杂性。如果你不想这么复杂，那么多建一个集群是一个比较廉价的选择，把他们放到不同的集群里面可以得到很好的隔离。</p></div></div><div id="outline-container-headline-9" class="outline-3"><h3 id="headline-9">
externalTrafficPolicy: Cluster</h3><div id="outline-text-headline-9" class="outline-text-3"><p>
经常会看到这个，NodePort 类型的服务默认情况下<code class="verbatim">externalTrafficPolicy: Cluster</code> 所有的流量都会在集群内路由。这意味着，集群内每个节点都会开放这个 NodePort，因此你可以访问任何一个节点来访问到你的服务。</p><p>
通常一个 NodePort 服务只运行在这些节点的子集上。这意味着，当访问其中某个并不运行这个服务的节点的时候，就需要转发这个请求到别的节点，这会导致多余的网络跳转，而增加延迟（如果这些节点在不同的 AZ/DC，延迟可能还会挺高）。</p><p>
设置<code class="verbatim">externalTrafficPolicy: Local</code> 后就不会在 pod 不在的节点上面暴露那些端口了，只会在真实运行这些 pod 节点上开放。如果你有一个外部的 LB 会检查他们的 endpoints（就像 ELB 那样），会只发送请求给这些节点。减少延迟，多余的计算，流量账单。</p><p>
你可能会有一个 traefik 或者 nginx-ingress-controller 使用 NodePort （或者 LB，也使用 NodePort）来处理你的入口 http 流量和路由，那这个设置会极大的减少类似请求的延迟。</p><p>
深入讨论这个的<a href="https://www.asykim.com/blog/deep-dive-into-kubernetes-external-traffic-policies">帖子</a>。</p></div></div><div id="outline-container-headline-10" class="outline-3"><h3 id="headline-10">
pet clusters + stressing the control plane too much</h3><div id="outline-text-headline-10" class="outline-text-3"><p>
你会给服务器基于 Anton, HAL9000 and Colossus 起一些随机的名字，那么给集群起一个名字呢？</p><p>
一开始验证 kubernetes 功能的时候，会给集群起名叫做 "testing"，并且持续在生产环境使用这个名字，没人敢改？</p><p>
Pet 集群可不好玩，你可能会需要删除你的集群，实践下灾难恢复，关心下你的控制节点。不敢动控制节点可不是个好现象。Etcd 死了？你遇到大问题了。</p><p>
另一方面，经常改动也不一定好。一段时间后控制节点会变慢，可能会是因为你创建太多对象了（使用基于默认配置的 helm 会创建很多 configmaps/secrets，你可能会有上千个对象），或者你也可能经常通过修改 kube-api（为了 autoscaling, cicd, monitoring, logs from events, controllers, etc） 产生一些垃圾。</p><p>
以及，看看你的 kubernetes 提供商提供的 "SLA/SLO" 保证。有的可能会保证控制节点的可用性，但是不保证对于你发送的请求的 p99 延迟。换句话说，你可能会需要等 10 分钟才能得到<code class="verbatim">kubectl get nodes</code> 的结果，而不违反他们的服务保证。</p></div></div><div id="outline-container-headline-11" class="outline-3"><h3 id="headline-11">
bonus: using latest tag</h3><div id="outline-text-headline-11" class="outline-text-3"><p>
这个比较经典。现在不常见了，可能因为我们有太多人被这个搞死了，而开始使用固定的版本号而不是<code class="verbatim">:latest</code> 了。</p><p><a href="https://aws.amazon.com/about-aws/whats-new/2019/07/amazon-ecr-now-supports-immutable-image-tags/">ECR 现在提供了标签不可变的功能</a>，值得一试。</p></div></div><div id="outline-container-headline-12" class="outline-3"><h3 id="headline-12">
Summary</h3><div id="outline-text-headline-12" class="outline-text-3"><p>
别指望啥都会自动处理好，kubernetes 不是银弹。一个垃圾程序在 kubernetes 上面<a href="https://twitter.com/sadserver/status/1032704897500598272?s=20">可能也还是垃圾程序</a>（实际上还有可能更垃圾）。如果你不小心一点，事情可能会变得很复杂，压力很大，缓慢的控制节点，没有 DR 策略。别期待开箱即用的多租户功能和高可用。花点时间让你的程序变成 cloud native。</p></div></div></content></item><item><title>RBAC in Kubernetes</title><link>https://wdicc.com/rbac-in-kubernetes/</link><pubDate>Mon, 18 May 2020 17:14:58 +0800</pubDate><guid>https://wdicc.com/rbac-in-kubernetes/</guid><description>How to give a pod the access to run kubectl to create pods or configmaps? It&amp;#39;s very simple.
Every pods has to bind to a service account, it will be default, if you haven&amp;#39;t specify one. And by default, this account didn&amp;#39;t have any access to the kubernetes API.</description><content type="text/html" mode="escaped"><p>How to give a pod the access to run kubectl to create pods or configmaps? It's very simple.</p><p>
Every pods has to bind to a service account, it will be<code class="verbatim">default</code>, if you haven't specify one. And by default, this account didn't have any access to the kubernetes API.</p><p>
First, create a service account.</p><div class="src src-yaml"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"/><span class="l">v1</span><span class="w"/><span class="w"/><span class="nt">kind</span><span class="p">:</span><span class="w"/><span class="l">ServiceAccount</span><span class="w"/><span class="w"/><span class="nt">metadata</span><span class="p">:</span><span class="w"/><span class="w"/><span class="nt">name</span><span class="p">:</span><span class="w"/><span class="l">debug-sa</span><span class="w"/><span class="w"/><span class="nt">namespace</span><span class="p">:</span><span class="w"/><span class="l">default</span><span class="w"/><span class="c"># default namespace</span></code></pre></div></div><p>
Create a cluster role binding with an exists cluster role named<code class="verbatim">cluster-admin</code>, you can create one if you want.</p><div class="src src-yaml"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"/><span class="l">rbac.authorization.k8s.io/v1beta1</span><span class="w"/><span class="w"/><span class="nt">kind</span><span class="p">:</span><span class="w"/><span class="l">ClusterRoleBinding</span><span class="w"/><span class="w"/><span class="nt">metadata</span><span class="p">:</span><span class="w"/><span class="w"/><span class="nt">name</span><span class="p">:</span><span class="w"/><span class="l">debug-admin-crb</span><span class="w"/><span class="w"/><span class="nt">roleRef</span><span class="p">:</span><span class="w"/><span class="w"/><span class="nt">apiGroup</span><span class="p">:</span><span class="w"/><span class="l">rbac.authorization.k8s.io</span><span class="w"/><span class="w"/><span class="nt">kind</span><span class="p">:</span><span class="w"/><span class="l">ClusterRole</span><span class="w"/><span class="w"/><span class="nt">name</span><span class="p">:</span><span class="w"/><span class="l">cluster-admin</span><span class="w"/><span class="c"># bind to an exists ClusterRole, you can create one if you want</span><span class="w"/><span class="w"/><span class="nt">subjects</span><span class="p">:</span><span class="w"/><span class="w"/>-<span class="nt">kind</span><span class="p">:</span><span class="w"/><span class="l">ServiceAccount</span><span class="w"/><span class="w"/><span class="nt">name</span><span class="p">:</span><span class="w"/><span class="l">debug-sa</span><span class="w"/><span class="w"/><span class="nt">namespace</span><span class="p">:</span><span class="w"/><span class="l">default</span></code></pre></div></div><p>
Ok, that's all. Create our pod now.</p><div class="src src-yaml"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"/><span class="l">v1</span><span class="w"/><span class="w"/><span class="nt">kind</span><span class="p">:</span><span class="w"/><span class="l">Pod</span><span class="w"/><span class="w"/><span class="nt">metadata</span><span class="p">:</span><span class="w"/><span class="w"/><span class="nt">name</span><span class="p">:</span><span class="w"/><span class="l">netshoot</span><span class="w"/><span class="w"/><span class="nt">namespace</span><span class="p">:</span><span class="w"/><span class="l">default</span><span class="w"/><span class="w"/><span class="nt">labels</span><span class="p">:</span><span class="w"/><span class="w"/><span class="nt">app</span><span class="p">:</span><span class="w"/><span class="l">netshoot</span><span class="w"/><span class="w"/><span class="nt">spec</span><span class="p">:</span><span class="w"/><span class="w"/><span class="nt">serviceAccountName</span><span class="p">:</span><span class="w"/><span class="l">debug-sa</span><span class="w"/><span class="w"/><span class="nt">containers</span><span class="p">:</span><span class="w"/><span class="w"/>-<span class="nt">image</span><span class="p">:</span><span class="w"/><span class="l">bitnami/kubectl</span><span class="w"/><span class="w"/><span class="nt">name</span><span class="p">:</span><span class="w"/><span class="l">kubectl</span><span class="w"/><span class="w"/><span class="nt">command</span><span class="p">:</span><span class="w"/><span class="w"/>-<span class="l">sleep</span><span class="w"/><span class="w"/>-<span class="s2">"3600"</span><span class="w"/><span class="w"/><span class="nt">restartPolicy</span><span class="p">:</span><span class="w"/><span class="l">Always</span></code></pre></div></div><p>
Now, your pods have the<code class="verbatim">cluster-admin</code> access to visit you API resources. What's if I only need to give the pod the access to list pods?</p><p>
First, create a role, with limited access to pods. This role can't visit other resource other than pods.</p><div class="src src-yaml"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"/><span class="l">rbac.authorization.k8s.io/v1</span><span class="w"/><span class="w"/><span class="nt">kind</span><span class="p">:</span><span class="w"/><span class="l">Role</span><span class="w"/><span class="w"/><span class="nt">metadata</span><span class="p">:</span><span class="w"/><span class="w"/><span class="nt">name</span><span class="p">:</span><span class="w"/><span class="l">debug-role</span><span class="w"/><span class="w"/><span class="nt">rules</span><span class="p">:</span><span class="w"/><span class="w"/>-<span class="nt">apiGroups</span><span class="p">:</span><span class="w"/><span class="p">[</span><span class="s2">""</span><span class="p">]</span><span class="w"/><span class="w"/><span class="nt">resources</span><span class="p">:</span><span class="w"/><span class="w"/>-<span class="l">pods</span><span class="w"/><span class="c"># limit the role only have limit access to pods</span><span class="w"/><span class="w"/><span class="nt">verbs</span><span class="p">:</span><span class="w"/><span class="w"/>-<span class="l">get</span><span class="w"/><span class="w"/>-<span class="l">list</span><span class="w"/><span class="w"/>-<span class="l">delete</span></code></pre></div></div><p>
Create a role binding, to bind the role and the service account.</p><div class="src src-yaml"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"/><span class="l">rbac.authorization.k8s.io/v1</span><span class="w"/><span class="w"/><span class="nt">kind</span><span class="p">:</span><span class="w"/><span class="l">RoleBinding</span><span class="w"/><span class="w"/><span class="nt">metadata</span><span class="p">:</span><span class="w"/><span class="w"/><span class="nt">name</span><span class="p">:</span><span class="w"/><span class="l">debug-rb</span><span class="w"/><span class="w"/><span class="nt">subjects</span><span class="p">:</span><span class="w"/><span class="w"/>-<span class="nt">kind</span><span class="p">:</span><span class="w"/><span class="l">ServiceAccount</span><span class="w"/><span class="w"/><span class="nt">name</span><span class="p">:</span><span class="w"/><span class="l">debug-sa</span><span class="w"/><span class="w"/><span class="nt">roleRef</span><span class="p">:</span><span class="w"/><span class="w"/><span class="nt">kind</span><span class="p">:</span><span class="w"/><span class="l">Role</span><span class="w"/><span class="w"/><span class="nt">name</span><span class="p">:</span><span class="w"/><span class="l">debug-role</span><span class="w"/><span class="w"/><span class="nt">apiGroup</span><span class="p">:</span><span class="w"/><span class="l">rbac.authorization.k8s.io</span></code></pre></div></div><p>
And then recreate your pod with this service account. Don't forget to delete the privious cluter role binding for this service account.</p><div class="src src-shell"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">$ k<span class="nb">exec</span> -it netshoot -c<span class="s1">'kubectl'</span> -- /bin/bash
I have no name!@netshoot:/$ kubectl get pods
NAME READY STATUS RESTARTS AGE
netshoot 2/2 Running<span class="m">0</span> 13m
I have no name!@netshoot:/$ kubectl get svc
Error from server<span class="o">(</span>Forbidden<span class="o">)</span>: services is forbidden: User<span class="s2">"system:serviceaccount:default:debug-sa"</span> cannot list resource<span class="s2">"services"</span> in API group<span class="s2">""</span> in the namespace<span class="s2">"default"</span>
I have no name!@netshoot:/$</code></pre></div></div><p>
What's the difference between role and cluster role?</p><ul><li><p>For role, it's limited in a namespace, it only can limit resources inside a namespace.</p></li><li><p>Some resource like PV, cluster health, it's not related with a namespace, it's cluster wide, you only can use cluster role to limit them.</p></li><li><p>A role binding can bind a role to a service account in an other namespace.</p></li></ul></content></item><item><title>Dont Need Kubernates</title><link>https://wdicc.com/dont-need-kubernates/</link><pubDate>Sat, 07 Mar 2020 09:58:33 +0800</pubDate><guid>https://wdicc.com/dont-need-kubernates/</guid><description>翻译自 “Let’s use Kubernetes!” Now you have 8 problems ，这个东西和所谓什么中台，微服务类似，小公司弄</description><content type="text/html" mode="escaped"><p>翻译自<a href="https://pythonspeed.com/articles/dont-need-kubernetes/">“Let’s use Kubernetes!” Now you have 8 problems</a> ，这个东西和所谓什么中台，微服务类似，小公司弄这些东西就是瞎折腾。</p><p>
如果你使用 Docker，那正常来说下一步会考虑 kubernates (aka k8s)：生产环境就应该这样，对吧？</p><p>
这个，可能吧。针对 500 个软件工程师开发一个软件和 50 个工程师的方案会有比较大的不同。也和 5 个工程师的团队的方案不一样。</p><p>
如果你是个小团队，kubernates 可能并不适合你：弊大于利。</p><p>
下面看看为啥这么说。</p><div id="outline-container-headline-1" class="outline-2"><h2 id="headline-1">
Everyone loves moving parts 大家都喜欢组件化？</h2><div id="outline-text-headline-1" class="outline-text-2"><p>
Kubernates 有很多组件，概念，子系统，进程，服务器，代码，这些也意味着更多的问题。</p><div id="outline-container-headline-2" class="outline-3"><h3 id="headline-2">
Multiple machines</h3><div id="outline-text-headline-2" class="outline-text-3"><p>
Kubernates 是个分布式系统：有主服务器控制工作服务器。工作会分配到不同的工作服务器上面。每个服务器在容器里面完成这些工作。</p><p>
所以，你可能已经使用2台服务器或者虚拟机把事情都解决了。And that just gives you … one machine. If you’re going to scale (the whole point of the exercise) you need three or four or seventeen VMs.</p></div></div><div id="outline-container-headline-3" class="outline-3"><h3 id="headline-3">
Lots and lots and lots of code</h3><div id="outline-text-headline-3" class="outline-text-3"><p>
Kubernates 截止到 2020 3月初已经有超过 580000 行 go 代码了。这是真实的代码量，不包括注释和空行，也不包括第三方包。2019 年有一个安全 review 对这些代码有如下描述：</p><blockquote><p>Kubernates 的代码有很大提升空间。代码量大且复杂，有大量代码只有少量注释并且还有很多依赖，包括 kubernates 系统外的。有很多重复的逻辑应该用支持库的形式来减少复杂度，方便打补丁，减少在代码各处写文档的负担。</p></blockquote><p>
公平的说，这个和其他大型项目类似，但是这些都是需要你处理的，如果你想让你的程序正常运行。</p></div></div><div id="outline-container-headline-4" class="outline-3"><h3 id="headline-4">
Architectural complexity, operational complexity, configuration complexity, and conceptual complexity</h3><div id="outline-text-headline-4" class="outline-text-3"><p>
kubernates 是个有很多服务，系统和组件的复杂系统。</p><p>
在你运行一个简单程序前，你需要先理解已经被简化过的系统架构。</p><p>
在 kubernates 概念的文档里面，包含很多类似下面的声明：</p><blockquote><p>Kubernates 里面 EndpointSlice 包括一些针对 network endpoints 的引用。当指定选择器的时候，EndpointSlice 控制器会为 kubernates 服务自动创建 EndpointSlice。这些 EndpointSlice 会包括对符合服务器选择器的 Pods 的引用。 EndpointSlice 通过唯一的服务器和端口来组合 network endpoints。</p><p>
默认情况下，每个 EndpointSlice 控制器可以管理不超过 100 endpoints。Below this scale, EndpointSlices should map 1:1 with Endpoints and Services and have similar performance.</p></blockquote><p>
里面上文需要很多概念：EndpointSlice, Service, selector, Pod, Endpoint。</p><p>
大部分情况下你并不需要这些特性，不过大部分情况下你也不需要 kubernates 。。</p><p>
另一段随机选的文字：</p><blockquote><p>默认情况下，发送到 ClusterIP 或者 NodePort 服务的流量会路由到这个服务的任意一个后端。从 Kubernates 1.7 开始，可以支持把 “外部” 流量路由到接受到外来流量的节点上面的 pod，但是这个不支持 ClusterIP 方式的服务，以及更复杂的拓扑，例如 route zonally。服务拓扑特性通过允许服务创建者定义一个基于为源节点和目标节点的节点标签的路由策略来解决这个问题。</p></blockquote><p>
前面提到的安全 review 里面提到的：</p><blockquote><p>Kubernates 是一个复杂的大系统。评估团队发现配置和部署 kubernates 并不简单，很多组件有令人迷惑的默认设置，缺失的运作控制，和隐含的安全控制。</p></blockquote></div></div><div id="outline-container-headline-5" class="outline-3"><h3 id="headline-5">
Development complexity</h3><div id="outline-text-headline-5" class="outline-text-3"><p>
越深入 kubernates，会发现越难进行普通的开发：你需要理解这些不同的概念（Pod，Deployment，Server，等等）才能运行你的代码。所以你需要运行一个完整的 k8s 系统，仅仅为了测试，通过 VM 或者嵌套的 Docker 容器。</p><p>
因为你的程序很难在本地运行，开发变的更难，有一些不同的解决方案，从 staging 环境代理本地进程到集群里面（多年前我为这个写了一个<a href="https://www.telepresence.io/">工具</a>），代理远程进程到本地机器。</p><p>
有很多不那么完美的方案可以使用，最简单完美的方案就是不用 kubernates。</p></div></div><div id="outline-container-headline-6" class="outline-3"><h3 id="headline-6">
Microservices (are a bad idea)</h3><div id="outline-text-headline-6" class="outline-text-3"><p>
第二个问题是，因为这个系统允许你跑很多的 service，所以会更倾向于写很多的 service。这不是个好主意。</p><p>
分布式的系统很难写正确。更多的组件，意味着更多的问题需要处理。</p><p>
分布式系统也很难 debug。You need whole new categories of instrumentation and logging to getting understanding that isn’t quite as good as what you’d get from the logs of a monolithic application.</p><p>
微服务是一种 organizational scaling 技术：当有 500 人为一个网站做开发的时候，为了让大家可以独立工作而为分布式系统付出的代价是值得的。划分成多个 5 个人的微服务团队，他们把其他微服务当作是外部不可可信赖的服务。</p><p>
如果你是个 5 人团队，有 20 个微服务，你并不迫切需要分布式系统。不像人家大公司是 5 个人维护一个服务，你是 0.25 人维护一个服务。</p></div></div></div></div><div id="outline-container-headline-7" class="outline-2"><h2 id="headline-7">
But isn’t it useful?</h2><div id="outline-text-headline-7" class="outline-text-2"><div id="outline-container-headline-8" class="outline-3"><h3 id="headline-8">
Scaling</h3><div id="outline-text-headline-8" class="outline-text-3"><p>
当你经常需要扩展的时候 Kubernates 是有用的。不过有一些替代方案</p><ul><li><p>你可以使用云虚拟机，最多可以支持 416 vCPU 和 8T 内存，a scale I can only truly express with profanity。虽然贵，但是它保持了简单。</p></li><li><p>可以简单的使用类似 Heroku 的服务扩展比较简单的网站服务。</p></li></ul><p>这是基于假定，增加更多的工作节点会带来更多的好处：</p><ul><li><p>大部分程序不需要扩展很多，一些明智的优化足够了。</p></li><li><p>大部分网站程序的扩展瓶颈是在数据库，不是 web 工作节点。</p></li></ul></div></div><div id="outline-container-headline-9" class="outline-3"><h3 id="headline-9">
Reliability</h3><div id="outline-text-headline-9" class="outline-text-3"><p>
越多的组件表示越多的错误的可能性。</p><p>
Kubernates 提供的可用性特性（健康检查，滚动更新），可以用更简单的方式实现，或者很多时候都内置了。例如，nginx 可以针对工作节点做健康检查，你也可以使用 docker-autoheal 或者类似的东西来重启服务。</p><p>
如果你关心宕机时间，首先想的不应该是：我如何把部署引起的宕机时间从 1 秒减少到 1 毫秒。应该是：当出问题的时候如何保证数据库结构变化不会阻止回滚操作。</p><p>
如果你想要高可用，不想要单点故障，有很多的方法可以在不使用 kubernates 的情况下实现。</p></div></div></div></div><div id="outline-container-headline-10" class="outline-2"><h2 id="headline-10">
Best practices?</h2><div id="outline-text-headline-10" class="outline-text-2"><p>
其实没有啥通用的最佳实践，只有某些特定情况下的最佳实践。某些东西开始流行不表示选择这些东西就是对的。</p><p>
某些情况下 kubernates 是好东西。另外一些情况下不是。</p><p>
除非你想要那种复杂性，有很多组件工具也可以做的挺好： from Docker Compose on a single machine, to Heroku and similar systems, to something like Snakemake for computational pipelines.</p></div></div><div id="outline-container-headline-11" class="outline-2"><h2 id="headline-11">
读后感</h2><div id="outline-text-headline-11" class="outline-text-2"><p>
作者里面提到的小公司没必要折腾是对的，也就三五台机器还整这个就是浪费。微服务也是，服务比人还多，一个人需要不停的在不同的服务间游走的时候就很烦躁。</p><p>
web 程序确实也比较容易实现高可用，而且这些服务的瓶颈确实在数据库，而且 kubernates 确实也对数据不那么友好。</p><p>
但是 kubernates 可以利用集群的资源来跑服务，这样更不容易出现故障，也强制要求大家抽象自己的服务到 pod，让服务扩展和恢复更简单。另外，部署引起的宕机虽然意义没那么重大，但是技术体现和追求的不就是这点边界么？99.999% 的可用性和 99.99% 相比，付出肯定不是线性的。</p></div></div></content></item><item><title>Book Review of Kubernates in Action</title><link>https://wdicc.com/book-review-of-kubernates-in-action/</link><pubDate>Thu, 05 Mar 2020 16:02:50 +0800</pubDate><guid>https://wdicc.com/book-review-of-kubernates-in-action/</guid><description>这几天看了一下 Kubernates in action 这本书，看的是中文版本。把自己觉得有用的记录一下。 怎么决定一个 pod 里面包含多少容器</description><content type="text/html" mode="escaped"><p>这几天看了一下 Kubernates in action 这本书，看的是中文版本。把自己觉得有用的记录一下。</p><blockquote><p>怎么决定一个 pod 里面包含多少容器？基本上更倾向于分开。</p><ol><li><p>它们必须要一起运行还是可以在不同主机运行？</p></li><li><p>他们代表的是一个整体还是相互独立的组件？</p></li><li><p>他们必须一起进行扩缩容还是可以分别进行？</p></li></ol></blockquote><blockquote><p>pod 定义中的端口是展示性的，有没有设置不影响是否可以被连接，明确定义的 pod 端口可以方便查看，另外为端口命名还可以方便引用。</p></blockquote><blockquote><p>可以使用 kubectl explain pod.spec 查看具体字段的定义</p></blockquote><blockquote><p>可以使用 kubectl port-forward kubi-manual 8888:8080 把本地 8888 的请求转发到对应的 kubi-manual pod 里面。</p></blockquote><blockquote><p>使用标签组织 pod 可以方便的管理。</p><ol><li><p>app：指定 pod 属于哪个应用，组件，或者微服务。</p></li><li><p>rel：指定 pod 中运行的程序是版本是 stable，beta，canary。</p></li></ol><p>可以在 pod.yaml 文件中指定 label，也可以使用 kubectl label po kubia-manual rel=stable 增加标签。更改现有标签，需要使用 –overwrite 参数。</p></blockquote><p>
TODO：命令行指定标签之后，如果再次 apply 那个 yaml 会出现什么情况？</p><blockquote><p>可以使用 kubectl label node worker1 gpu=true 给 node 打标签。</p></blockquote><blockquote><p>可以使用 nodeSelector 指定调度到符合条件的 node 上面。node 有一个 kubernates.io/hostname 标签是 node 的 hostname。</p></blockquote><blockquote><p>在使用多个 ns 的前提下，我们可以将包含大量组件的复杂系统拆分为更小的不同组，这些不同组也可以用于在多租户环境中分配资源，将资源分配为生产、开发和 QA 环境，或者以其他任何你需要的方式分配资源。资源名称只需要在命名空间内唯一即可，因此两个不同的命名空间可以包含同名的资源。</p><p>
命名空间还可以用于允许某些用户访问某些特定资源，甚至限制单个用户可用的计算资源数量。</p><p>
alias kcd=`kubectl config set-context $(kubectl cofig current-context) –namespace`</p><p>
然后使用 kcd some-namespace 来切换。</p><p>
命名空间之间是否网络隔离取决于 kubernates 使用的网络解决方案。</p></blockquote><blockquote><p>pod 的两个 probe 探针很重要</p><ol><li><p>readiness: 就绪探针，用来表示 pod 已经可以接受请求了。</p></li><li><p>liveness: 存活探针，用来表示 pod 是不是还在正常工作。有几个属性需要注意：delay 容器启动之后等多久开始监测，timeout 监测超时，period 周期。</p></li></ol><p>一个 pod 重新部署之后，可以通过 kubectl logs mypod –previous 看前一个 pod 的日志。</p><p>
对于 liveness probe，一定要检查程序内部，而没有任何外部因素的影响。例如，当服务器无法连接到后端数据库的时候，前端 web 服务器的存活探针不应该返回失败。如果问题的底层原因在数据库中，重启 web 服务器容器不会解决任何问题，由于重启之后探针会继续失败，web 容器将被反复重启。同时保持探针轻量，无需在探针里面重试。</p></blockquote><blockquote><p>一个 RC(replicationController) 有三个主要部分</p><ol><li><p>label selector：选择 pod</p></li><li><p>replica count：有几个副本</p></li><li><p>pod template：pod 定义</p></li></ol><p>如果某个 pod 发生了故障，可以将它从 rc 的管理范围里面移除（例如通过修改 label，增加一个 enable=true 选项），让控制器替换为新的 pod，这个旧的 pod 就任你处置了，用完后删除就可以了。</p></blockquote><p>
TODO：测试一下通过修改 label 从 rc，rs，deploy 里面移除 pod。</p><blockquote><p>KUBE_EDITOR 环境变量用来指定执行 kubectl edit 命令的时候使用的编辑器，如果没设置，会使用 EDITOR 环境变量。</p></blockquote><blockquote><p>使用 kubectl delete rc 删除 rc 的时候，可以使用 –cascade=false 来保留 pod 继续运行。</p></blockquote><blockquote><p>节点可以被设置为不可以调度，防止 pod 被部署到节点。但是 DeamonSet 甚至会将 pod 部署到这些节点，因为无法调度的属性只会被调度器使用，DeaemonSet 管理的 pod 则完全绕过调度器。这是符合预期的，因为 DaemonSet 的目的是运行系统服务，即使在不可调度的节点上，系统服务通常也是需要运行的。</p></blockquote><blockquote><p>job 的 restartPolicy 只能是 OnFailure 或者 Never，不能是 Always。</p><p>
可以通过 completions 和 parallelism 指定需要运行的总数和同时运行的数量。</p></blockquote><blockquote><p>service 允许通过 sessionAffinity 来指定会话亲和性。可选值有 None 和 ClientIP。因为 service 不是工作在 http 层面，所以不能基于 cookie 来做。</p><p>
前面提到的 pod 模版里面给端口命名的格式在 service 里面有用了，可以通过端口名称引用定义的端口，这样好处是即使更换端口号也无需更改服务 spec。</p><p>
当前端 pod 需要访问后端数据库服务 pod 时，可以通过名为 backend-database 的 service 将后端 pod 暴露出来</p><ol><li><p>前端 pod 可以通过环境变量去获取服务的 IP 地址和端口。</p></li><li><p>通过 FQDN 连接，backend-database.default.svc.cluster.local 。</p></li></ol></blockquote><p>
也可以使用 static service 包装外部资源（比如和其他公司合作，对方提供的服务）</p><ol><li><p>只有ip：自定义 endpoint 指向外部 ip。</p></li><li><p>域名：通过 service.spec.externalName 新建一个 cname。</p></li></ol><p>这样例如以后有需要的时候，可以把外部服务迁移到内部，而内部代码不用做任何改变。（似乎有点蛋疼。。。可能只有当服务够多的时候有意义吧，例如如果有 10 个服务使用到了这个 service 。。）</p><p>
一般情况下，node 上面会通过 iptables 把对 service 的请求随机转发到 pod 上面。把 externalTrafficPolicy 字段设置为 Local 可以避免多余的转发，只会到本地的 pod。这样会带来一些问题，没有 pod 的机器上面将不能访问通，负载将可能不再均衡，例如一个机器上面有多个 pod 的时候。</p><p>
TODO: 对于 headless 服务，没有 clusterIP，可以通过域名访问，那么对于有 clusterIP 的，是不是也可以通过域名访问？</p><p>
需要测试网络的时候，可以使用 tutum/dnsutils 容器，里面包括了 nslookup 和 dig。</p><p>
设置 emptyDir 的属性 midium: Memory 可以建立内存文件系统。可以使用 gitRepo 建立 gitrepo 类型的 vol，会自动获取代码，私有服务需要配置对应的凭证（imagePullSecrets）。</p><p>
可以使用 sidecar 容器配合主容器做一些事情，例如自动同步更新 git 代码，建立访问 API 的代理等。</p><p>
TODO: 可以使用 awsElasticBlockStore 创建 aws 的磁盘挂载，需要测试一下例如新建删除是如何管理的，通过什么来识别的。</p><p>
PV 持久卷可以设置 accessModes 例如 ReadWriteOnce, readOnlyMany 等，可以设置 persistentVolumeReclaimPolicy 为 Retain 保留数据。</p><p>
PV 需要提前声明，才能被 PVC 使用。在云服务里面，可以事先定义 StorageClass 来提供给 PVC 使用，定义好 provisioner 提供商即可。</p><p>
Dockerfile 里面 ENTRYPOINT 的两种形式，区别在于 pid 1 的进程是什么，1 是 /bin/sh。</p><ol><li><p>shell 形式：ENTRYPOINT node app.js</p></li><li><p>exec 形式：ENTRYPOINT ["node", "app.js"]</p></li></ol><p>Dockerfile 里面的配置和 kubernates 里面的对应：</p><ol><li><p>ENTRYPOINT: command 可执行文件</p></li><li><p>CMD: args 传递的参数，参数里面字符串不用引号，数值需要引号。</p></li></ol><p>ConfigMap 数据可以通过环境变量或者卷文件的形式传递给容器。</p><ol><li><p>–from-file=bar=foobar.conf：bar 的值为文件内容</p></li><li><p>–from-file=foo.json：相当于 –from-file=foo.json=foo.json</p></li><li><p>–from-file-config-opts/：config-opts 目录里面的每个文件都会用文件名和文件内容创建键值对。</p></li><li><p>–from-literal=some=thing：创建 some=thing</p></li></ol><p>把 ConfigMap 引入环境变量:</p><ol><li><p>通过 spec.containers.env.valueFrom.configMapKeyRef.{name,key} 引用名为 name 的 configmap 里面的 key。设置 configMapKeyRef.optional: true 可以设置为可选。</p></li><li><p>通过 spec.containers.envFrom.prefix: pre_ 设置引入所有 pre_ 开头的变量。</p></li><li><p>如果 ConfigMap 里面有键名格式不正确，创建环境变量的时候会被忽略而不会报错。例如 CONFIG_FOO-BAR 这样的。</p></li></ol><p>可以使用 volumeMounts.subPath 只挂载部分卷而不是全部的，例如只挂载里面某个文件，某个子目录。</p><ol><li><p>这样有一个问题，据说是这么挂载的时候，更新 ConfigMap 不会更新文件。TODO: 检查是不是这样的。</p></li></ol><p>通过 defaultMode 可以改变挂载属性。</p><p>
ConfigMap 更新之后，卷会自动更新，但是卷对应的文件更新可能会花一些时间（例如数分钟）。</p><ol><li><p>文件更新之后需要你的程序重新读入才能真正产生影响。</p></li><li><p>如果不支持自动读入，那可能会导致新建的 pod 用的是新的 ConfigMap，旧的依然用的是旧的。</p></li><li><p>并且自动更新在各个 pod 出现的时间也有区别，可能会有先后。</p></li></ol><p>Secret 和 ConfigMap 类似，也可以使用环境变量或者卷的形式传递给 pod。Secret 只会存在于内存中。</p><ol><li><p>采用 ConfigMap 存储非敏感的文本配置数据。</p></li><li><p>采用 Secret 存储天生敏感的数据，如果配置文件同时存在敏感和不敏感的，那应该用 Secret。</p></li></ol><p>
可以使用 Downward API 获取 pod 的元信息。</p><ol><li><p>pod 名称</p></li><li><p>pod ip</p></li><li><p>pod 所在的 ns</p></li><li><p>pod 运行的 node 名称</p></li><li><p>pod 运行的所属账户的名称</p></li><li><p>每个容器请求的 CPU 和内存的使用量</p></li><li><p>每个容器可以使用的 CPU 和内存的限制</p></li><li><p>pod 的标签</p></li><li><p>pod 的注解</p></li></ol><p>可以通过 spec.containters.env.valueFrom.fieldRef.fieldPath: metadata.name 引用 metadata 的数据。也可以使用 Downward API 卷获取这些数据。</p><p>
还可以通过和 API 服务交互获取数据，token 卷会自动 mount 到 pod 里面，也可以通过一个 kubectl proxy sidecar 容器来转发。</p><p>
Docker image 的 tag 是版本号，需要能保证某个 tag 固定指向某个 image 版本，最好不要覆盖已经发布的 tag 对应的 image，否则容易出现不一致的情况。对于 latest（或者不指定） tag，imagePullPolicy 默认是 Always，如果指定来其他 tag，默认策略是 IfNotPresent。</p><p>
可以使用 kubectl rolling-update kubia-v1 kubia-v2 –image-luksa/kubia:v2 来升级 RC replicationcontroller。执行的时候，会创建一个 kubia-v2 的 rc，然后通过给 rc 和 pod 增加 label 并通过修改 replicas 数量逐渐用新的代替旧的。执行升级过程中，如果 kubectl 失去网络，可能会导致 rc 和 pod 处于中间状态。</p><blockquote><p>使用 Deployment 的时候，实际的 pod 是由 Deployment 和 ReplicaSet 共同管理的。</p><p>
Deployment 升级的时候，只需要修改 deploy 的定义即可。升级有两种策略</p><ol><li><p>Recreate：旧的全部删除之后才开始创建新的。</p></li><li><p>RollingUpdate：渐进式替代，升级过程中会有新旧版本共存状态。</p></li></ol><p>使用 spec.minReadySeconds 指定新 pod 最小存活时间。</p><p>
使用 kubectl set image deployment kubia nodejs=luksa/kubia:v2 修改为新版本的 image 进行升级。</p></blockquote><p>
TODO: 可以通过 kubectl 命令直接操作修改，也可以通过 yaml 方式修改，那么如何保证双方状态一致？要不下次执行 yaml 的时候可能会把一些 kubectl 的操作回滚。</p><blockquote><p>更改 ConfigMap 资源不会触发升级操作，如果需要通过修改配置触发更新，那可以新建一个新的 ConfigMap，然后修改 pod 模版使用这个新的。</p><p>
使用 kubectl rollout undo deployment kubia 可以回滚到上一个版本。</p><p>
undo 命令也可以在滚动升级过程中执行，并直接停止滚动升级。升级过程中创建的新的 pod 会被删除并被老版本替代。</p><p>
使用 kubectl rollout history deployment kubia 可以查看旧版本。使用 –to-revision=1 可以回滚到特定版本。创建 deploy 时使用 –record 记录 CHANGE-CAUSE。</p><p>
不应该手动删除 ReplicaSet，如果这么做可能会丢失 Deploy 的历史版本记录而导致无法回滚。</p><p>
revisionHistoryLimit 属性可以限制历史版本数量。</p><p>
使用 kubectl rollout status 可以查看升级过程。</p><p>
使用 maxSurge 和 maxUnavailable 控制升级的速度。</p><p>
使用 kubectl rollout pause deployment kubia 可以暂停升级，这个时候可以做金丝雀测试。使用 kubectl rollout resume deploy kubia 恢复。</p><p>
默认情况下，如果 10 分钟内不能完成升级会被视为失败。可以设置 spec.progressDeadlineSeconds 来设置这个时间。</p></blockquote><blockquote><p>StatefulSet 最初被叫做 PetSet，因为 pet 是有名字的。。。。无状态的类似牛，都没名字。。</p><p>
StatefulSet 做缩容一次只会操作一个节点，在有实例不健康的情况下是不允许做缩容操作的。</p><p>
Kubernates 必须保证两个拥有相同标记和绑定相同持久卷声明的有状态的 pod 实例不会同时。一个 StatefulSet 必须保证有状态的 pod 实例的 at-most-one 语义。也就是说一个 StatefulSet 必须在准确确认一个 pod 不在运行后，才会去创建它的替换 pod。</p></blockquote><p>
yaml 文件里面可以使用 — 来区分多个资源，也可以使用 kind: List 创建多个资源。</p><p>
StatefulSet 里面，每个节点挂载的数据卷有两个方式实现：</p><ol><li><p>使用 volumeClaimTemplates 挂载不同的卷。</p></li><li><p>使用 PVC 挂载相同的卷，但是在卷里面使用不同的目录区分各节点的数据。</p></li></ol><p>节点失败的时候，普通 pod 会被如何处理：</p><ol><li><p>节点会被标记为 NotReady。上面运行的 pod 状态变成 Unknown。</p></li><li><p>pod Unknown 一段时间之后，kubernates 标记这些 pod 为删除，同时安排其他节点新建对应的 pod。</p></li><li><p>节点重新加入后会知道需要删除上面的 pod，执行删除。</p></li></ol><p>对于 StatefulSet：</p><ol><li><p>pod 会被标记为 Unknown。</p></li><li><p>执行手动强制删除 kubectl delete po kubia-0 –force –grace-period 0</p></li><li><p>kubernates 会调度其他节点新建 pod。</p></li></ol><p>可以使用 kubectl get pods –watch 观察 pod 事件。使用 kubectl get events –watch 观察控制器发出的事件。</p><p>
kubernates 调度器的作用是为 pod 找到可用节点，然后选择最优节点。可以通过 spec.schedulerName 来指定调度器。</p><p>
跨 pod 的网络是通过 Container Network Interface(CNI) 插件建立的。跨整个集群的 pod 的 IP 地址必须是唯一的，所以跨节点的网桥必须使用非重叠的地址段，防止不同的 pod 拿到同一个 IP。例如不同节点分别使用 10.1.1.0/24 和 10.1.2.0/24 。</p><blockquote><p>让你的应用变得高可用：</p><ol><li><p>运行多实例来减少宕机可能性。</p></li><li><p>对不能水平扩展的应用使用领导选举机制。可以通过 sidecar 容器做选举的逻辑，选举完毕之后通知主容器结果即可。这样的 sidecar 可以复用。</p></li></ol><p>kube-schedular 容器的选举结果可以观察 holderIdentity 字段，还可以看看 acquireTime 和 renewTime。</p></blockquote><blockquote><p>serviceaccount 的缩写是 sa。每个 pod 都与一个 sa 相关联。pod 只能使用同一个命名空间的 ServiceAccount。</p><p>
pod 的 manifest 文件里面，可以指定账户名称。不指定会使用这个命名空间里面默认的。</p><p>
不需要读取任何集群元数据的 pod 应该运行在一个受限制的账户下。</p></blockquote><blockquote><p>将 spec.hostNetwork 设置为 true 可以使用宿主节点的网络命名空间。</p><p>
不要混淆使用 hostPort 的 pod 和通过 NodePort 服务暴露的 pod。</p><ol><li><p>NodePort 服务会把到达宿主机的请求随机转发到 service 里面的 pod 。</p></li><li><p>hostPort 只会在运行了这个 pod 的节点绑定这个端口，NodePort 会在集群所有节点上面绑定这个端口。</p></li></ol><p>hostPort 最初是用于暴露 DeamonSet 部署在每个节点的系统服务的，也用于保证一个 pod 的两个副本不会被调度到同一个节点。</p><p>
pod spec 里面的 hostPID 和 hostIPC 可以让容器使用宿主节点的 PID 和 IPC 命名空间，允许容器看到宿主的全部进程并与他们进行 IPC 通信。</p><p>
securityContext 的一些设置：</p><ol><li><p>runAsUser 指定容器运行的用户。runAsAny 允许任何用户和组运行。</p></li><li><p>runAsNonRoot 可以阻止容器使用 root 运行。</p></li><li><p>privileged 可以允许 pod 在特权模式下运行。</p></li><li><p>通过 capabilities 可以允许或者禁止容器进行特定的系统调用。</p></li><li><p>通过 fsGroup 和 supplementalGroups 可以设置挂载卷的一些权限。</p></li></ol></blockquote><blockquote><p>通过 PodSecurityPolicy 可以设置默认的安全配置。通过 NetworkPolicy 可以设置 pod 间网络规则。</p></blockquote><blockquote><p>调度器在调度时并不关注各类资源在当前时刻的实际使用量，而只是关心节点上部署的所有 pod 的资源申请量之和。调度算法必须要保证这些 pod 需要这些用量的时候可以提供。</p><p>
内存不足时哪个进程会被杀死？BestEffort 等级的 pod 会首先被杀掉，其次是 Burstable 的 pod，最后是 Guaranteed 的 pod。</p></blockquote><blockquote><p>可以通过调整 rc, rs, deploy 等可伸缩资源的 replicas 字段来手动实现 pod 中应用的横向扩容。</p><p>
集群必须运行了 Heapster 才能实现自动伸缩。</p><p>
自动伸缩大致逻辑是，设置目标用量，例如 cpu 使用率，qps 之类，然后由 Autoscaler 根据目前的 pod 数量和各自的运行情况，计算达成目标的 pod 数量，然后调整可伸缩资源来做扩缩容。</p><p>
使用 kubectl get hpa 显示 HPA 资源。</p><p>
如果增加副本数量不能导致被观测度量的平均值线性（或者接近线性）下降，那么 autoscaler 就不能正常工作。</p><p>
Cluster Autoscaler 负责在节点资源不足的时候，自动增加节点。它也会在节点长时间使用率比较低的情况下下线节点。</p><ol><li><p>只有当 Cluster Autoscaler 知道节点上面运行的 pod 能够重新调度到其他节点的时候节点才会被归还。</p></li></ol><p>节点也可以被手动标记为不可调度，并排空节点</p><ol><li><p>kubectl cordon &lt;node> 标记节点为不可调度（但不会对其上 pod 做任何事）</p></li><li><p>kubectl drain &lt;node> 标记节点为不可调度，随后疏散其上所有 pod</p></li></ol></blockquote><blockquote><p>主节点有一个污点，污点包含一个 key，value，以及一个 effect，格式是 &lt;key>=&lt;value>:&lt;effect>。主节点包含一个 node-role.kubernates.io/master:NoSchedule 的污点(value为空)。除非有 pod 指定可以容忍这个污点，否则 pod 不会调度到这个节点。</p><p>
pod 的 Tolerations 字段会说明可以容忍的污点，例如 node-role.kubernates.io/master=:NoSchedule 。注意污点和容忍度这里的区别，差了一个 = 。</p><p>
使用 kubectl taint node node1.k8s node-type=production:NoSchedule 增加污点.</p><p>
pod 定义里面增加对应的 tolerations 才能把 pod 部署上去。</p><p>
tolerations:</p><ul><li><p>key: node-type
operator: Euqal
value: production
effect: NoSchedule</p></li></ul></blockquote><blockquote><p>使用节点亲缘性 node affinity 将 pod 调度到特定节点上。</p><p>
通过 spec.affinity.nodeAffinity 可以实现比 nodeSelector 复杂的调度规则。还有 spec.affinity.podAffinity 和 podAntiAffinity 。</p></blockquote><blockquote><p>应用必须预料到会被杀死或者重新调度</p><ol><li><p>预料到本地 IP 和主机名会变化。</p></li><li><p>预料到写入磁盘的数据会消失。使用存储卷来跨容器持久化数据。</p></li></ol><p>rs 本身不关心 pod 是否处于死亡状态，只关心 pod 的数量是否匹配期望的数量。crash 的时候也不会重新调度 pod，因为通常调度到其他 node 也是这么个情况，一般认为这些 node 都是一样的。</p><p>
可以给 pod 增加 pre-stop 和 post-start hook。</p><ol><li><p>post-start hook 是和主进程并行执行的。在钩子执行完毕之前，容器会一直停留在 Waiting 状态，其原因是 ContainerCreating 。因此 pod 的状态是 Pending 而不是 Running。如果钩子失败或者返回了非 0 的状态码，主容器会被杀死。</p></li><li><p>钩子程序失败的话，不好 debug，容器重启的话日志就没有了，不过可以通过写入到一个 emptyDir 的卷里面，让钩子程序向这个存储写入内容来解决。</p></li><li><p>pre-stop 钩子是在容器被终止之前执行的。并且会在执行完钩子程序之后才向容器进程发送 SIGTERM 信号。</p></li><li><p>pre-stop 钩子无论执行成功失败都不会阻止容器被停止。</p></li></ol><p>将重要的关闭流程替换为专注关闭流程的 pod。</p></blockquote><blockquote><p>当且仅当你的应用准备好处理进来的请求的时候，才去让就绪探针返回成功。</p></blockquote><blockquote><p>给所有资源都打上标签，而不仅仅是 pod。标签可以包含如下的内容：</p><ul><li><p>资源所属的应用（或者微服务）的名称</p></li><li><p>应用层级（前端，后端，等等）</p></li><li><p>运行环境（开发，测试，预发布，生产等等）</p></li><li><p>版本号</p></li><li><p>发布类型（稳定版，金丝雀，蓝绿开发中的绿色或者蓝色等等）</p></li><li><p>租户（如果你在每个租户中运行不同的 pod 而不是使用命名空间）</p></li><li><p>分片（带分片的系统）</p></li></ul><p>资源应该至少包括一个描述资源的注解和一个描述资源负责人的注解。在微服务框架中，pod 应该包含一个注解来描述该 pod 依赖的其他服务的名称。</p></blockquote><p>
可以指定 spec.containers.terminationMessagePath 路径，将来 pod 有问题会读取这个文件里面的内容显示在 describe 结果里面。</p><p>
通过自定义 CustomResourceDefinitions CRD 对象，可以做到类似 deploy 那样，自动帮你建立好 rs 和 pod，并且还可以避免重复的写冗长的 pod 定义之类。</p><p>
实现思路是，需要配合建立一个自定义控制器，监听 API 上面的 CRD 对象的事件，例如有新建的时候，像 API 提交对应的 deploy pod 等新建请求。删除 CRD 的时候，删除相关联的资源。</p><p>
其他资源：</p><ol><li><p><a href="https://github.com/box/kube-applier">https://github.com/box/kube-applier</a> 可以做到自动检出 yaml 执行 apply。</p></li><li><p><a href="https://ksonnet.io/docs/">https://ksonnet.io/docs/</a> 可以方便的复用 yaml 文件的配置，让你随意组合他们。</p></li><li><p><a href="https://fabric8.io/">https://fabric8.io/</a> 也是一个自动部署的工具。</p></li><li><p><a href="https://helm.sh/">https://helm.sh/</a> 是一个 kubernates 包管理器，可以类似装包一样部署 pod。其实就是他们事先写好了一堆的 pod 定义。有需要自己写的时候可以先来这里看看。</p></li></ol></content></item><item><title>Interview Is a Two Way Choise</title><link>https://wdicc.com/interview-is-a-two-way-choise/</link><pubDate>Tue, 25 Feb 2020 14:51:49 +0800</pubDate><guid>https://wdicc.com/interview-is-a-two-way-choise/</guid><description>最近看到一些人贴面试经历，我觉得可以适当总结一下，结论是：面试就是一个双向选择，对方不选你不一定是因</description><content type="text/html" mode="escaped"><p>最近看到一些人贴面试经历，我觉得可以适当总结一下，结论是：面试就是一个双向选择，对方不选你不一定是因为你不优秀，只是表示你们双方不 match 而已。</p><p>
每个人都有不同的工作经历，不同的成长经历，这样会形成他特有的做事风格，他如果需要找个帮手的需要招聘的时候，他肯定会想找一个自己让觉得长时间相处可以比较舒服的人。总归不能说找一个人来了天天因为工作吵架吧？这还不够闹心的。</p><p>
每个人都有不同的世界观，如果两个世界观不同的人，想一起和平的相处就是一个比较难的事情。为什么说夫妻相处时间长了会越来越像呢，我觉得主要就是双方世界观越来越匹配，不匹配的可能中间就离婚了。。。</p><p>
一般面试官会比较有一点主动权，毕竟相对来说找工作的人会处于弱势。所以很多人会觉得如果最后没有通过有时候会有一种被欺负的感觉，感觉愤愤不平。其实没必要，你或许可以想想，公司也不会留着和公司价值观不一致的人，这个公司可能有好多这样的人，包括你未来可能周边的同事，那面试没通过不是也挺幸运的么，这样自己抉择的时候不必那么为难了。</p><p>
我非计算机专业，毕业之后去了出版社工作，几年之后我跳槽去了 Yahoo 中国，曾经有一个面试官就这段经历问我，Yahoo 好像要求也挺高的，怎么招了你呢？这个问的我没话说了。不过这也没什么，这清晰的表明对方确实瞧不上我，我不是对方眼里想要的人，我也不用继续期待后续的面试了。</p><p>
在面试过程中，需要去注意的，是对方的思路，明白对方想要什么。面试完毕之后，建议都回想复盘一下，自己对每个问题的回答，自己对自己经历的介绍，对自己未来职业的规划，这些在表达的时候是否有需要调整的地方，以便可以在下次面试里面给对方更好的表现。</p><p>
简历就是给对方的菜单，面试过程就是和对方推销自己，能不能找到合适的买家，然后把自己卖出高价，就看这两方面了。</p></content></item><item><title>Google Python Style Guide</title><link>https://wdicc.com/google-python-style-guide/</link><pubDate>Sun, 02 Feb 2020 16:20:21 +0800</pubDate><guid>https://wdicc.com/google-python-style-guide/</guid><description>来自这里。翻译的目的是为了方便快速理解，所以没有太纠结很准确，最好是和英文对应看。 1 Background Google 的 python 代码风格</description><content type="text/html" mode="escaped"><p>
来自<a href="https://google.github.io/styleguide/pyguide.html">这里</a>。翻译的目的是为了方便快速理解，所以没有太纠结很准确，最好是和英文对应看。</p><div id="outline-container-headline-1" class="outline-3"><h3 id="headline-1">
1 Background</h3><div id="outline-text-headline-1" class="outline-text-3"><p>
Google 的 python 代码风格指导。</p><p>
有一个 vim 的配置。 Emacs 默认的似乎就可以。</p><p>
还有团队使用 yapf 自动格式化代码来避免对格式产生争论。</p></div></div><div id="outline-container-headline-2" class="outline-3"><h3 id="headline-2">
2 Python Language Rules</h3><div id="outline-text-headline-2" class="outline-text-3"><div id="outline-container-headline-3" class="outline-4"><h4 id="headline-3">
2.1 Lint</h4><div id="outline-text-headline-3" class="outline-text-4"><p>
使用 pylint 检查代码。</p><p>
可以通过行内注释关闭一些 warning</p><div class="src src-python"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="nb">dict</span><span class="o">=</span><span class="s1">'something awful'</span><span class="c1"># Bad Idea... pylint: disable=redefined-builtin</span></code></pre></div></div></div></div><div id="outline-container-headline-4" class="outline-4"><h4 id="headline-4">
2.2 Imports</h4><div id="outline-text-headline-4" class="outline-text-4"><ul><li><p><code>import x</code> 引入包或者模块</p></li><li><p><code>from x import y</code> x 是包前缀，y 是模块名称</p></li><li><p><code>from x import y as z</code> 如果有两个模块都叫 y 或者 y 的名字太长了</p></li><li><p><code>import y as z</code> 只有在 z 是个比较常见的缩写（例如 np 作为 numpy 的缩写）</p></li></ul><p>例如<code>sound.effects.echo</code></p><div class="src src-python"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span><span class="nn">sound.effects</span><span class="kn">import</span><span class="n">echo</span><span class="o">...</span><span class="n">echo</span><span class="o">.</span><span class="n">EchoFilter</span><span class="p">(</span><span class="nb">input</span><span class="p">,</span><span class="n">output</span><span class="p">,</span><span class="n">delay</span><span class="o">=</span><span class="mf">0.7</span><span class="p">,</span><span class="n">atten</span><span class="o">=</span><span class="mi">4</span><span class="p">)</span></code></pre></div></div></div></div><div id="outline-container-headline-5" class="outline-4"><h4 id="headline-5">
2.3 Packages</h4><div id="outline-text-headline-5" class="outline-text-4"><p>
总是使用全路径导入包。</p><div class="src src-python"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1"># Reference absl.flags in code with the complete name (verbose).</span><span class="kn">import</span><span class="nn">absl.flags</span><span class="kn">from</span><span class="nn">doctor.who</span><span class="kn">import</span><span class="n">jodie</span><span class="n">FLAGS</span><span class="o">=</span><span class="n">absl</span><span class="o">.</span><span class="n">flags</span><span class="o">.</span><span class="n">FLAGS</span></code></pre></div></div><div class="src src-python"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1"># Reference flags in code with just the module name (common).</span><span class="kn">from</span><span class="nn">absl</span><span class="kn">import</span><span class="n">flags</span><span class="kn">from</span><span class="nn">doctor.who</span><span class="kn">import</span><span class="n">jodie</span><span class="n">FLAGS</span><span class="o">=</span><span class="n">flags</span><span class="o">.</span><span class="n">FLAGS</span></code></pre></div></div><p>
不要像下面这样，假设在<code>doctor/who/</code> 下面有个 jodie.py。</p><div class="src src-python"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1"># Unclear what module the author wanted and what will be imported. The actual</span><span class="c1"># import behavior depends on external factors controlling sys.path.</span><span class="c1"># Which possible jodie module did the author intend to import?</span><span class="kn">import</span><span class="nn">jodie</span></code></pre></div></div><p>
这个依赖于 sys.path 的情况，无法知道是想要第三方的 jodie 还是本目录的。</p></div></div><div id="outline-container-headline-6" class="outline-4"><h4 id="headline-6">
2.4 Exceptions</h4><div id="outline-text-headline-6" class="outline-text-4"><ul><li><p>使用<code>raise MyError('Error message')</code> 或者<code>raise MyError()</code> ，不要用<code>raise MyError, 'Error message'</code></p></li><li><p>如果可以的话，使用自带的 exception。例如对于不符合要求的数据报<code>ValueError</code> 。不要使用<code>assert</code> 来验证公开 api 传入的参数。<code>assert</code> 只是用来保证内部数据的正确性的。</p></li></ul><p>使用下面这样的：</p><div class="src src-python"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="k">def</span><span class="nf">connect_to_next_port</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">minimum</span><span class="p">):</span><span class="s2">"""Connects to the next available port.</span><span class="s2"/><span class="s2"> Args:</span><span class="s2"> minimum: A port value greater or equal to 1024.</span><span class="s2"/><span class="s2"> Returns:</span><span class="s2"> The new minimum port.</span><span class="s2"/><span class="s2"> Raises:</span><span class="s2"> ConnectionError: If no available port is found.</span><span class="s2"> """</span><span class="k">if</span><span class="n">minimum</span><span class="o">&lt;</span><span class="mi">1024</span><span class="p">:</span><span class="c1"># Note that this raising of ValueError is not mentioned in the doc</span><span class="c1"># string's "Raises:" section because it is not appropriate to</span><span class="c1"># guarantee this specific behavioral reaction to API misuse.</span><span class="k">raise</span><span class="ne">ValueError</span><span class="p">(</span><span class="s1">'Minimum port must be at least 1024, not</span><span class="si">%d</span><span class="s1">.'</span><span class="o">%</span><span class="p">(</span><span class="n">minimum</span><span class="p">,))</span><span class="n">port</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">_find_next_open_port</span><span class="p">(</span><span class="n">minimum</span><span class="p">)</span><span class="k">if</span><span class="ow">not</span><span class="n">port</span><span class="p">:</span><span class="k">raise</span><span class="ne">ConnectionError</span><span class="p">(</span><span class="s1">'Could not connect to service on</span><span class="si">%d</span><span class="s1"> or higher.'</span><span class="o">%</span><span class="p">(</span><span class="n">minimum</span><span class="p">,))</span><span class="k">assert</span><span class="n">port</span><span class="o">>=</span><span class="n">minimum</span><span class="p">,</span><span class="s1">'Unexpected port</span><span class="si">%d</span><span class="s1"> when minimum was</span><span class="si">%d</span><span class="s1">.'</span><span class="o">%</span><span class="p">(</span><span class="n">port</span><span class="p">,</span><span class="n">minimum</span><span class="p">)</span><span class="k">return</span><span class="n">port</span></code></pre></div></div><p>
不要用下面这样的：</p><div class="src src-python"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="k">def</span><span class="nf">connect_to_next_port</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">minimum</span><span class="p">):</span><span class="s2">"""Connects to the next available port.</span><span class="s2"/><span class="s2"> Args:</span><span class="s2"> minimum: A port value greater or equal to 1024.</span><span class="s2"/><span class="s2"> Returns:</span><span class="s2"> The new minimum port.</span><span class="s2"> """</span><span class="k">assert</span><span class="n">minimum</span><span class="o">>=</span><span class="mi">1024</span><span class="p">,</span><span class="s1">'Minimum port must be at least 1024.'</span><span class="n">port</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">_find_next_open_port</span><span class="p">(</span><span class="n">minimum</span><span class="p">)</span><span class="k">assert</span><span class="n">port</span><span class="ow">is</span><span class="ow">not</span><span class="kc">None</span><span class="k">return</span><span class="n">port</span></code></pre></div></div><ul><li><p>可以定义自己的 Excpetion，但是应该继承已有的 exeption 类。名称应该以 Error 结尾，不要用类似 foo.FooError 这样的形式。</p></li><li><p>不要使用<code>except:</code> 捕获所有异常，或者捕获 Exception StandardError，除非：</p><ul><li><p>打算再次抛出异常</p></li><li><p>创建一个隔离，记录和抑制异常，让异常不在往上传播，例如保护一个线程不会 crash。</p></li></ul><p>python 的<code>except:</code> 会捕获包括错误的拼写，sys.exit() 调用，Ctrl+C 中断，测试用例失败，和其他的一些异常，一般不会需要都捕获。</p></li><li><p>减少<code>try/except</code> 块的代码。代码太多可能会捕获你没想到的一些异常，而隐藏真正的错误。</p></li><li><p>使用<code>finally</code> 执行一些不管有没有异常都需要执行的动作，一般可以用来做一些清理，关闭文件什么的。</p></li><li><p>捕获异常的时候使用 as 代替逗号。</p></li></ul><div class="src src-python"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="k">try</span><span class="p">:</span><span class="k">raise</span><span class="n">Error</span><span class="p">()</span><span class="k">except</span><span class="n">Error</span><span class="k">as</span><span class="n">error</span><span class="p">:</span><span class="k">pass</span></code></pre></div></div></div></div><div id="outline-container-headline-7" class="outline-4"><h4 id="headline-7">
2.5 Global variables</h4><div id="outline-text-headline-7" class="outline-text-4"><p>
避免使用全局变量。</p><p>
全局的常量使用全大写。可以在变量前面加 _ 表示是内部的，外部应该使用公共方法来读取这些变量。</p></div></div><div id="outline-container-headline-8" class="outline-4"><h4 id="headline-8">
2.6 Nested/Local/Inner Classes and Functions</h4><div id="outline-text-headline-8" class="outline-text-4"><p>
本地局部的函数或者类定义可以方便使用，但是这些类的实例不能被 pickled 序列化。也不能被直接测试，而且还会导致你的程序变长。不要用这个方式来隐藏一些方法，应该使用加 _ 的方法。</p></div></div><div id="outline-container-headline-9" class="outline-4"><h4 id="headline-9">
2.7 Comprehensions &amp; Generator Expressions</h4><div id="outline-text-headline-9" class="outline-text-4"><p>
简单的情况可以用。map 表达式，for 语句，filter 表达式。多个 for 或者 filter 不允许。使用循环吧。</p><div class="src src-python"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">Yes</span><span class="p">:</span><span class="n">result</span><span class="o">=</span><span class="p">[</span><span class="n">mapping_expr</span><span class="k">for</span><span class="n">value</span><span class="ow">in</span><span class="n">iterable</span><span class="k">if</span><span class="n">filter_expr</span><span class="p">]</span><span class="n">result</span><span class="o">=</span><span class="p">[{</span><span class="s1">'key'</span><span class="p">:</span><span class="n">value</span><span class="p">}</span><span class="k">for</span><span class="n">value</span><span class="ow">in</span><span class="n">iterable</span><span class="k">if</span><span class="n">a_long_filter_expression</span><span class="p">(</span><span class="n">value</span><span class="p">)]</span><span class="n">result</span><span class="o">=</span><span class="p">[</span><span class="n">complicated_transform</span><span class="p">(</span><span class="n">x</span><span class="p">)</span><span class="k">for</span><span class="n">x</span><span class="ow">in</span><span class="n">iterable</span><span class="k">if</span><span class="n">predicate</span><span class="p">(</span><span class="n">x</span><span class="p">)]</span><span class="n">descriptive_name</span><span class="o">=</span><span class="p">[</span><span class="n">transform</span><span class="p">({</span><span class="s1">'key'</span><span class="p">:</span><span class="n">key</span><span class="p">,</span><span class="s1">'value'</span><span class="p">:</span><span class="n">value</span><span class="p">},</span><span class="n">color</span><span class="o">=</span><span class="s1">'black'</span><span class="p">)</span><span class="k">for</span><span class="n">key</span><span class="p">,</span><span class="n">value</span><span class="ow">in</span><span class="n">generate_iterable</span><span class="p">(</span><span class="n">some_input</span><span class="p">)</span><span class="k">if</span><span class="n">complicated_condition_is_met</span><span class="p">(</span><span class="n">key</span><span class="p">,</span><span class="n">value</span><span class="p">)</span><span class="p">]</span><span class="n">result</span><span class="o">=</span><span class="p">[]</span><span class="k">for</span><span class="n">x</span><span class="ow">in</span><span class="nb">range</span><span class="p">(</span><span class="mi">10</span><span class="p">):</span><span class="k">for</span><span class="n">y</span><span class="ow">in</span><span class="nb">range</span><span class="p">(</span><span class="mi">5</span><span class="p">):</span><span class="k">if</span><span class="n">x</span><span class="o">*</span><span class="n">y</span><span class="o">></span><span class="mi">10</span><span class="p">:</span><span class="n">result</span><span class="o">.</span><span class="n">append</span><span class="p">((</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">))</span><span class="k">return</span><span class="p">{</span><span class="n">x</span><span class="p">:</span><span class="n">complicated_transform</span><span class="p">(</span><span class="n">x</span><span class="p">)</span><span class="k">for</span><span class="n">x</span><span class="ow">in</span><span class="n">long_generator_function</span><span class="p">(</span><span class="n">parameter</span><span class="p">)</span><span class="k">if</span><span class="n">x</span><span class="ow">is</span><span class="ow">not</span><span class="kc">None</span><span class="p">}</span><span class="n">squares_generator</span><span class="o">=</span><span class="p">(</span><span class="n">x</span><span class="o">**</span><span class="mi">2</span><span class="k">for</span><span class="n">x</span><span class="ow">in</span><span class="nb">range</span><span class="p">(</span><span class="mi">10</span><span class="p">))</span><span class="n">unique_names</span><span class="o">=</span><span class="p">{</span><span class="n">user</span><span class="o">.</span><span class="n">name</span><span class="k">for</span><span class="n">user</span><span class="ow">in</span><span class="n">users</span><span class="k">if</span><span class="n">user</span><span class="ow">is</span><span class="ow">not</span><span class="kc">None</span><span class="p">}</span><span class="n">eat</span><span class="p">(</span><span class="n">jelly_bean</span><span class="k">for</span><span class="n">jelly_bean</span><span class="ow">in</span><span class="n">jelly_beans</span><span class="k">if</span><span class="n">jelly_bean</span><span class="o">.</span><span class="n">color</span><span class="o">==</span><span class="s1">'black'</span><span class="p">)</span></code></pre></div></div><p>
不要类似下面这样的，太难理解了。</p><div class="src src-python"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">No</span><span class="p">:</span><span class="n">result</span><span class="o">=</span><span class="p">[</span><span class="n">complicated_transform</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">some_argument</span><span class="o">=</span><span class="n">x</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="k">for</span><span class="n">x</span><span class="ow">in</span><span class="n">iterable</span><span class="k">if</span><span class="n">predicate</span><span class="p">(</span><span class="n">x</span><span class="p">)]</span><span class="n">result</span><span class="o">=</span><span class="p">[(</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">)</span><span class="k">for</span><span class="n">x</span><span class="ow">in</span><span class="nb">range</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span><span class="k">for</span><span class="n">y</span><span class="ow">in</span><span class="nb">range</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span><span class="k">if</span><span class="n">x</span><span class="o">*</span><span class="n">y</span><span class="o">></span><span class="mi">10</span><span class="p">]</span><span class="k">return</span><span class="p">((</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">,</span><span class="n">z</span><span class="p">)</span><span class="k">for</span><span class="n">x</span><span class="ow">in</span><span class="nb">range</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span><span class="k">for</span><span class="n">y</span><span class="ow">in</span><span class="nb">range</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span><span class="k">if</span><span class="n">x</span><span class="o">!=</span><span class="n">y</span><span class="k">for</span><span class="n">z</span><span class="ow">in</span><span class="nb">range</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span><span class="k">if</span><span class="n">y</span><span class="o">!=</span><span class="n">z</span><span class="p">)</span></code></pre></div></div></div></div><div id="outline-container-headline-10" class="outline-4"><h4 id="headline-10">
2.8 Default Iterators and Operators</h4><div id="outline-text-headline-10" class="outline-text-4"><p>
对于 list，dict，文件，使用自带的迭代器和操作符，这些都针对 in 和 not in 定义了自带的迭代器。</p><div class="src src-python"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">Yes</span><span class="p">:</span><span class="k">for</span><span class="n">key</span><span class="ow">in</span><span class="n">adict</span><span class="p">:</span><span class="o">...</span><span class="k">if</span><span class="n">key</span><span class="ow">not</span><span class="ow">in</span><span class="n">adict</span><span class="p">:</span><span class="o">...</span><span class="k">if</span><span class="n">obj</span><span class="ow">in</span><span class="n">alist</span><span class="p">:</span><span class="o">...</span><span class="k">for</span><span class="n">line</span><span class="ow">in</span><span class="n">afile</span><span class="p">:</span><span class="o">...</span><span class="k">for</span><span class="n">k</span><span class="p">,</span><span class="n">v</span><span class="ow">in</span><span class="n">adict</span><span class="o">.</span><span class="n">items</span><span class="p">():</span><span class="o">...</span><span class="k">for</span><span class="n">k</span><span class="p">,</span><span class="n">v</span><span class="ow">in</span><span class="n">six</span><span class="o">.</span><span class="n">iteritems</span><span class="p">(</span><span class="n">adict</span><span class="p">):</span><span class="o">...</span><span class="n">No</span><span class="p">:</span><span class="k">for</span><span class="n">key</span><span class="ow">in</span><span class="n">adict</span><span class="o">.</span><span class="n">keys</span><span class="p">():</span><span class="o">...</span><span class="k">if</span><span class="ow">not</span><span class="n">adict</span><span class="o">.</span><span class="n">has_key</span><span class="p">(</span><span class="n">key</span><span class="p">):</span><span class="o">...</span><span class="k">for</span><span class="n">line</span><span class="ow">in</span><span class="n">afile</span><span class="o">.</span><span class="n">readlines</span><span class="p">():</span><span class="o">...</span><span class="k">for</span><span class="n">k</span><span class="p">,</span><span class="n">v</span><span class="ow">in</span><span class="nb">dict</span><span class="o">.</span><span class="n">iteritems</span><span class="p">():</span><span class="o">...</span></code></pre></div></div></div></div><div id="outline-container-headline-11" class="outline-4"><h4 id="headline-11">
2.9 Generators</h4><div id="outline-text-headline-11" class="outline-text-4"><p>
对于迭代器函数，在文档字符串里面使用 "Yields:" 代替 "Returns:"。</p></div></div><div id="outline-container-headline-12" class="outline-4"><h4 id="headline-12">
2.10 Lambda Functions</h4><div id="outline-text-headline-12" class="outline-text-4"><p>
单行的时候可以用。如果代码长度超过 60-80 字符，可能使用嵌套函数更好。</p><p>
使用 operator 模块代替 lambda，例如 operator.mul 代替 lambda x, y: x * y。</p></div></div><div id="outline-container-headline-13" class="outline-4"><h4 id="headline-13">
2.11 Conditional Expressions</h4><div id="outline-text-headline-13" class="outline-text-4"><p>简单的情况可以用。比较复杂的时候，使用完整的 if 语句。</p><div class="src src-python"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">one_line</span><span class="o">=</span><span class="s1">'yes'</span><span class="k">if</span><span class="n">predicate</span><span class="p">(</span><span class="n">value</span><span class="p">)</span><span class="k">else</span><span class="s1">'no'</span><span class="n">slightly_split</span><span class="o">=</span><span class="p">(</span><span class="s1">'yes'</span><span class="k">if</span><span class="n">predicate</span><span class="p">(</span><span class="n">value</span><span class="p">)</span><span class="k">else</span><span class="s1">'no, nein, nyet'</span><span class="p">)</span><span class="n">the_longest_ternary_style_that_can_be_done</span><span class="o">=</span><span class="p">(</span><span class="s1">'yes, true, affirmative, confirmed, correct'</span><span class="k">if</span><span class="n">predicate</span><span class="p">(</span><span class="n">value</span><span class="p">)</span><span class="k">else</span><span class="s1">'no, false, negative, nay'</span><span class="p">)</span></code></pre></div></div><p>
下面错误的用法</p><div class="src src-python"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">bad_line_breaking</span><span class="o">=</span><span class="p">(</span><span class="s1">'yes'</span><span class="k">if</span><span class="n">predicate</span><span class="p">(</span><span class="n">value</span><span class="p">)</span><span class="k">else</span><span class="s1">'no'</span><span class="p">)</span><span class="n">portion_too_long</span><span class="o">=</span><span class="p">(</span><span class="s1">'yes'</span><span class="k">if</span><span class="n">some_long_module</span><span class="o">.</span><span class="n">some_long_predicate_function</span><span class="p">(</span><span class="n">really_long_variable_name</span><span class="p">)</span><span class="k">else</span><span class="s1">'no, false, negative, nay'</span><span class="p">)</span></code></pre></div></div></div></div><div id="outline-container-headline-14" class="outline-4"><h4 id="headline-14">
2.12 Default Argument Values</h4><div id="outline-text-headline-14" class="outline-text-4"><p>
不要使用可变对象（mutable object）作为函数参数的默认值。</p><div class="src src-python"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">Yes</span><span class="p">:</span><span class="k">def</span><span class="nf">foo</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="o">=</span><span class="kc">None</span><span class="p">):</span><span class="k">if</span><span class="n">b</span><span class="ow">is</span><span class="kc">None</span><span class="p">:</span><span class="n">b</span><span class="o">=</span><span class="p">[]</span><span class="n">Yes</span><span class="p">:</span><span class="k">def</span><span class="nf">foo</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">:</span><span class="n">Optional</span><span class="p">[</span><span class="n">Sequence</span><span class="p">]</span><span class="o">=</span><span class="kc">None</span><span class="p">):</span><span class="k">if</span><span class="n">b</span><span class="ow">is</span><span class="kc">None</span><span class="p">:</span><span class="n">b</span><span class="o">=</span><span class="p">[]</span><span class="n">Yes</span><span class="p">:</span><span class="k">def</span><span class="nf">foo</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">:</span><span class="n">Sequence</span><span class="o">=</span><span class="p">()):</span><span class="c1"># Empty tuple OK since tuples are immutable</span><span class="o">...</span></code></pre></div></div><p>
可变对象做初始值实际是在方法被 load 的时候就定了，不是调用的时候。</p><div class="src src-python"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">No</span><span class="p">:</span><span class="k">def</span><span class="nf">foo</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="o">=</span><span class="p">[]):</span><span class="o">...</span><span class="n">No</span><span class="p">:</span><span class="k">def</span><span class="nf">foo</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="o">=</span><span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()):</span><span class="c1"># The time the module was loaded???</span><span class="o">...</span><span class="n">No</span><span class="p">:</span><span class="k">def</span><span class="nf">foo</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="o">=</span><span class="n">FLAGS</span><span class="o">.</span><span class="n">my_thing</span><span class="p">):</span><span class="c1"># sys.argv has not yet been parsed...</span><span class="o">...</span><span class="n">No</span><span class="p">:</span><span class="k">def</span><span class="nf">foo</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">:</span><span class="n">Mapping</span><span class="o">=</span><span class="p">{}):</span><span class="c1"># Could still get passed to unchecked code</span><span class="o">...</span></code></pre></div></div></div></div><div id="outline-container-headline-15" class="outline-4"><h4 id="headline-15">
2.13 Properties</h4><div id="outline-text-headline-15" class="outline-text-4"><p>
使用<code>@property</code> 装饰器创建属性字段。</p></div></div><div id="outline-container-headline-16" class="outline-4"><h4 id="headline-16">
2.14 True/False Evaluations</h4><div id="outline-text-headline-16" class="outline-text-4"><p>
尽量使用隐含的 false 。例如使用<code>if foo:</code> 而不用<code>if foo != []:</code> 。</p><ul><li><p>总是使用<code>if foo is None:</code> 或者<code>is not None</code> 来检查是否为 None。</p></li><li><p>不要用<code>==</code> 比较布尔值。使用<code>if not x</code> ，如果你需要区分 False 和 None，那使用<code>if not x and x is not None:</code></p></li><li><p>对于序列类型（字符串，列表，元组），使用<code>if seq:</code> 和<code>if not seq:</code> 比<code>if len(seq):</code> 和<code>if not len(seq)</code> 好。</p></li><li><p>处理整型的时候，隐含的 false 带来的问题比益处多（例如把 None 当作 0）。你应该使用 0 和一个 integer 比较。</p></li></ul><div class="src src-python"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">Yes</span><span class="p">:</span><span class="k">if</span><span class="ow">not</span><span class="n">users</span><span class="p">:</span><span class="nb">print</span><span class="p">(</span><span class="s1">'no users'</span><span class="p">)</span><span class="k">if</span><span class="n">foo</span><span class="o">==</span><span class="mi">0</span><span class="p">:</span><span class="bp">self</span><span class="o">.</span><span class="n">handle_zero</span><span class="p">()</span><span class="k">if</span><span class="n">i</span><span class="o">%</span><span class="mi">10</span><span class="o">==</span><span class="mi">0</span><span class="p">:</span><span class="bp">self</span><span class="o">.</span><span class="n">handle_multiple_of_ten</span><span class="p">()</span><span class="k">def</span><span class="nf">f</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="kc">None</span><span class="p">):</span><span class="k">if</span><span class="n">x</span><span class="ow">is</span><span class="kc">None</span><span class="p">:</span><span class="n">x</span><span class="o">=</span><span class="p">[]</span><span class="n">No</span><span class="p">:</span><span class="k">if</span><span class="nb">len</span><span class="p">(</span><span class="n">users</span><span class="p">)</span><span class="o">==</span><span class="mi">0</span><span class="p">:</span><span class="nb">print</span><span class="p">(</span><span class="s1">'no users'</span><span class="p">)</span><span class="k">if</span><span class="n">foo</span><span class="ow">is</span><span class="ow">not</span><span class="kc">None</span><span class="ow">and</span><span class="ow">not</span><span class="n">foo</span><span class="p">:</span><span class="bp">self</span><span class="o">.</span><span class="n">handle_zero</span><span class="p">()</span><span class="k">if</span><span class="ow">not</span><span class="n">i</span><span class="o">%</span><span class="mi">10</span><span class="p">:</span><span class="bp">self</span><span class="o">.</span><span class="n">handle_multiple_of_ten</span><span class="p">()</span><span class="k">def</span><span class="nf">f</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="kc">None</span><span class="p">):</span><span class="n">x</span><span class="o">=</span><span class="n">x</span><span class="ow">or</span><span class="p">[]</span></code></pre></div></div><ul><li><p>注意 '0' （字符串 0）是 true。</p></li></ul></div></div><div id="outline-container-headline-17" class="outline-4"><h4 id="headline-17">
2.15 Deprecated Language Features</h4><div id="outline-text-headline-17" class="outline-text-4"><p>
使用字符串自带的方法，而不用 string 模块。使用函数调用而不是 apply。使用列表生成式和 for 循环代替使用匿名函数的 filte 和 map。使用 for 循环代替 reduce。</p><div class="src src-python"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">Yes</span><span class="p">:</span><span class="n">words</span><span class="o">=</span><span class="n">foo</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">':'</span><span class="p">)</span><span class="p">[</span><span class="n">x</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="k">for</span><span class="n">x</span><span class="ow">in</span><span class="n">my_list</span><span class="k">if</span><span class="n">x</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">==</span><span class="mi">5</span><span class="p">]</span><span class="nb">map</span><span class="p">(</span><span class="n">math</span><span class="o">.</span><span class="n">sqrt</span><span class="p">,</span><span class="n">data</span><span class="p">)</span><span class="c1"># Ok. No inlined lambda expression.</span><span class="n">fn</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span><span class="o">**</span><span class="n">kwargs</span><span class="p">)</span><span class="n">No</span><span class="p">:</span><span class="n">words</span><span class="o">=</span><span class="n">string</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="n">foo</span><span class="p">,</span><span class="s1">':'</span><span class="p">)</span><span class="nb">map</span><span class="p">(</span><span class="k">lambda</span><span class="n">x</span><span class="p">:</span><span class="n">x</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="nb">filter</span><span class="p">(</span><span class="k">lambda</span><span class="n">x</span><span class="p">:</span><span class="n">x</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">==</span><span class="mi">5</span><span class="p">,</span><span class="n">my_list</span><span class="p">))</span><span class="n">apply</span><span class="p">(</span><span class="n">fn</span><span class="p">,</span><span class="n">args</span><span class="p">,</span><span class="n">kwargs</span><span class="p">)</span></code></pre></div></div></div></div><div id="outline-container-headline-18" class="outline-4"><h4 id="headline-18">
2.16 Lexical Scoping</h4><div id="outline-text-headline-18" class="outline-text-4"><ul><li><p>lexical scoping: 词法作用域，静态作用域</p></li><li><p>dynamic scoping: 动态作用域</p></li></ul><p>python 会创建局部变量，理解清楚的话，一般不会有啥问题。可以用。</p></div></div><div id="outline-container-headline-19" class="outline-4"><h4 id="headline-19">
2.17 Function and Method Decorators</h4><div id="outline-text-headline-19" class="outline-text-4"><p>
只在有明确好处的时候使用装饰器。避免使用 @staticmethod ，少用 @classmethod。</p><p>
装饰器对函数参数和返回结果有绝对权限，所以可以改变一些隐含的行为。另外，装饰器是在 import 的时候执行的，如果有代码错误可能程序就崩了。</p><p>
装饰器的文档应该明确说明这个是装饰器，应该给装饰器写测试用例。</p><p>
在装饰器里面避免外部依赖（例如文件，sockets，数据库连接什么的），因为那些在装饰器运行的时候可能不存在（在import 阶段，例如在 pydoc 或者其他工具里面）。装饰器应该要保证在各种情况下都可以成功。</p><p>
不要使用 @staticmethod ，除非为了和已有库的 api 定义集成。应该使用模块级别的函数代替。</p><p>
只在定义命名构造方法或者类级别的方法都时候使用 @classmethod，例如修改全局状态或者缓存。</p></div></div><div id="outline-container-headline-20" class="outline-4"><h4 id="headline-20">
2.18 Threading</h4><div id="outline-text-headline-20" class="outline-text-4"><p>
不要依赖内部自带类型的原子性。</p><p>
python 的一些自带类型例如 dict 似乎支持原子操作，但是有些情况下又不原子。也不要依赖变量赋值的原子性。</p><p>
使用 Queue 模块的 Queue 类型来作为线程间数据通讯的方法。或者使用 threading 模块和他提供的 locking 方法。学习下如何使用 condition variables ，使用 threading.Condition 代替使用 lower-level locks.</p></div></div><div id="outline-container-headline-21" class="outline-4"><h4 id="headline-21">
2.19 Power Features</h4><div id="outline-text-headline-21" class="outline-text-4"><p>
尽量避免使用。</p><p>
例如自定义 metaclass，接触 bytecode，on-the-fly 编译，动态继承，等等吧。。。</p><p>
标准库里面的模块使用到了没关系，例如 abc.ABCMeta, collections.namedtuple, dataclasses, and enum</p></div></div><div id="outline-container-headline-22" class="outline-4"><h4 id="headline-22">
2.20 Modern Python: Python 3 and from<span style="text-decoration: underline;"><span style="text-decoration: underline;">future</span></span> imports</h4><div id="outline-text-headline-22" class="outline-text-4"><p>
应该写兼容 python3 的代码。</p></div></div><div id="outline-container-headline-23" class="outline-4"><h4 id="headline-23">
2.21 Type Annotated Code</h4><div id="outline-text-headline-23" class="outline-text-4"><p>
python3 支持 type hint，可以使用 pytype 检查。</p><p>
强烈建议更新代码的时候使用 type 支持。</p></div></div></div></div><div id="outline-container-headline-24" class="outline-3"><h3 id="headline-24">
3 Python Style Rules</h3><div id="outline-text-headline-24" class="outline-text-3"><div id="outline-container-headline-25" class="outline-4"><h4 id="headline-25">
3.1 Semicolons</h4><div id="outline-text-headline-25" class="outline-text-4"><p>
不要用分号结尾。不要用分号把两行放一行。</p></div></div><div id="outline-container-headline-26" class="outline-4"><h4 id="headline-26">
3.2 Line length</h4><div id="outline-text-headline-26" class="outline-text-4"><p>
一行 80 个字符。除非：</p><ul><li><p>长的 import 语句</p></li><li><p>URL，路径，或者注释里面的长标记</p></li><li><p>长的模块级别的常量，不好切的</p></li><li><p>pylint 的 disable 注释</p></li></ul><p>不要使用 \ 切分多行，除非是 with 语句里面有多个 context 管理器。</p><p>
有必要的话可以增加多余的括号。</p><div class="src src-python"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">Yes</span><span class="p">:</span><span class="n">foo_bar</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">width</span><span class="p">,</span><span class="n">height</span><span class="p">,</span><span class="n">color</span><span class="o">=</span><span class="s1">'black'</span><span class="p">,</span><span class="n">design</span><span class="o">=</span><span class="kc">None</span><span class="p">,</span><span class="n">x</span><span class="o">=</span><span class="s1">'foo'</span><span class="p">,</span><span class="n">emphasis</span><span class="o">=</span><span class="kc">None</span><span class="p">,</span><span class="n">highlight</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="n">width</span><span class="o">==</span><span class="mi">0</span><span class="ow">and</span><span class="n">height</span><span class="o">==</span><span class="mi">0</span><span class="ow">and</span><span class="n">color</span><span class="o">==</span><span class="s1">'red'</span><span class="ow">and</span><span class="n">emphasis</span><span class="o">==</span><span class="s1">'strong'</span><span class="p">):</span></code></pre></div></div><p>
单行字符串太长的话，使用括号切分成多行。</p><div class="src src-python"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">x</span><span class="o">=</span><span class="p">(</span><span class="s1">'This will build a very long long '</span><span class="s1">'long long long long long long string'</span><span class="p">)</span></code></pre></div></div><p>
注释里面的 url 尽量单独放一行</p><div class="src src-python"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">Yes</span><span class="p">:</span><span class="c1"># See details at</span><span class="c1"># http://www.example.com/us/developer/documentation/api/content/v2.0/csv_file_name_extension_full_specification.html</span><span class="n">No</span><span class="p">:</span><span class="c1"># See details at</span><span class="c1"># http://www.example.com/us/developer/documentation/api/content/\</span><span class="c1"># v2.0/csv_file_name_extension_full_specification.html</span></code></pre></div></div><p>
with 语句里面可以使用 \ 拆分多行，也可以使用嵌套的 with。注意缩进。</p><div class="src src-python"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">Yes</span><span class="p">:</span><span class="k">with</span><span class="n">very_long_first_expression_function</span><span class="p">()</span><span class="k">as</span><span class="n">spam</span><span class="p">,</span> \<span class="n">very_long_second_expression_function</span><span class="p">()</span><span class="k">as</span><span class="n">beans</span><span class="p">,</span> \<span class="n">third_thing</span><span class="p">()</span><span class="k">as</span><span class="n">eggs</span><span class="p">:</span><span class="n">place_order</span><span class="p">(</span><span class="n">eggs</span><span class="p">,</span><span class="n">beans</span><span class="p">,</span><span class="n">spam</span><span class="p">,</span><span class="n">beans</span><span class="p">)</span><span class="n">No</span><span class="p">:</span><span class="k">with</span><span class="n">VeryLongFirstExpressionFunction</span><span class="p">()</span><span class="k">as</span><span class="n">spam</span><span class="p">,</span> \<span class="n">VeryLongSecondExpressionFunction</span><span class="p">()</span><span class="k">as</span><span class="n">beans</span><span class="p">:</span><span class="n">PlaceOrder</span><span class="p">(</span><span class="n">eggs</span><span class="p">,</span><span class="n">beans</span><span class="p">,</span><span class="n">spam</span><span class="p">,</span><span class="n">beans</span><span class="p">)</span><span class="n">Yes</span><span class="p">:</span><span class="k">with</span><span class="n">very_long_first_expression_function</span><span class="p">()</span><span class="k">as</span><span class="n">spam</span><span class="p">:</span><span class="k">with</span><span class="n">very_long_second_expression_function</span><span class="p">()</span><span class="k">as</span><span class="n">beans</span><span class="p">:</span><span class="n">place_order</span><span class="p">(</span><span class="n">beans</span><span class="p">,</span><span class="n">spam</span><span class="p">)</span></code></pre></div></div><p>
如果还有其他超过 80 字符的情况，并且 yapf 工具也不能处理的话，可以容忍。</p></div></div><div id="outline-container-headline-27" class="outline-4"><h4 id="headline-27">
3.3 Parentheses</h4><div id="outline-text-headline-27" class="outline-text-4"><p>
尽量少用括号。</p><div class="src src-python"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">Yes</span><span class="p">:</span><span class="k">if</span><span class="n">foo</span><span class="p">:</span><span class="n">bar</span><span class="p">()</span><span class="k">while</span><span class="n">x</span><span class="p">:</span><span class="n">x</span><span class="o">=</span><span class="n">bar</span><span class="p">()</span><span class="k">if</span><span class="n">x</span><span class="ow">and</span><span class="n">y</span><span class="p">:</span><span class="n">bar</span><span class="p">()</span><span class="k">if</span><span class="ow">not</span><span class="n">x</span><span class="p">:</span><span class="n">bar</span><span class="p">()</span><span class="c1"># 只有一个元素的元组使用 () 比只有一个逗号清晰</span><span class="n">onesie</span><span class="o">=</span><span class="p">(</span><span class="n">foo</span><span class="p">,)</span><span class="k">return</span><span class="n">foo</span><span class="k">return</span><span class="n">spam</span><span class="p">,</span><span class="n">beans</span><span class="k">return</span><span class="p">(</span><span class="n">spam</span><span class="p">,</span><span class="n">beans</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">)</span><span class="ow">in</span><span class="nb">dict</span><span class="o">.</span><span class="n">items</span><span class="p">():</span><span class="o">...</span><span class="n">No</span><span class="p">:</span><span class="k">if</span><span class="p">(</span><span class="n">x</span><span class="p">):</span><span class="n">bar</span><span class="p">()</span><span class="k">if</span><span class="ow">not</span><span class="p">(</span><span class="n">x</span><span class="p">):</span><span class="n">bar</span><span class="p">()</span><span class="k">return</span><span class="p">(</span><span class="n">foo</span><span class="p">)</span></code></pre></div></div></div></div><div id="outline-container-headline-28" class="outline-4"><h4 id="headline-28">
3.4 Indentation</h4><div id="outline-text-headline-28" class="outline-text-4"><p>
使用 4 个空格缩进。</p><div class="src src-python"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">Yes</span><span class="p">:</span><span class="c1"># 和开始的括号对齐</span><span class="n">foo</span><span class="o">=</span><span class="n">long_function_name</span><span class="p">(</span><span class="n">var_one</span><span class="p">,</span><span class="n">var_two</span><span class="p">,</span><span class="n">var_three</span><span class="p">,</span><span class="n">var_four</span><span class="p">)</span><span class="n">meal</span><span class="o">=</span><span class="p">(</span><span class="n">spam</span><span class="p">,</span><span class="n">beans</span><span class="p">)</span><span class="c1"># 和字典的开始括号对齐</span><span class="n">foo</span><span class="o">=</span><span class="p">{</span><span class="n">long_dictionary_key</span><span class="p">:</span><span class="n">value1</span><span class="o">+</span><span class="n">value2</span><span class="p">,</span><span class="o">...</span><span class="p">}</span><span class="c1"># 4个空格的悬挂缩进；第一行什么都不放</span><span class="n">foo</span><span class="o">=</span><span class="n">long_function_name</span><span class="p">(</span><span class="n">var_one</span><span class="p">,</span><span class="n">var_two</span><span class="p">,</span><span class="n">var_three</span><span class="p">,</span><span class="n">var_four</span><span class="p">)</span><span class="n">meal</span><span class="o">=</span><span class="p">(</span><span class="n">spam</span><span class="p">,</span><span class="n">beans</span><span class="p">)</span><span class="c1"># 字典里面的 4 空格悬挂缩进</span><span class="n">foo</span><span class="o">=</span><span class="p">{</span><span class="n">long_dictionary_key</span><span class="p">:</span><span class="n">long_dictionary_value</span><span class="p">,</span><span class="o">...</span><span class="p">}</span><span class="n">No</span><span class="p">:</span><span class="c1"># 看不清第一行的内容了</span><span class="n">foo</span><span class="o">=</span><span class="n">long_function_name</span><span class="p">(</span><span class="n">var_one</span><span class="p">,</span><span class="n">var_two</span><span class="p">,</span><span class="n">var_three</span><span class="p">,</span><span class="n">var_four</span><span class="p">)</span><span class="n">meal</span><span class="o">=</span><span class="p">(</span><span class="n">spam</span><span class="p">,</span><span class="n">beans</span><span class="p">)</span><span class="c1"># 2 空格缩进</span><span class="n">foo</span><span class="o">=</span><span class="n">long_function_name</span><span class="p">(</span><span class="n">var_one</span><span class="p">,</span><span class="n">var_two</span><span class="p">,</span><span class="n">var_three</span><span class="p">,</span><span class="n">var_four</span><span class="p">)</span><span class="c1"># 字典里面没有悬挂缩进</span><span class="n">foo</span><span class="o">=</span><span class="p">{</span><span class="n">long_dictionary_key</span><span class="p">:</span><span class="n">long_dictionary_value</span><span class="p">,</span><span class="o">...</span><span class="p">}</span></code></pre></div></div><div id="outline-container-headline-29" class="outline-5"><h5 id="headline-29">
3.4.1 Trailing commas in sequences of items?</h5><div id="outline-text-headline-29" class="outline-text-5"><p>
结尾的逗号只有在 ],},) 和最后的元素不在同一行的时候使用。</p><div class="src src-python"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">Yes</span><span class="p">:</span><span class="n">golomb3</span><span class="o">=</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span><span class="n">Yes</span><span class="p">:</span><span class="n">golomb4</span><span class="o">=</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="p">]</span><span class="n">No</span><span class="p">:</span><span class="n">golomb4</span><span class="o">=</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">6</span><span class="p">]</span></code></pre></div></div></div></div></div></div><div id="outline-container-headline-30" class="outline-4"><h4 id="headline-30">
3.5 Blank Lines</h4><div id="outline-text-headline-30" class="outline-text-4"><p>
顶级定义间两个空行。方法之间，class 和第一个方法之前使用一个空行。def 行之后不要有空行。适当的在方法和函数里面使用一个空行。</p></div></div><div id="outline-container-headline-31" class="outline-4"><h4 id="headline-31">
3.6 Whitespace</h4><div id="outline-text-headline-31" class="outline-text-4"><p>
在括号里面，括号和内容间不要有空格。</p><div class="src src-python"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">Yes</span><span class="p">:</span><span class="n">spam</span><span class="p">(</span><span class="n">ham</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="p">{</span><span class="n">eggs</span><span class="p">:</span><span class="mi">2</span><span class="p">},</span><span class="p">[])</span><span class="n">No</span><span class="p">:</span><span class="n">spam</span><span class="p">(</span><span class="n">ham</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="p">{</span><span class="n">eggs</span><span class="p">:</span><span class="mi">2</span><span class="p">},</span><span class="p">[</span><span class="p">]</span><span class="p">)</span></code></pre></div></div><p>
逗号，分号，冒号前不要加空格，除了行尾，后面需要加空格。</p><div class="src src-python"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">Yes</span><span class="p">:</span><span class="k">if</span><span class="n">x</span><span class="o">==</span><span class="mi">4</span><span class="p">:</span><span class="nb">print</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">)</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="o">=</span><span class="n">y</span><span class="p">,</span><span class="n">x</span><span class="n">No</span><span class="p">:</span><span class="k">if</span><span class="n">x</span><span class="o">==</span><span class="mi">4</span><span class="p">:</span><span class="nb">print</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">)</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="o">=</span><span class="n">y</span><span class="p">,</span><span class="n">x</span></code></pre></div></div><p>
参数列表，索引，切片的左括号前面不加空格</p><div class="src src-python"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">Yes</span><span class="p">:</span><span class="n">spam</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span><span class="n">No</span><span class="p">:</span><span class="n">spam</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span><span class="n">Yes</span><span class="p">:</span><span class="nb">dict</span><span class="p">[</span><span class="s1">'key'</span><span class="p">]</span><span class="o">=</span><span class="nb">list</span><span class="p">[</span><span class="n">index</span><span class="p">]</span><span class="n">No</span><span class="p">:</span><span class="nb">dict</span><span class="p">[</span><span class="s1">'key'</span><span class="p">]</span><span class="o">=</span><span class="nb">list</span><span class="p">[</span><span class="n">index</span><span class="p">]</span></code></pre></div></div><p>
行尾不加多余的空格。操作符两边加空格。</p><div class="src src-python"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">Yes</span><span class="p">:</span><span class="n">x</span><span class="o">==</span><span class="mi">1</span><span class="n">No</span><span class="p">:</span><span class="n">x</span><span class="o">&lt;</span><span class="mi">1</span></code></pre></div></div><p>
传参数或者函数默认值的 = 左右不加空格。</p><div class="src src-python"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">Yes</span><span class="p">:</span><span class="k">def</span><span class="nf">complex</span><span class="p">(</span><span class="n">real</span><span class="p">,</span><span class="n">imag</span><span class="o">=</span><span class="mf">0.0</span><span class="p">):</span><span class="k">return</span><span class="n">Magic</span><span class="p">(</span><span class="n">r</span><span class="o">=</span><span class="n">real</span><span class="p">,</span><span class="n">i</span><span class="o">=</span><span class="n">imag</span><span class="p">)</span><span class="n">Yes</span><span class="p">:</span><span class="k">def</span><span class="nf">complex</span><span class="p">(</span><span class="n">real</span><span class="p">,</span><span class="n">imag</span><span class="p">:</span><span class="nb">float</span><span class="o">=</span><span class="mf">0.0</span><span class="p">):</span><span class="k">return</span><span class="n">Magic</span><span class="p">(</span><span class="n">r</span><span class="o">=</span><span class="n">real</span><span class="p">,</span><span class="n">i</span><span class="o">=</span><span class="n">imag</span><span class="p">)</span><span class="n">No</span><span class="p">:</span><span class="k">def</span><span class="nf">complex</span><span class="p">(</span><span class="n">real</span><span class="p">,</span><span class="n">imag</span><span class="o">=</span><span class="mf">0.0</span><span class="p">):</span><span class="k">return</span><span class="n">Magic</span><span class="p">(</span><span class="n">r</span><span class="o">=</span><span class="n">real</span><span class="p">,</span><span class="n">i</span><span class="o">=</span><span class="n">imag</span><span class="p">)</span><span class="n">No</span><span class="p">:</span><span class="k">def</span><span class="nf">complex</span><span class="p">(</span><span class="n">real</span><span class="p">,</span><span class="n">imag</span><span class="p">:</span><span class="nb">float</span><span class="o">=</span><span class="mf">0.0</span><span class="p">):</span><span class="k">return</span><span class="n">Magic</span><span class="p">(</span><span class="n">r</span><span class="o">=</span><span class="n">real</span><span class="p">,</span><span class="n">i</span><span class="o">=</span><span class="n">imag</span><span class="p">)</span></code></pre></div></div><p>
不要使用空格做竖列对齐，这个维护起来容易成负担。有一些工具或者 ide 可以自动做这个事情，但是确实对不使用这些工具的人是个负担。</p><div class="src src-python"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">Yes</span><span class="p">:</span><span class="n">foo</span><span class="o">=</span><span class="mi">1000</span><span class="c1"># comment</span><span class="n">long_name</span><span class="o">=</span><span class="mi">2</span><span class="c1"># comment that should not be aligned</span><span class="n">dictionary</span><span class="o">=</span><span class="p">{</span><span class="s1">'foo'</span><span class="p">:</span><span class="mi">1</span><span class="p">,</span><span class="s1">'long_name'</span><span class="p">:</span><span class="mi">2</span><span class="p">,</span><span class="p">}</span><span class="n">No</span><span class="p">:</span><span class="n">foo</span><span class="o">=</span><span class="mi">1000</span><span class="c1"># comment</span><span class="n">long_name</span><span class="o">=</span><span class="mi">2</span><span class="c1"># comment that should not be aligned</span><span class="n">dictionary</span><span class="o">=</span><span class="p">{</span><span class="s1">'foo'</span><span class="p">:</span><span class="mi">1</span><span class="p">,</span><span class="s1">'long_name'</span><span class="p">:</span><span class="mi">2</span><span class="p">,</span><span class="p">}</span></code></pre></div></div></div></div><div id="outline-container-headline-32" class="outline-4"><h4 id="headline-32">
3.7 Shebang Line</h4><div id="outline-text-headline-32" class="outline-text-4"><p>
大部分 .py 文件都不需要 #! 这行。主文件可以使用<code>#!/usr/bin/python</code> 加 2 或者 3 结尾。</p><p>
这个只有直接运行的主程序有用，对于 import 的模块没用。</p></div></div><div id="outline-container-headline-33" class="outline-4"><h4 id="headline-33">
3.8 Comments and Docstrings</h4><div id="outline-text-headline-33" class="outline-text-4"><p>
确保针对模块，函数，方法使用了正确的文档字符串和行内的注释。</p><div id="outline-container-headline-34" class="outline-5"><h5 id="headline-34">
3.8.1 Docstrings</h5><div id="outline-text-headline-34" class="outline-text-5"><p>
总是使用 """ 格式的文档字符串。</p></div></div><div id="outline-container-headline-35" class="outline-5"><h5 id="headline-35">
3.8.2 Modules</h5><div id="outline-text-headline-35" class="outline-text-5"><p>
每个文件都有 lincense 声明，文件开头说明下模块内容和示例。</p><div class="src src-python"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="s2">"""用一行简介模块或者程序功能</span><span class="s2"/><span class="s2">留一个空行。后面说明模块的说明，可以加例子。</span><span class="s2"/><span class="s2"> Typical usage example:</span><span class="s2"/><span class="s2"> foo = ClassFoo()</span><span class="s2"> bar = foo.FunctionBar()</span><span class="s2">"""</span></code></pre></div></div></div></div><div id="outline-container-headline-36" class="outline-5"><h5 id="headline-36">
3.8.3 Functions and Methods</h5><div id="outline-text-headline-36" class="outline-text-5"><p>
主要需要说明参数，返回值，异常。</p><div class="src src-python"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="k">def</span><span class="nf">fetch_bigtable_rows</span><span class="p">(</span><span class="n">big_table</span><span class="p">,</span><span class="n">keys</span><span class="p">,</span><span class="n">other_silly_variable</span><span class="o">=</span><span class="kc">None</span><span class="p">):</span><span class="s2">"""Fetches rows from a Bigtable.</span><span class="s2"/><span class="s2"> Retrieves rows pertaining to the given keys from the Table instance</span><span class="s2"> represented by big_table. Silly things may happen if</span><span class="s2"> other_silly_variable is not None.</span><span class="s2"/><span class="s2"> Args:</span><span class="s2"> big_table: An open Bigtable Table instance.</span><span class="s2"> keys: A sequence of strings representing the key of each table row</span><span class="s2"> to fetch.</span><span class="s2"> other_silly_variable: Another optional variable, that has a much</span><span class="s2"> longer name than the other args, and which does nothing.</span><span class="s2"/><span class="s2"> Returns:</span><span class="s2"> A dict mapping keys to the corresponding table row data</span><span class="s2"> fetched. Each row is represented as a tuple of strings. For</span><span class="s2"> example:</span><span class="s2"/><span class="s2"> {'Serak': ('Rigel VII', 'Preparer'),</span><span class="s2"> 'Zim': ('Irk', 'Invader'),</span><span class="s2"> 'Lrrr': ('Omicron Persei 8', 'Emperor')}</span><span class="s2"/><span class="s2"> If a key from the keys argument is missing from the dictionary,</span><span class="s2"> then that row was not found in the table.</span><span class="s2"/><span class="s2"> Raises:</span><span class="s2"> IOError: An error occurred accessing the bigtable.Table object.</span><span class="s2"> """</span></code></pre></div></div></div></div><div id="outline-container-headline-37" class="outline-5"><h5 id="headline-37">
3.8.4 Classes</h5><div id="outline-text-headline-37" class="outline-text-5"><p>
如果有公共属性，需要说明下。</p><div class="src src-python"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span><span class="nc">SampleClass</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span><span class="s2">"""Summary of class here.</span><span class="s2"/><span class="s2"> Longer class information....</span><span class="s2"> Longer class information....</span><span class="s2"/><span class="s2"> Attributes:</span><span class="s2"> likes_spam: A boolean indicating if we like SPAM or not.</span><span class="s2"> eggs: An integer count of the eggs we have laid.</span><span class="s2"> """</span><span class="k">def</span><span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">likes_spam</span><span class="o">=</span><span class="kc">False</span><span class="p">):</span><span class="s2">"""Inits SampleClass with blah."""</span><span class="bp">self</span><span class="o">.</span><span class="n">likes_spam</span><span class="o">=</span><span class="n">likes_spam</span><span class="bp">self</span><span class="o">.</span><span class="n">eggs</span><span class="o">=</span><span class="mi">0</span><span class="k">def</span><span class="nf">public_method</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span><span class="s2">"""Performs operation blah."""</span></code></pre></div></div></div></div><div id="outline-container-headline-38" class="outline-5"><h5 id="headline-38">
3.8.5 Block and Inline Comments</h5><div id="outline-text-headline-38" class="outline-text-5"><p>
对于代码里面逻辑复杂或者难理解的地方，如果需要在 code review 的时候解释说明，那最好直接写到代码里面。</p><div class="src src-python"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1"># We use a weighted dictionary search to find out where i is in</span><span class="c1"># the array. We extrapolate position based on the largest num</span><span class="c1"># in the array and the array size and then do binary search to</span><span class="c1"># get the exact number.</span><span class="k">if</span><span class="n">i</span><span class="o">&amp;</span><span class="p">(</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">==</span><span class="mi">0</span><span class="p">:</span><span class="c1"># True if i is 0 or a power of 2.</span></code></pre></div></div><p>
inline 的注释应该在 # 前留两个空格。另外，注释里面不要去直接解释代码，这个没啥意义。</p></div></div><div id="outline-container-headline-39" class="outline-5"><h5 id="headline-39">
3.8.6 Punctuation, Spelling, and Grammar</h5><div id="outline-text-headline-39" class="outline-text-5"><p>
应该是说注意语法啥的，代码的质量也包括注释的质量。</p></div></div></div></div><div id="outline-container-headline-40" class="outline-4"><h4 id="headline-40">
3.9 Classes</h4><div id="outline-text-headline-40" class="outline-text-4"><p>
如果一个类没有明显的基类，那就继承 object。</p><div class="src src-python"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">Yes</span><span class="p">:</span><span class="k">class</span><span class="nc">SampleClass</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span><span class="k">pass</span><span class="k">class</span><span class="nc">OuterClass</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span><span class="k">class</span><span class="nc">InnerClass</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span><span class="k">pass</span><span class="k">class</span><span class="nc">ChildClass</span><span class="p">(</span><span class="n">ParentClass</span><span class="p">):</span><span class="s2">"""Explicitly inherits from another class already."""</span><span class="n">No</span><span class="p">:</span><span class="k">class</span><span class="nc">SampleClass</span><span class="p">:</span><span class="k">pass</span><span class="k">class</span><span class="nc">OuterClass</span><span class="p">:</span><span class="k">class</span><span class="nc">InnerClass</span><span class="p">:</span><span class="k">pass</span></code></pre></div></div><p>
更好的兼容性。还帮忙定义了一些 __ 开头的方法。</p></div></div><div id="outline-container-headline-41" class="outline-4"><h4 id="headline-41">
3.10 Strings</h4><div id="outline-text-headline-41" class="outline-text-4"><p>
使用 format 或者 % 格式化字符串。python 3.6 还支持了 f-string。</p><div class="src src-python"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">Yes</span><span class="p">:</span><span class="n">x</span><span class="o">=</span><span class="n">a</span><span class="o">+</span><span class="n">b</span><span class="n">x</span><span class="o">=</span><span class="s1">'</span><span class="si">%s</span><span class="s1">,</span><span class="si">%s</span><span class="s1">!'</span><span class="o">%</span><span class="p">(</span><span class="n">imperative</span><span class="p">,</span><span class="n">expletive</span><span class="p">)</span><span class="n">x</span><span class="o">=</span><span class="s1">'</span><span class="si">{}</span><span class="s1">,</span><span class="si">{}</span><span class="s1">'</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">first</span><span class="p">,</span><span class="n">second</span><span class="p">)</span><span class="n">x</span><span class="o">=</span><span class="s1">'name:</span><span class="si">%s</span><span class="s1">; score:</span><span class="si">%d</span><span class="s1">'</span><span class="o">%</span><span class="p">(</span><span class="n">name</span><span class="p">,</span><span class="n">n</span><span class="p">)</span><span class="n">x</span><span class="o">=</span><span class="s1">'name:</span><span class="si">{}</span><span class="s1">; score:</span><span class="si">{}</span><span class="s1">'</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">name</span><span class="p">,</span><span class="n">n</span><span class="p">)</span><span class="n">x</span><span class="o">=</span><span class="sa">f</span><span class="s1">'name:</span><span class="si">{</span><span class="n">name</span><span class="si">}</span><span class="s1">; score:</span><span class="si">{</span><span class="n">n</span><span class="si">}</span><span class="s1">'</span><span class="c1"># Python 3.6+</span><span class="n">No</span><span class="p">:</span><span class="n">x</span><span class="o">=</span><span class="s1">'</span><span class="si">%s%s</span><span class="s1">'</span><span class="o">%</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">)</span><span class="c1"># use + in this case</span><span class="n">x</span><span class="o">=</span><span class="s1">'</span><span class="si">{}{}</span><span class="s1">'</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">)</span><span class="c1"># use + in this case</span><span class="n">x</span><span class="o">=</span><span class="n">first</span><span class="o">+</span><span class="s1">', '</span><span class="o">+</span><span class="n">second</span><span class="n">x</span><span class="o">=</span><span class="s1">'name: '</span><span class="o">+</span><span class="n">name</span><span class="o">+</span><span class="s1">'; score: '</span><span class="o">+</span><span class="nb">str</span><span class="p">(</span><span class="n">n</span><span class="p">)</span></code></pre></div></div><p>
避免在循环里面使用 + 和 += 操作符连接字符串。因为 string 是 immutable ，这样会创建很多临时对象。可以使用个 list 然后 ''.join(list) 这样，或者使用 io.BytesIO。</p><div class="src src-python"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">Yes</span><span class="p">:</span><span class="n">items</span><span class="o">=</span><span class="p">[</span><span class="s1">'&lt;table>'</span><span class="p">]</span><span class="k">for</span><span class="n">last_name</span><span class="p">,</span><span class="n">first_name</span><span class="ow">in</span><span class="n">employee_list</span><span class="p">:</span><span class="n">items</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s1">'&lt;tr>&lt;td></span><span class="si">%s</span><span class="s1">,</span><span class="si">%s</span><span class="s1">&lt;/td>&lt;/tr>'</span><span class="o">%</span><span class="p">(</span><span class="n">last_name</span><span class="p">,</span><span class="n">first_name</span><span class="p">))</span><span class="n">items</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s1">'&lt;/table>'</span><span class="p">)</span><span class="n">employee_table</span><span class="o">=</span><span class="s1">''</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">items</span><span class="p">)</span><span class="n">No</span><span class="p">:</span><span class="n">employee_table</span><span class="o">=</span><span class="s1">'&lt;table>'</span><span class="k">for</span><span class="n">last_name</span><span class="p">,</span><span class="n">first_name</span><span class="ow">in</span><span class="n">employee_list</span><span class="p">:</span><span class="n">employee_table</span><span class="o">+=</span><span class="s1">'&lt;tr>&lt;td></span><span class="si">%s</span><span class="s1">,</span><span class="si">%s</span><span class="s1">&lt;/td>&lt;/tr>'</span><span class="o">%</span><span class="p">(</span><span class="n">last_name</span><span class="p">,</span><span class="n">first_name</span><span class="p">)</span><span class="n">employee_table</span><span class="o">+=</span><span class="s1">'&lt;/table>'</span></code></pre></div></div><p>
灵活使用 ' 和 " ，避免使用 \\ 转义。多行字符串使用 """ ，不用 ''' 。</p><div class="src src-python"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">No</span><span class="p">:</span><span class="n">long_string</span><span class="o">=</span><span class="s2">"""This is pretty ugly.</span><span class="s2">Don't do this.</span><span class="s2">"""</span><span class="n">Yes</span><span class="p">:</span><span class="n">long_string</span><span class="o">=</span><span class="s2">"""This is fine if your use case can accept</span><span class="s2"> extraneous leading spaces."""</span><span class="n">Yes</span><span class="p">:</span><span class="n">long_string</span><span class="o">=</span><span class="p">(</span><span class="s2">"And this is fine if you can not accept</span><span class="se">\n</span><span class="s2">"</span><span class="o">+</span><span class="s2">"extraneous leading spaces."</span><span class="p">)</span><span class="n">Yes</span><span class="p">:</span><span class="n">long_string</span><span class="o">=</span><span class="p">(</span><span class="s2">"And this too is fine if you can not accept</span><span class="se">\n</span><span class="s2">"</span><span class="s2">"extraneous leading spaces."</span><span class="p">)</span><span class="n">Yes</span><span class="p">:</span><span class="kn">import</span><span class="nn">textwrap</span><span class="n">long_string</span><span class="o">=</span><span class="n">textwrap</span><span class="o">.</span><span class="n">dedent</span><span class="p">(</span><span class="s2">"""</span><span class="se">\</span><span class="se"/><span class="s2"> This is also fine, because textwrap.dedent()</span><span class="s2"> will collapse common leading spaces in each line."""</span><span class="p">)</span></code></pre></div></div></div></div><div id="outline-container-headline-42" class="outline-4"><h4 id="headline-42">
3.11 Files and Sockets</h4><div id="outline-text-headline-42" class="outline-text-4"><p>
使用完 file 和 sockets 之后显式的关闭。要不然</p><ul><li><p>会消耗文件描述符。</p></li><li><p>会导致其他操作例如移动删除什么的失败。</p></li><li><p>及时关闭可以更容易发现一些不恰当的使用，有问题会早暴露。</p></li></ul><p>当文件或者sockets 对象被销毁的时候会自动关闭，但是依赖这个特性是个不好的习惯</p><ul><li><p>python 不同版本的垃圾回收策略会不一样，也没保证啥时候会关闭。</p></li><li><p>一些意料之外的文件引用，比如全局变量，异常堆栈里面的引用什么的，可能会导致存活时间变长。</p></li></ul><p>使用 with 语句来打开文件</p><div class="src src-python"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="k">with</span><span class="nb">open</span><span class="p">(</span><span class="s2">"hello.txt"</span><span class="p">)</span><span class="k">as</span><span class="n">hello_file</span><span class="p">:</span><span class="k">for</span><span class="n">line</span><span class="ow">in</span><span class="n">hello_file</span><span class="p">:</span><span class="nb">print</span><span class="p">(</span><span class="n">line</span><span class="p">)</span></code></pre></div></div><p>
文件类型的对象，但是还不支持 with 语句的，可以使用 contextlib.closing()</p><div class="src src-python"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span><span class="nn">contextlib</span><span class="k">with</span><span class="n">contextlib</span><span class="o">.</span><span class="n">closing</span><span class="p">(</span><span class="n">urllib</span><span class="o">.</span><span class="n">urlopen</span><span class="p">(</span><span class="s2">"http://www.python.org/"</span><span class="p">))</span><span class="k">as</span><span class="n">front_page</span><span class="p">:</span><span class="k">for</span><span class="n">line</span><span class="ow">in</span><span class="n">front_page</span><span class="p">:</span><span class="nb">print</span><span class="p">(</span><span class="n">line</span><span class="p">)</span></code></pre></div></div></div></div><div id="outline-container-headline-43" class="outline-4"><h4 id="headline-43">
3.12 TODO Comments</h4><div id="outline-text-headline-43" class="outline-text-4"><p>
注释里面使用 TODO 来标记临时的一些处理，或者一些有待改进的处理。</p><p>
TODO 使用 TODO 开头，后面括号里面使用邮件或者名字标记是谁加的，然后跟着是 todo 内容。</p><p>
这个格式要求是为了将来方便搜索。TODO 并不表示以后也需要这个人去修复这个问题。</p><div class="src src-python"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1"># TODO(kl@gmail.com): Use a "*" here for string repetition.</span><span class="c1"># TODO(Zeke) Change this to use relations.</span></code></pre></div></div><p>
如果一个 TODO 是为了标记将来做什么，那最好把时间 (“Fix by November 2009”) 或者触发的事件 (“Remove this code when all clients can handle XML responses.”) 也加上。</p></div></div><div id="outline-container-headline-44" class="outline-4"><h4 id="headline-44">
3.13 Imports formatting</h4><div id="outline-text-headline-44" class="outline-text-4"><p>
一个模块一行</p><div class="src src-python"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">Yes</span><span class="p">:</span><span class="kn">import</span><span class="nn">os</span><span class="kn">import</span><span class="nn">sys</span><span class="n">No</span><span class="p">:</span><span class="kn">import</span><span class="nn">os</span><span class="o">,</span><span class="nn">sys</span></code></pre></div></div><p>
import 都写在文件顶部，在模块的文档字符串之后，在模块的全局变量和常量之前。按照最通用到最不通用排序。</p><ol><li><p>future import 语句来打开文件</p></li></ol><div class="src src-python"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span><span class="nn">__future__</span><span class="kn">import</span><span class="n">absolute_import</span><span class="kn">from</span><span class="nn">__future__</span><span class="kn">import</span><span class="n">division</span><span class="kn">from</span><span class="nn">__future__</span><span class="kn">import</span><span class="n">print_function</span></code></pre></div></div><ol><li><p>python 标准库</p></li></ol><div class="src src-python"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span><span class="nn">sys</span></code></pre></div></div><ol><li><p>第三方库</p></li></ol><div class="src src-python"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span><span class="nn">tensorflow</span><span class="k">as</span><span class="nn">tf</span></code></pre></div></div><ol><li><p>代码库子模块</p></li></ol><div class="src src-python"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span><span class="nn">otherproject.ai</span><span class="kn">import</span><span class="n">mind</span></code></pre></div></div><ol><li><p>程序自己的子模块(已经废弃)。新的处理方式是和 4 一样处理就行。</p></li></ol><p>使用词典序，忽略大小写，基于模块包的全称。在不同块之前增加一个空行。</p><div class="src src-python"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span><span class="nn">collections</span><span class="kn">import</span><span class="nn">queue</span><span class="kn">import</span><span class="nn">sys</span><span class="kn">from</span><span class="nn">absl</span><span class="kn">import</span><span class="n">app</span><span class="kn">from</span><span class="nn">absl</span><span class="kn">import</span><span class="n">flags</span><span class="kn">import</span><span class="nn">bs4</span><span class="kn">import</span><span class="nn">cryptography</span><span class="kn">import</span><span class="nn">tensorflow</span><span class="k">as</span><span class="nn">tf</span><span class="kn">from</span><span class="nn">book.genres</span><span class="kn">import</span><span class="n">scifi</span><span class="kn">from</span><span class="nn">myproject.backend.hgwells</span><span class="kn">import</span><span class="n">time_machine</span><span class="kn">from</span><span class="nn">myproject.backend.state_machine</span><span class="kn">import</span><span class="n">main_loop</span><span class="kn">from</span><span class="nn">otherproject.ai</span><span class="kn">import</span><span class="n">body</span><span class="kn">from</span><span class="nn">otherproject.ai</span><span class="kn">import</span><span class="n">mind</span><span class="kn">from</span><span class="nn">otherproject.ai</span><span class="kn">import</span><span class="n">soul</span><span class="c1"># Older style code may have these imports down here instead:</span><span class="c1">#from myproject.backend.hgwells import time_machine</span><span class="c1">#from myproject.backend.state_machine import main_loop</span></code></pre></div></div></div></div><div id="outline-container-headline-45" class="outline-4"><h4 id="headline-45">
3.14 Statements</h4><div id="outline-text-headline-45" class="outline-text-4"><p>
通常一行一句。</p><div class="src src-python"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">Yes</span><span class="p">:</span><span class="k">if</span><span class="n">foo</span><span class="p">:</span><span class="n">bar</span><span class="p">(</span><span class="n">foo</span><span class="p">)</span><span class="n">No</span><span class="p">:</span><span class="k">if</span><span class="n">foo</span><span class="p">:</span><span class="n">bar</span><span class="p">(</span><span class="n">foo</span><span class="p">)</span><span class="k">else</span><span class="p">:</span><span class="n">baz</span><span class="p">(</span><span class="n">foo</span><span class="p">)</span><span class="k">try</span><span class="p">:</span><span class="n">bar</span><span class="p">(</span><span class="n">foo</span><span class="p">)</span><span class="k">except</span><span class="ne">ValueError</span><span class="p">:</span><span class="n">baz</span><span class="p">(</span><span class="n">foo</span><span class="p">)</span><span class="k">try</span><span class="p">:</span><span class="n">bar</span><span class="p">(</span><span class="n">foo</span><span class="p">)</span><span class="k">except</span><span class="ne">ValueError</span><span class="p">:</span><span class="n">baz</span><span class="p">(</span><span class="n">foo</span><span class="p">)</span></code></pre></div></div></div></div><div id="outline-container-headline-46" class="outline-4"><h4 id="headline-46">
3.15 Accessors</h4><div id="outline-text-headline-46" class="outline-text-4"><p>
如果比较简单，可以使用公共属性，而不用 geter/seter，毕竟没必要多一次函数调用。稍微复杂点的可以使用 @property。</p><p>
对于复杂的，可以使用 get_foo() 和 set_foo() 这样的函数调用。如果以前允许通过属性访问，不要把新的函数直接绑定过去。这样依然用原来的方法的那些代码就会报错，可以让他们意识到新的逻辑的复杂程度。</p></div></div><div id="outline-container-headline-47" class="outline-4"><h4 id="headline-47">
3.16 Naming</h4><div id="outline-text-headline-47" class="outline-text-4"><p>
module_name, package_name, ClassName, method_name, ExceptionName, function_name, GLOBAL_CONSTANT_NAME, global_var_name, instance_var_name, function_parameter_name, local_var_name</p><p>
函数名，变量名，文件名应该自说明，避免使用缩写。特别的，不用有歧义的或者项目外的人不熟悉的词，不要通过删除单词里面的字母来产生缩写。</p><p>
总是使用 .py 扩展名。</p><div id="outline-container-headline-48" class="outline-5"><h5 id="headline-48">
3.16.1 Names to Avoid</h5><div id="outline-text-headline-48" class="outline-text-5"><ul><li><p>单字母名字，除非是计数器或者迭代器之类。也可以在 tye/except 语句里面使用 e 表示异常。</p></li><li><p>包/模块名里面使用 -</p></li><li><p>__ 开头并且和结尾的名字，这个是 python 自己会用的。</p></li></ul></div></div><div id="outline-container-headline-49" class="outline-5"><h5 id="headline-49">
3.16.2 Naming Conventions</h5><div id="outline-text-headline-49" class="outline-text-5"><ul><li><p>"internal" 的意思是模块的内部，或者类内部的被保护或者私有属性</p></li><li><p>使用 _ 保护模块变量或者函数（不会被 from module import * 导入）. 使用 __ 可以让一个实例变量或者方法可以让他们变成类的私有属性，但是不鼓励这么做，这个会带来阅读困难，也不好测试，并且还不是真的私有。</p></li><li><p>可以把其他相关的类放到一个模块的顶部，不用限制一个模块只有一个类，和 java 不一样。</p></li><li><p>类名字使用首字母大写，模块名字使用小写下划线。</p></li><li><p>测试用例里面的方法使用 test 开头。test&lt;MethodUnderTest>_&lt;state> 例如 testPop_EmptyStack，这样也行，毕竟没有什么更好的办法。</p></li></ul></div></div><div id="outline-container-headline-50" class="outline-5"><h5 id="headline-50">
3.16.3 File Naming</h5><div id="outline-text-headline-50" class="outline-text-5"><p>
必须是 .py 结尾，不能包含 - 。如果你想要一个文件没有扩展名，那可以建一个软连接或者写个 bash 文件包含 exec "$0.py" "$@"。</p></div></div><div id="outline-container-headline-51" class="outline-5"><h5 id="headline-51">
3.16.4 Guidelines derived from Guido’s Recommendations</h5><div id="outline-text-headline-51" class="outline-text-5"><table><thead><tr><th>Type</th><th>Public</th><th>Internal</th></tr></thead><tbody><tr><td>Packages</td><td>lower_with_under</td><td/></tr><tr><td>Modules</td><td>lower_with_under</td><td>_lower_with_under</td></tr><tr><td>Classes</td><td>CapWords</td><td>_CapWords</td></tr><tr><td>Exceptions</td><td>CapWords</td><td/></tr><tr><td>Functions</td><td>lower_with_under()</td><td>_lower_with_under()</td></tr><tr><td>Global/Class Constants</td><td>CAPS_WITH_UNDER</td><td>_CAPS_WITH_UNDER</td></tr><tr><td>Global/Class Variables</td><td>lower_with_under</td><td>_lower_with_under</td></tr><tr><td>Instance Variables</td><td>lower_with_under</td><td>_lower_with_under (protected)</td></tr><tr><td>Method Names</td><td>lower_with_under()</td><td>_lower_with_under() (protected)</td></tr><tr><td>Function/Method Parameters</td><td>lower_with_under</td><td/></tr><tr><td>Local Variables</td><td>lower_with_under</td><td/></tr></tbody></table><p>
不鼓励使用 __ 开头的变量。</p></div></div><div id="outline-container-headline-52" class="outline-5"><h5 id="headline-52">
3.17 Main</h5><div id="outline-text-headline-52" class="outline-text-5"><p>
即使一个文件是个可执行的文件，也应该允许被 import，并且 import 不能有副作用，例如直接运行。主要的功能应该在 main() 函数里面。</p><p>
pydoc 和单元测试都需要文件是可以被 import 的。程序应该总是检查<code>__name__</code> 。</p><div class="src src-python"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="k">def</span><span class="nf">main</span><span class="p">():</span><span class="o">...</span><span class="k">if</span><span class="vm">__name__</span><span class="o">==</span><span class="s1">'__main__'</span><span class="p">:</span><span class="n">main</span><span class="p">()</span></code></pre></div></div><p>
注意要兼容 pydoc ，顶级的函数调用，创建对象以及其他操作都会在 import 的时候就执行。</p></div></div><div id="outline-container-headline-53" class="outline-5"><h5 id="headline-53">
3.18 Function length</h5><div id="outline-text-headline-53" class="outline-text-5"><p>
最好是短小精悍的。这里没有硬性规定，超过 40 行的，看看在不影响程序结构的情况下是不是可以拆分。</p><p>
即使长的函数现在看着没啥问题，但是过几个月之后，需要修改或者增加新功能的时候会比较痛苦。</p></div></div></div></div><div id="outline-container-headline-54" class="outline-4"><h4 id="headline-54">
3.19 Type Annotations</h4><div id="outline-text-headline-54" class="outline-text-4"><div id="outline-container-headline-55" class="outline-5"><h5 id="headline-55">
3.19.1 General Rules</h5><div id="outline-text-headline-55" class="outline-text-5"><ul><li><p>仔细看看 PEP-484</p></li><li><p>在一个方法里面，只有在有必要定义的时候才给 self 和 cls 定义类型，例如<code>@classmethod def create(cls: Type[T]) -> T: return cls()</code></p></li><li><p>如果一些变量或者返回类型不应该明确，使用 any</p></li><li><p>并不需要注解模块里面的所有方法</p><ul><li><p>至少注解公开 API</p></li><li><p>在安全和代码清晰和灵活间取得平衡</p></li><li><p>对出过类型引起的 bug 的地放增加类型注解</p></li><li><p>针对比较难理解的代码增加类型注解</p></li><li><p>针对比较稳定的代码增加类型注解。通常给稳定代码增加注解不会损失灵活性。</p></li></ul></li></ul></div></div><div id="outline-container-headline-56" class="outline-5"><h5 id="headline-56">
3.19.2 Line Breaking</h5><div id="outline-text-headline-56" class="outline-text-5"><p>
参考前面的缩进的定义。</p><p>
增加了类型注解之后，很多函数的签名会变成一个参数一行。</p><div class="src src-python"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="k">def</span><span class="nf">my_method</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">first_var</span><span class="p">:</span><span class="nb">int</span><span class="p">,</span><span class="n">second_var</span><span class="p">:</span><span class="n">Foo</span><span class="p">,</span><span class="n">third_var</span><span class="p">:</span><span class="n">Optional</span><span class="p">[</span><span class="n">Bar</span><span class="p">])</span><span class="o">-></span><span class="nb">int</span><span class="p">:</span><span class="o">...</span></code></pre></div></div><p>
Always prefer breaking between variables, and not for example between variable names and type annotations. However, if everything fits on the same line, go for it.</p><div class="src src-python"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="k">def</span><span class="nf">my_method</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">first_var</span><span class="p">:</span><span class="nb">int</span><span class="p">)</span><span class="o">-></span><span class="nb">int</span><span class="p">:</span><span class="o">...</span></code></pre></div></div><p>
如果返回函数名参数加返回类型太长，可以另起一行空 4 个空格。</p><div class="src src-python"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="k">def</span><span class="nf">my_method</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">first_var</span><span class="p">:</span><span class="nb">int</span><span class="p">)</span><span class="o">-></span><span class="n">Tuple</span><span class="p">[</span><span class="n">MyLongType1</span><span class="p">,</span><span class="n">MyLongType1</span><span class="p">]:</span><span class="o">...</span></code></pre></div></div><p>
更长的情况</p><div class="src src-python"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">Yes</span><span class="p">:</span><span class="k">def</span><span class="nf">my_method</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">other_arg</span><span class="p">:</span><span class="n">Optional</span><span class="p">[</span><span class="n">MyLongType</span><span class="p">]</span><span class="p">)</span><span class="o">-></span><span class="n">Dict</span><span class="p">[</span><span class="n">OtherLongType</span><span class="p">,</span><span class="n">MyLongType</span><span class="p">]:</span><span class="o">...</span></code></pre></div></div><p>
pylint 允许和括号对齐，但是这样会降低可读性。</p><div class="src src-python"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">No</span><span class="p">:</span><span class="k">def</span><span class="nf">my_method</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">other_arg</span><span class="p">:</span><span class="n">Optional</span><span class="p">[</span><span class="n">MyLongType</span><span class="p">]</span><span class="p">)</span><span class="o">-></span><span class="n">Dict</span><span class="p">[</span><span class="n">OtherLongType</span><span class="p">,</span><span class="n">MyLongType</span><span class="p">]:</span><span class="o">...</span></code></pre></div></div><p>
类似上面的例子，尽量不打断类型注解。但是如果太长，也可以换行，保持子类型不被打断。</p><div class="src src-python"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="k">def</span><span class="nf">my_method</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">first_var</span><span class="p">:</span><span class="n">Tuple</span><span class="p">[</span><span class="n">List</span><span class="p">[</span><span class="n">MyLongType1</span><span class="p">],</span><span class="n">List</span><span class="p">[</span><span class="n">MyLongType2</span><span class="p">]],</span><span class="n">second_var</span><span class="p">:</span><span class="n">List</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="n">MyLongType3</span><span class="p">,</span><span class="n">MyLongType4</span><span class="p">]])</span><span class="o">-></span><span class="kc">None</span><span class="p">:</span><span class="o">...</span></code></pre></div></div><p>
If a single name and type is too long, consider using an alias for the type. The last resort is to break after the colon and indent by 4.</p><p>
如果一个类型的名字自己本身太长了，考虑定义一个别名。实在没办法，在冒号后面换行。</p><div class="src src-python"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">Yes</span><span class="p">:</span><span class="k">def</span><span class="nf">my_function</span><span class="p">(</span><span class="n">long_variable_name</span><span class="p">:</span><span class="n">long_module_name</span><span class="o">.</span><span class="n">LongTypeName</span><span class="p">,</span><span class="p">)</span><span class="o">-></span><span class="kc">None</span><span class="p">:</span><span class="o">...</span><span class="n">No</span><span class="p">:</span><span class="k">def</span><span class="nf">my_function</span><span class="p">(</span><span class="n">long_variable_name</span><span class="p">:</span><span class="n">long_module_name</span><span class="o">.</span><span class="n">LongTypeName</span><span class="p">,</span><span class="p">)</span><span class="o">-></span><span class="kc">None</span><span class="p">:</span><span class="o">...</span></code></pre></div></div></div></div><div id="outline-container-headline-57" class="outline-5"><h5 id="headline-57">
3.19.3 Forward Declarations</h5><div id="outline-text-headline-57" class="outline-text-5"><p>
如果需要一个在模块里面还没有定义的类名，可以使用字符串名字。</p><div class="src src-python"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span><span class="nc">MyClass</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span><span class="k">def</span><span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">stack</span><span class="p">:</span><span class="n">List</span><span class="p">[</span><span class="s2">"MyClass"</span><span class="p">])</span><span class="o">-></span><span class="kc">None</span><span class="p">:</span></code></pre></div></div></div></div><div id="outline-container-headline-58" class="outline-5"><h5 id="headline-58">
3.19.4 Default Values</h5><div id="outline-text-headline-58" class="outline-text-5"><p>
基于 PEP-008，只有在同时有类型注解和默认值的时候 = 前后才会同时有空格。</p><div class="src src-python"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">Yes</span><span class="p">:</span><span class="k">def</span><span class="nf">func</span><span class="p">(</span><span class="n">a</span><span class="p">:</span><span class="nb">int</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span><span class="o">-></span><span class="nb">int</span><span class="p">:</span><span class="o">...</span><span class="n">No</span><span class="p">:</span><span class="k">def</span><span class="nf">func</span><span class="p">(</span><span class="n">a</span><span class="p">:</span><span class="nb">int</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span><span class="o">-></span><span class="nb">int</span><span class="p">:</span><span class="o">...</span></code></pre></div></div></div></div><div id="outline-container-headline-59" class="outline-5"><h5 id="headline-59">
3.19.5 NoneType</h5><div id="outline-text-headline-59" class="outline-text-5"><p>
NoneType 是个 fist class 类型，None 是 NoneType 的别名。如果一个参数可以是 None，那应该声明下。你可以使用 Union，但是如果只有一种其他类型，可以使用 Optional。</p><p>
使用明确的 Optional 定义，早先的 PEP-484 允许<code>a: Text = None</code> 解释为<code>a: Optional[Text] = None</code> ，但是现在不推荐了。</p><div class="src src-python"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">Yes</span><span class="p">:</span><span class="k">def</span><span class="nf">func</span><span class="p">(</span><span class="n">a</span><span class="p">:</span><span class="n">Optional</span><span class="p">[</span><span class="n">Text</span><span class="p">],</span><span class="n">b</span><span class="p">:</span><span class="n">Optional</span><span class="p">[</span><span class="n">Text</span><span class="p">]</span><span class="o">=</span><span class="kc">None</span><span class="p">)</span><span class="o">-></span><span class="n">Text</span><span class="p">:</span><span class="o">...</span><span class="k">def</span><span class="nf">multiple_nullable_union</span><span class="p">(</span><span class="n">a</span><span class="p">:</span><span class="n">Union</span><span class="p">[</span><span class="kc">None</span><span class="p">,</span><span class="n">Text</span><span class="p">,</span><span class="nb">int</span><span class="p">])</span><span class="o">-></span><span class="n">Text</span><span class="o">...</span><span class="n">No</span><span class="p">:</span><span class="k">def</span><span class="nf">nullable_union</span><span class="p">(</span><span class="n">a</span><span class="p">:</span><span class="n">Union</span><span class="p">[</span><span class="kc">None</span><span class="p">,</span><span class="n">Text</span><span class="p">])</span><span class="o">-></span><span class="n">Text</span><span class="p">:</span><span class="o">...</span><span class="k">def</span><span class="nf">implicit_optional</span><span class="p">(</span><span class="n">a</span><span class="p">:</span><span class="n">Text</span><span class="o">=</span><span class="kc">None</span><span class="p">)</span><span class="o">-></span><span class="n">Text</span><span class="p">:</span><span class="o">...</span></code></pre></div></div></div></div><div id="outline-container-headline-60" class="outline-5"><h5 id="headline-60">
3.19.6 Type Aliases</h5><div id="outline-text-headline-60" class="outline-text-5"><p>
可以给类型建别名，命名应该是大写开头的。如果只在这个模块里面使用，应该使用 _ 开头。</p><div class="src src-python"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">_ShortName</span><span class="o">=</span><span class="n">module_with_long_name</span><span class="o">.</span><span class="n">TypeWithLongName</span><span class="n">ComplexMap</span><span class="o">=</span><span class="n">Mapping</span><span class="p">[</span><span class="n">Text</span><span class="p">,</span><span class="n">List</span><span class="p">[</span><span class="n">Tuple</span><span class="p">[</span><span class="nb">int</span><span class="p">,</span><span class="nb">int</span><span class="p">]]]</span></code></pre></div></div><p>
类似的还有嵌套的类型定义，或者函数返回的多变量。</p></div></div><div id="outline-container-headline-61" class="outline-5"><h5 id="headline-61">
3.19.7 Ignoring Types</h5><div id="outline-text-headline-61" class="outline-text-5"><p>
可以使用<code># type: ignore</code> 注释关闭单行的类型检查。</p><p>
pytype 支持关闭特定的类型错误。</p><div class="src src-python"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1"># pytype: disable=attribute-error</span></code></pre></div></div></div></div><div id="outline-container-headline-62" class="outline-5"><h5 id="headline-62">
3.19.8 Typing Variables</h5><div id="outline-text-headline-62" class="outline-text-5"><p>
如果一个变量很难通过推导得出，那可以在注释或者冒号后面定义类型。</p><div class="src src-python"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">a</span><span class="o">=</span><span class="n">SomeUndecoratedFunction</span><span class="p">()</span><span class="c1"># type: Foo</span><span class="n">a</span><span class="p">:</span><span class="n">Foo</span><span class="o">=</span><span class="n">SomeUndecoratedFunction</span><span class="p">()</span></code></pre></div></div></div></div><div id="outline-container-headline-63" class="outline-5"><h5 id="headline-63">
3.19.9 Tuples vs Lists</h5><div id="outline-text-headline-63" class="outline-text-5"><p>
不像 list 只能有一个类型，tuple 可以有多个。</p><div class="src src-python"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">a</span><span class="o">=</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span><span class="c1"># type: List[int]</span><span class="n">b</span><span class="o">=</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span><span class="c1"># type: Tuple[int, ...]</span><span class="n">c</span><span class="o">=</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="s2">"2"</span><span class="p">,</span><span class="mf">3.5</span><span class="p">)</span><span class="c1"># type: Tuple[int, Text, float]</span></code></pre></div></div></div></div><div id="outline-container-headline-64" class="outline-5"><h5 id="headline-64">
3.19.10 TypeVars</h5><div id="outline-text-headline-64" class="outline-text-5"><p>
python 的 type 支持范型。通过 TypeVar 这个工厂方法使用。</p><div class="src src-python"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span><span class="nn">typing</span><span class="kn">import</span><span class="n">List</span><span class="p">,</span><span class="n">TypeVar</span><span class="n">T</span><span class="o">=</span><span class="n">TypeVar</span><span class="p">(</span><span class="s2">"T"</span><span class="p">)</span><span class="o">...</span><span class="k">def</span><span class="nf">next</span><span class="p">(</span><span class="n">l</span><span class="p">:</span><span class="n">List</span><span class="p">[</span><span class="n">T</span><span class="p">])</span><span class="o">-></span><span class="n">T</span><span class="p">:</span><span class="k">return</span><span class="n">l</span><span class="o">.</span><span class="n">pop</span><span class="p">()</span></code></pre></div></div><p>
可以给 TypeVar 增加限制条件</p><div class="src src-python"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">AddableType</span><span class="o">=</span><span class="n">TypeVar</span><span class="p">(</span><span class="s2">"AddableType"</span><span class="p">,</span><span class="nb">int</span><span class="p">,</span><span class="nb">float</span><span class="p">,</span><span class="n">Text</span><span class="p">)</span><span class="k">def</span><span class="nf">add</span><span class="p">(</span><span class="n">a</span><span class="p">:</span><span class="n">AddableType</span><span class="p">,</span><span class="n">b</span><span class="p">:</span><span class="n">AddableType</span><span class="p">)</span><span class="o">-></span><span class="n">AddableType</span><span class="p">:</span><span class="k">return</span><span class="n">a</span><span class="o">+</span><span class="n">b</span></code></pre></div></div><p>
有个比较常用的类型是 AnyStr，用它来表示 bytes 或者 unicode 。</p><div class="src src-python"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span><span class="nn">typing</span><span class="kn">import</span><span class="n">AnyStr</span><span class="k">def</span><span class="nf">check_length</span><span class="p">(</span><span class="n">x</span><span class="p">:</span><span class="n">AnyStr</span><span class="p">)</span><span class="o">-></span><span class="n">AnyStr</span><span class="p">:</span><span class="k">if</span><span class="nb">len</span><span class="p">(</span><span class="n">x</span><span class="p">)</span><span class="o">&lt;=</span><span class="mi">42</span><span class="p">:</span><span class="k">return</span><span class="n">x</span><span class="k">raise</span><span class="ne">ValueError</span><span class="p">()</span></code></pre></div></div></div></div><div id="outline-container-headline-65" class="outline-5"><h5 id="headline-65">
3.19.11 String types</h5><div id="outline-text-headline-65" class="outline-text-5"><p>
对于 python3 使用 str。其他说明都是些关于 2 和 3 兼容的。</p></div></div><div id="outline-container-headline-66" class="outline-5"><h5 id="headline-66">
3.19.12 Imports For Typing</h5><div id="outline-text-headline-66" class="outline-text-5"><p>
只导入需要的类型，可以一行导入多个。这些类型也应该作为关键字，不要在你的代码里面使用，如果有冲突可以通过 as 来起个别名。</p><div class="src src-python"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span><span class="nn">typing</span><span class="kn">import</span><span class="n">Any</span><span class="p">,</span><span class="n">Dict</span><span class="p">,</span><span class="n">Optional</span><span class="kn">from</span><span class="nn">typing</span><span class="kn">import</span><span class="n">Any</span><span class="k">as</span><span class="n">AnyType</span></code></pre></div></div></div></div><div id="outline-container-headline-67" class="outline-5"><h5 id="headline-67">
3.19.13 Conditional Imports</h5><div id="outline-text-headline-67" class="outline-text-5"><p>
只有在实验情况下才使用条件导入。</p></div></div><div id="outline-container-headline-68" class="outline-5"><h5 id="headline-68">
3.19.14 Circular Dependencies</h5><div id="outline-text-headline-68" class="outline-text-5"><p>
类型的循环引用一般都是有代码问题，这些代码应该被重构。</p><p>
使用 Any 替换那些导致循环引用的模块。后面使用这个模块真实的类型定义（不过 Any 的属性还是 Any）。</p><div class="src src-python"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span><span class="nn">typing</span><span class="kn">import</span><span class="n">Any</span><span class="n">some_mod</span><span class="o">=</span><span class="n">Any</span><span class="c1"># some_mod.py imports this module.</span><span class="o">...</span><span class="k">def</span><span class="nf">my_method</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">var</span><span class="p">:</span><span class="n">some_mod</span><span class="o">.</span><span class="n">SomeType</span><span class="p">)</span><span class="o">-></span><span class="kc">None</span><span class="p">:</span><span class="o">...</span></code></pre></div></div></div></div><div id="outline-container-headline-69" class="outline-5"><h5 id="headline-69">
3.19.15 Generics</h5><div id="outline-text-headline-69" class="outline-text-5"><p>
When annotating, prefer to specify type parameters for generic types; otherwise, the generics’ parameters will be assumed to be Any.</p><div class="src src-python"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="k">def</span><span class="nf">get_names</span><span class="p">(</span><span class="n">employee_ids</span><span class="p">:</span><span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">])</span><span class="o">-></span><span class="n">Dict</span><span class="p">[</span><span class="nb">int</span><span class="p">,</span><span class="n">Any</span><span class="p">]:</span><span class="o">...</span><span class="c1"># These are both interpreted as get_names(employee_ids: List[Any]) -> Dict[Any, Any]</span><span class="k">def</span><span class="nf">get_names</span><span class="p">(</span><span class="n">employee_ids</span><span class="p">:</span><span class="nb">list</span><span class="p">)</span><span class="o">-></span><span class="n">Dict</span><span class="p">:</span><span class="o">...</span><span class="k">def</span><span class="nf">get_names</span><span class="p">(</span><span class="n">employee_ids</span><span class="p">:</span><span class="n">List</span><span class="p">)</span><span class="o">-></span><span class="n">Dict</span><span class="p">:</span><span class="o">...</span></code></pre></div></div><p>
If the best type parameter for a generic is Any, make it explicit, but remember that in many cases TypeVar might be more appropriate:</p><div class="src src-python"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="k">def</span><span class="nf">get_names</span><span class="p">(</span><span class="n">employee_ids</span><span class="p">:</span><span class="n">List</span><span class="p">[</span><span class="n">Any</span><span class="p">])</span><span class="o">-></span><span class="n">Dict</span><span class="p">[</span><span class="n">Any</span><span class="p">,</span><span class="n">Text</span><span class="p">]:</span><span class="s2">"""Returns a mapping from employee ID to employee name for given IDs."""</span><span class="n">T</span><span class="o">=</span><span class="n">TypeVar</span><span class="p">(</span><span class="s1">'T'</span><span class="p">)</span><span class="k">def</span><span class="nf">get_names</span><span class="p">(</span><span class="n">employee_ids</span><span class="p">:</span><span class="n">List</span><span class="p">[</span><span class="n">T</span><span class="p">])</span><span class="o">-></span><span class="n">Dict</span><span class="p">[</span><span class="n">T</span><span class="p">,</span><span class="n">Text</span><span class="p">]:</span><span class="s2">"""Returns a mapping from employee ID to employee name for given IDs."""</span></code></pre></div></div></div></div></div></div></div></div><div id="outline-container-headline-70" class="outline-3"><h3 id="headline-70">
4 Parting Words</h3><div id="outline-text-headline-70" class="outline-text-3"><p>
保持一致性。</p><p>
编辑代码的时候，注意看看原来的代码的风格。别破坏原来的代码风格。</p><p>
代码风格指导的目的是为了让大家形成一种共同语言，这样更多的关注代码的逻辑。如果一个代码里面语言太多反而会导致阅读代码变困难，所以应该避免。</p></div></div></content></item><item><title>PostgreSQL at Low Level</title><link>https://wdicc.com/postgresql-at-low-level/</link><pubDate>Sun, 02 Feb 2020 11:04:47 +0800</pubDate><guid>https://wdicc.com/postgresql-at-low-level/</guid><description>总结一下这篇文章 PostgreSQL at low level: stay curious! Introduction 我们之前使用数据库的时候，生产环境都只在实体机上面使用，测试和开发为了</description><content type="text/html" mode="escaped"><p>总结一下这篇文章<a href="https://erthalion.info/2019/12/06/postgresql-stay-curious/">PostgreSQL at low level: stay curious!</a></p><div id="outline-container-headline-1" class="outline-3"><h3 id="headline-1">
Introduction</h3><div id="outline-text-headline-1" class="outline-text-3"><p>
我们之前使用数据库的时候，生产环境都只在实体机上面使用，测试和开发为了资源复用会在虚拟机 vm 上面使用。</p><p>
但是现在不少在 vm k8s 或者 aws 上面使用 db 数据库的，实际这里面可能有很多潜在的问题。以前是 pg - OS 这样两层结构，现在是 pg - os - cg - vm - k8s 这样多层结构，这里面任何一层出现问题实际都会导致你的查询变慢。我们以前虚拟机上面跑服务的时候，有时候就会被同物理机其他虚拟机上面的服务影响，例如突然的高 io。这样即使怎么看那个执行计划估计也没用，你必须去研究更底层可能的影响。</p></div></div><div id="outline-container-headline-2" class="outline-3"><h3 id="headline-2">
Shared memory</h3><div id="outline-text-headline-2" class="outline-text-3"><p>
docker 只给 /dev/shm 64MB 大小，所以是会遇到共享内存不足的问题啦。可以通过 strace 定位</p><div class="src src-shell"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="c1"># strace -k -p PID</span>
openat<span class="o">(</span>AT_FDCWD,<span class="s2">"/dev/shm/PostgreSQL.62223175"</span>
ftruncate<span class="o">(</span>176, 50438144<span class="o">)</span><span class="o">=</span><span class="m">0</span>
fallocate<span class="o">(</span>176, 0, 0, 50438144<span class="o">)</span><span class="o">=</span> -1 ENOSPC
> libc-2.27.so<span class="o">(</span>posix_fallocate+0x16<span class="o">)</span><span class="o">[</span>0x114f76<span class="o">]</span>
> postgres<span class="o">(</span>dsm_create+0x67<span class="o">)</span><span class="o">[</span>0x377067<span class="o">]</span>
...
> postgres<span class="o">(</span>ExecInitParallelPlan+0x360<span class="o">)</span><span class="o">[</span>0x254a80<span class="o">]</span>
> postgres<span class="o">(</span>ExecGather+0x495<span class="o">)</span><span class="o">[</span>0x269115<span class="o">]</span>
> postgres<span class="o">(</span>standard_ExecutorRun+0xfd<span class="o">)</span><span class="o">[</span>0x25099d<span class="o">]</span>
...
> postgres<span class="o">(</span>exec_simple_query+0x19f<span class="o">)</span><span class="o">[</span>0x39afdf<span class="o">]</span></code></pre></div></div></div></div><div id="outline-container-headline-3" class="outline-3"><h3 id="headline-3">
vDSO</h3><div id="outline-text-headline-3" class="outline-text-3"><p>
内核支持叫 vDSO (virtual dynamic shared object) 的技术，允许进程直接调用 kernel 方法而不用做用户态和内核态切换，避免性能损失。有的这些调用对数据库来说还挺重要，例如 gettimeofday。但是有了 vm 就不好说啦。可以通过 strace 看看。</p><div class="src src-shell"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="c1"># strace -k -p PID on XEN</span>
gettimeofday<span class="o">({</span><span class="nv">tv_sec</span><span class="o">=</span>1550586520,<span class="nv">tv_usec</span><span class="o">=</span>313499<span class="o">}</span>, NULL<span class="o">)</span><span class="o">=</span><span class="m">0</span></code></pre></div></div></div></div><div id="outline-container-headline-4" class="outline-3"><h3 id="headline-4">
CPU migrations</h3><div id="outline-text-headline-4" class="outline-text-3"><p>
作者做了两个实验。实验一，执行比较重的操作，给一堆数据排序。实验二，使用 pgbench 的 –file=filename[@weight] 参数指定相同的 sql。实验二第二个脚本是执行一些比较简单的查询。</p><div class="src src-text"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"># Experiment 1
SQL script: pg_long.sql
- latency average = 1312.903 ms
# Experiment 2
SQL script 1: pg_long.sql
- weight: 1 (targets 50.0% of total)
- latency average = 1426.928 ms
SQL script 2: pg_short.sql
- weight: 1 (targets 50.0% of total)
- latency average = 303.092 ms</code></pre></div></div><p>
为啥用比较轻量的查询替换之后（这里有点不明白，没看到前面说有做这个替换，我以为是同一个 sql）结果反而更坏？这个瓶颈看着和系统调用应该没啥关系，所以 strace 没用。可以使用 perf 看看硬件性能。</p><div class="src src-text"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"># perf record -e cache-misses,cpu-migrations
# Experiment 1
12,396,382,649 cache-misses # 28.562%
%2,750 cpu-migrations
# Experiment 2
20,665,817,234 cache-misses # 28.533%
10,460 cpu-migrations</code></pre></div></div><p>
看着和 cache 没关系，和 cpu-migrations 有关系，第二个是第一个的 3 倍。</p></div></div><div id="outline-container-headline-5" class="outline-3"><h3 id="headline-5">
MDS</h3><div id="outline-text-headline-5" class="outline-text-3"><p>
MDS (Microarchitectural Data Sampling) 是一种硬件缺陷的攻击，类似基于 intel cpu 的 Meltdown 和 Spectre。针对这些问题内核都有一些方法减轻威胁。怎么评估这个对数据库的影响呢？看下面的 profile</p><div class="src src-text"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"># Children Self Symbol
# ........ ........ ...................................
71.06% 0.00% [.] __libc_start_main
71.06% 0.00% [.] PostmasterMain
56.82% 0.14% [.] exec_simple_query
25.19% 0.06% [k] entry_SYSCALL_64_after_hwframe
25.14% 0.29% [k] do_syscall_64
23.60% 0.14% [.] standard_ExecutorRun</code></pre></div></div><p>
另外做一个内核没有针对这些问题做修复的，可以看到那个那个 do_syscall_64 是多出来的。</p><div class="src src-text"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"># Percent Disassembly of kcore for cycles
# ........ ................................
0.01% : nopl 0x0(%rax,%rax,1)
28.94% : verw 0xffe9e1(%rip)
0.55% : pop %rbx
3.24% : pop %rbp</code></pre></div></div><p>
MDS 的修复会隐含重载 verw 来刷新 CPU 缓存，通过 mds_clear_cpu_buffers()。</p></div></div><div id="outline-container-headline-6" class="outline-3"><h3 id="headline-6">
Lock holder/waiter preemption</h3><div id="outline-text-headline-6" class="outline-text-3"><p>
假设有一个 pg 运行在一个有两个 vCPU（vC1，vC2） 的 vm 里面。</p><p>
这种情况下某个时间点，运行在 vC2 的后端等待一个运行在 vC1 上面的后端的 spin lock。通常这没啥问题，但是如果 hypervisor 突然决定 preempt vC1（看着是抢占的意思？） 会发生什么情况？</p><p>
这样本来 vC2 上面的后端以为是个小等待的，但是现在不知道需要等多久了。幸运的是 intel 有一种技术 PAUSE-Loop Exiting 允许通过发送 VM exit 来阻止无意义的 spinning。同时不幸的是，这会因为 VM 和 hypervisor 间切换带来一些多余的负担，如果这个暂停不正确的触发，那啥收获也没有。</p><p>
怎么衡量呢。通过 perf 可以看看。不同 vm 还不一样，kvm 是看 kvm:kvm_exit 事件。</p><div class="src src-text"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"># experiment 1: pgbench, read write
# latency average = 17.782 ms
$ modprobe kvm-intel ple_gap=128
$ perf record -e kvm:kvm_exit
# reason PAUSE_INSTRUCTION 306795
# experiment 2: pgbench, read write
# latency average = 16.858 ms
$ modprobe kvm-intel ple_gap=0
$ perf record -e kvm:kvm_exit
# reason PAUSE_INSTRUCTION 0</code></pre></div></div><p>
第一个配置里面，使用 PLE 默认的配置，可以看到一堆的暂停。第二个完全禁止了 PLE，可以看到 0 个暂停。然后还能看到后面这个 latency 还低呢，这极可能是因为我们的 CPU 们被过度使用了呢，PLE 错误的识别了那些等待。</p></div></div><div id="outline-container-headline-7" class="outline-3"><h3 id="headline-7">
Huge pages</h3><div id="outline-text-headline-7" class="outline-text-3"><p>
首先不要混淆 classical huge pages 和 transparent huge pages。后者是个守护进程，用来在后台把普通的内存合并成 huge pages，一般情况下建议关闭他，因为可能会带来不可预料的消耗。</p><p>
看看文档怎么说的</p><div class="src src-text"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text">使用大页可以极大的减少 TLB 的压力，提升 TLB 命中率，从而提升整个系统的性能。</code></pre></div></div><p>
怎么影响到数据库的呢，用 perf 看看。</p><div class="src src-text"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"># Experiment 1, pgbench read/write, huge_pages off
# perf record -e dTLB-loads,dTLB-stores -p PID
Samples: 894K of event 'dTLB-load-misses'
Event count (approx.): 784439650
Samples: 822K of event 'dTLB-store-misses'
Event count (approx.): 101471557
# Experiment 2, pgbench read/write, huge_pages on
# perf record -e dTLB-loads,dTLB-stores -p PID
Samples: 832K of event 'dTLB-load-misses'
Event count (approx.): 640614445
Samples: 736K of event 'dTLB-store-misses'
Event count (approx.): 72447300</code></pre></div></div><p>
两个实验都是使用的 pgbench 的 TPC-B 方法。第一个关闭了 huge pages，第二个通过 huge_pages=on 打开了支持。第二个减少了 20% 的 TLD-load-misses。这里没有关注 latencies，只关注了这一个事情，不是整个系统，因为其他系统组件可能会带来噪音。</p></div></div><div id="outline-container-headline-8" class="outline-3"><h3 id="headline-8">
BPF</h3><div id="outline-text-headline-8" class="outline-text-3"><p>
没有接触过 BPF 和 BCC ，不能很好的翻译。这里<a href="https://zhuanlan.zhihu.com/p/32027979">有篇文章</a>讲这个。</p></div></div><div id="outline-container-headline-9" class="outline-3"><h3 id="headline-9">
LLC</h3><div id="outline-text-headline-9" class="outline-text-3"><p>
似乎是 last level cache 。似乎可以获取到 cache miss per query。</p><div class="src src-text"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"># llcache_per_query.py bin/postgres
PID QUERY CPU REFERENCE MISS HIT%
9720 UPDATE pgbench_tellers ... 0 2000 1000 50.00%
9720 SELECT abalance FROM ... 2 2000 100 95.00%
...
Total References: 3303100 Total Misses: 599100 Hit Rate: 81.86%</code></pre></div></div><p>
那个 llcache_per_query.py 在<a href="https://github.com/erthalion/postgres-bcc/blob/master/llcache_per_query.py">这里</a>有。</p></div></div><div id="outline-container-headline-10" class="outline-3"><h3 id="headline-10">
Writeback</h3><div id="outline-text-headline-10" class="outline-text-3"><p>
pg 使用的是 buffered IO。可以使用 ftrace 来监控。需要先 mount tracefs 通常在 /sys/kernel/debug/tracing</p><div class="src src-text"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"># cd /sys/kernel/debug/tracing
# echo 1 > events/writeback/writeback_written/enable
# tail trace
kworker/u8:1 reason=periodic nr_pages=101429
kworker/u8:1 reason=background nr_pages=MAX_ULONG
kworker/u8:3 reason=periodic nr_pages=101457</code></pre></div></div><p>
上面这个是个输出的简短的版本，MAX_ULONG 是 maximum unsigned long 的意思。</p><p>
可以看到内核在后台 writeback ，试图把尽量多的文件系统缓存写入。</p><div class="src src-text"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"># pgbench insert workload
# io_timeouts.py bin/postgres
[18335] END: MAX_SCHEDULE_TIMEOUT
[18333] END: MAX_SCHEDULE_TIMEOUT
[18331] END: MAX_SCHEDULE_TIMEOUT
[18318] truncate pgbench_history: MAX_SCHEDULE_TIMEOUT</code></pre></div></div><p>
可以通过 dirty_background_bytes 控制。也可以通过 bgwriter_flush_after / checkpointer_flush_after 控制 bgwriter 和 checkpointer。</p></div></div><div id="outline-container-headline-11" class="outline-3"><h3 id="headline-11">
Memory reclaim</h3><div id="outline-text-headline-11" class="outline-text-3"><p>
如果使用过 kubernetes 的话，可能会看到下面的配置</p><div class="src src-yaml"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nt">resources</span><span class="p">:</span><span class="w"/><span class="w"/><span class="nt">requests</span><span class="p">:</span><span class="w"/><span class="w"/><span class="nt">memory</span><span class="p">:</span><span class="w"/><span class="s2">"64Mi"</span><span class="w"/><span class="w"/><span class="nt">cpu</span><span class="p">:</span><span class="w"/><span class="s2">"250m"</span><span class="w"/><span class="w"/><span class="nt">limits</span><span class="p">:</span><span class="w"/><span class="w"/><span class="nt">memory</span><span class="p">:</span><span class="w"/><span class="s2">"128Mi"</span><span class="w"/><span class="w"/><span class="nt">cpu</span><span class="p">:</span><span class="w"/><span class="s2">"500m"</span></code></pre></div></div></div></div></content></item><item><title>Dont Do This in PostgreSQL</title><link>https://wdicc.com/dont-do-this-in-postgresql/</link><pubDate>Sat, 01 Feb 2020 14:46:36 +0800</pubDate><guid>https://wdicc.com/dont-do-this-in-postgresql/</guid><description>前几天看见个这个，翻译一下。 不要使用 SQL_ASCII 可以看德哥这篇文章，使用这个编码后就是给啥存啥，如果 db 用户瞎用</description><content type="text/html" mode="escaped"><p>前几天看见个<a href="https://wiki.postgresql.org/wiki/Don't_Do_This">这个</a>，翻译一下。</p><div id="outline-container-headline-1" class="outline-3"><h3 id="headline-1">
不要使用 SQL_ASCII</h3><div id="outline-text-headline-1" class="outline-text-3"><p>
可以看德哥<a href="https://billtian.github.io/digoal.blog/2013/03/15/01.html">这篇文章</a>，使用这个编码后就是给啥存啥，如果 db 用户瞎用，里面 gbk utf8 都往里放，那将来用的时候会比较麻烦，而且这样舍弃了数据库提供的数据检查功能，不是浪费么。</p></div></div><div id="outline-container-headline-2" class="outline-3"><h3 id="headline-2">
不要使用 psql -W or –password</h3><div id="outline-text-headline-2" class="outline-text-3"><p>
主要就是 psql 实际会自动处理这个事情的，如果需要密码会找你要的。不用强制让他提示你输入密码。</p></div></div><div id="outline-container-headline-3" class="outline-3"><h3 id="headline-3">
不要使用 rules</h3><div id="outline-text-headline-3" class="outline-text-3"><p>
可以使用 trigger 代替。</p><div id="outline-container-headline-4" class="outline-4"><h4 id="headline-4">
depesz 讲的<a href="https://www.depesz.com/2010/06/15/to-rule-or-not-to-rule-that-is-the-question/">To rule or not to rule that is the question</a></h4><div id="outline-text-headline-4" class="outline-text-4"><p>
depesz 的意思是不要使用 rule。即使是多年的 dba 也可能会用错。</p><p>
rule 主要是通过修改 sql 来实现逻辑，而不是通过一定规则来执行另一个 sql。</p></div></div><div id="outline-container-headline-5" class="outline-4"><h4 id="headline-5">
PG 文档里面讲的<a href="https://www.postgresql.org/docs/12/rules-triggers.html">rules-triggers</a></h4><div id="outline-text-headline-5" class="outline-text-4"><p>
用 rule 可以做很多 trigger 可以做的事情。一些约束，特别是外键不能使用 rule 完成。当一列里面的值在其他表里面不存在的时候可以使用 rule 重写命令为什么都不做，但是这样的话数据就丢掉了，这并不是个好主意。如果需要检查数据是否有效，在无效的时候还需要报个错什么的，那只能使用 trigger 完成。</p><p>
这一章会讨论如何使用 rule 来更新 view。本例里面所有的 rule 都可以使用 view 的 trigger 代替。使用 trigger 会比 rule 简单一点，尤其那些在更新的时候逻辑比较复杂的。</p><p>
当两个方法都可以的时候，哪种好取决于数据库的使用。trigger 会针对影响到的行每行触发一次。rule 通过修改 query 或者添加一些查询来完成。所以如果一条语句里面多条数据被影响，rule 会触发一条额外的命令，比 trigger 每行都执行一次快，并且这里可能还有很多重复性的计算好决定需要做什么。然而，trigger 概念上比 rule 简单，新手也不容易犯错。</p><p>
举个例子：</p><div class="src src-sql"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="k">CREATE</span><span class="w"/><span class="k">TABLE</span><span class="w"/><span class="n">computer</span><span class="w"/><span class="p">(</span><span class="w"/><span class="w"/><span class="n">hostname</span><span class="w"/><span class="nb">text</span><span class="p">,</span><span class="w"/><span class="c1">-- indexed</span><span class="c1"/><span class="w"/><span class="n">manufacturer</span><span class="w"/><span class="nb">text</span><span class="w"/><span class="c1">-- indexed</span><span class="c1"/><span class="p">);</span><span class="w"/><span class="w"/><span class="w"/><span class="k">CREATE</span><span class="w"/><span class="k">TABLE</span><span class="w"/><span class="n">software</span><span class="w"/><span class="p">(</span><span class="w"/><span class="w"/><span class="n">software</span><span class="w"/><span class="nb">text</span><span class="p">,</span><span class="w"/><span class="c1">-- indexed</span><span class="c1"/><span class="w"/><span class="n">hostname</span><span class="w"/><span class="nb">text</span><span class="w"/><span class="c1">-- indexed</span><span class="c1"/><span class="p">);</span></code></pre></div></div><p>
每个表都有几千数据，hostname 是唯一键。rule 或者 trigger 需要实现一个约束，从 computer 表删除数据的时候，同时从 software 表删除。trigger 会使用下面的命令</p><div class="src src-sql"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="k">DELETE</span><span class="w"/><span class="k">FROM</span><span class="w"/><span class="n">software</span><span class="w"/><span class="k">WHERE</span><span class="w"/><span class="n">hostname</span><span class="w"/><span class="o">=</span><span class="w"/><span class="err">$</span><span class="mi">1</span><span class="p">;</span></code></pre></div></div><p>
因为 trigger 在每行删除的时候都会执行，所以数据库可以保存执行计划传递一个 hostname 作为参数就行。rule 需要使用下面的命令</p><div class="src src-sql"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="k">CREATE</span><span class="w"/><span class="k">RULE</span><span class="w"/><span class="n">computer_del</span><span class="w"/><span class="k">AS</span><span class="w"/><span class="k">ON</span><span class="w"/><span class="k">DELETE</span><span class="w"/><span class="k">TO</span><span class="w"/><span class="n">computer</span><span class="w"/><span class="w"/><span class="k">DO</span><span class="w"/><span class="k">DELETE</span><span class="w"/><span class="k">FROM</span><span class="w"/><span class="n">software</span><span class="w"/><span class="k">WHERE</span><span class="w"/><span class="n">hostname</span><span class="w"/><span class="o">=</span><span class="w"/><span class="k">OLD</span><span class="p">.</span><span class="n">hostname</span><span class="p">;</span></code></pre></div></div><p>
看看不同的删除情况。</p><div class="src src-sql"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="k">DELETE</span><span class="w"/><span class="k">FROM</span><span class="w"/><span class="n">computer</span><span class="w"/><span class="k">WHERE</span><span class="w"/><span class="n">hostname</span><span class="w"/><span class="o">=</span><span class="w"/><span class="s1">'mypc.local.net'</span><span class="p">;</span></code></pre></div></div><p>
数据库会使用索引查询，trigger 也会使用索引，所以都挺快。rule 增加额外的命令之后如下</p><div class="src src-sql"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="k">DELETE</span><span class="w"/><span class="k">FROM</span><span class="w"/><span class="n">software</span><span class="w"/><span class="k">WHERE</span><span class="w"/><span class="n">computer</span><span class="p">.</span><span class="n">hostname</span><span class="w"/><span class="o">=</span><span class="w"/><span class="s1">'mypc.local.net'</span><span class="w"/><span class="w"/><span class="k">AND</span><span class="w"/><span class="n">software</span><span class="p">.</span><span class="n">hostname</span><span class="w"/><span class="o">=</span><span class="w"/><span class="n">computer</span><span class="p">.</span><span class="n">hostname</span><span class="p">;</span></code></pre></div></div><p>
根据前面的表定义，执行计划如下</p><div class="src src-sql"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="n">Nestloop</span><span class="w"/><span class="w"/><span class="o">-></span><span class="w"/><span class="k">Index</span><span class="w"/><span class="n">Scan</span><span class="w"/><span class="k">using</span><span class="w"/><span class="n">comp_hostidx</span><span class="w"/><span class="k">on</span><span class="w"/><span class="n">computer</span><span class="w"/><span class="w"/><span class="o">-></span><span class="w"/><span class="k">Index</span><span class="w"/><span class="n">Scan</span><span class="w"/><span class="k">using</span><span class="w"/><span class="n">soft_hostidx</span><span class="w"/><span class="k">on</span><span class="w"/><span class="n">software</span></code></pre></div></div><p>
所以实际执行的时候 trigger 和 rule 实现并没有啥区别。</p><p>
下面的删除命令会匹配 2000 条 computer 表里面 hostname 开头是 'old' 的数据，一种删除的方法如下：</p><div class="src src-sql"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="k">DELETE</span><span class="w"/><span class="k">FROM</span><span class="w"/><span class="n">computer</span><span class="w"/><span class="k">WHERE</span><span class="w"/><span class="n">hostname</span><span class="w"/><span class="o">>=</span><span class="w"/><span class="s1">'old'</span><span class="w"/><span class="w"/><span class="k">AND</span><span class="w"/><span class="n">hostname</span><span class="w"/><span class="o">&lt;</span><span class="w"/><span class="s1">'ole'</span></code></pre></div></div><p>
rule 修改增加之后的命令如下：</p><div class="src src-sql"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="k">DELETE</span><span class="w"/><span class="k">FROM</span><span class="w"/><span class="n">software</span><span class="w"/><span class="k">WHERE</span><span class="w"/><span class="n">computer</span><span class="p">.</span><span class="n">hostname</span><span class="w"/><span class="o">>=</span><span class="w"/><span class="s1">'old'</span><span class="w"/><span class="k">AND</span><span class="w"/><span class="n">computer</span><span class="p">.</span><span class="n">hostname</span><span class="w"/><span class="o">&lt;</span><span class="w"/><span class="s1">'ole'</span><span class="w"/><span class="w"/><span class="k">AND</span><span class="w"/><span class="n">software</span><span class="p">.</span><span class="n">hostname</span><span class="w"/><span class="o">=</span><span class="w"/><span class="n">computer</span><span class="p">.</span><span class="n">hostname</span><span class="p">;</span></code></pre></div></div><p>
执行计划</p><div class="src src-sql"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="n">Hash</span><span class="w"/><span class="k">Join</span><span class="w"/><span class="w"/><span class="o">-></span><span class="w"/><span class="n">Seq</span><span class="w"/><span class="n">Scan</span><span class="w"/><span class="k">on</span><span class="w"/><span class="n">software</span><span class="w"/><span class="w"/><span class="o">-></span><span class="w"/><span class="n">Hash</span><span class="w"/><span class="w"/><span class="o">-></span><span class="w"/><span class="k">Index</span><span class="w"/><span class="n">Scan</span><span class="w"/><span class="k">using</span><span class="w"/><span class="n">comp_hostidx</span><span class="w"/><span class="k">on</span><span class="w"/><span class="n">computer</span></code></pre></div></div><p>
另外一种删除的方法：</p><div class="src src-sql"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="k">DELETE</span><span class="w"/><span class="k">FROM</span><span class="w"/><span class="n">computer</span><span class="w"/><span class="k">WHERE</span><span class="w"/><span class="n">hostname</span><span class="w"/><span class="o">~</span><span class="w"/><span class="s1">'^old'</span><span class="p">;</span></code></pre></div></div><p>
rule 修改之后的执行计划</p><div class="src src-sql"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="n">Nestloop</span><span class="w"/><span class="w"/><span class="o">-></span><span class="w"/><span class="k">Index</span><span class="w"/><span class="n">Scan</span><span class="w"/><span class="k">using</span><span class="w"/><span class="n">comp_hostidx</span><span class="w"/><span class="k">on</span><span class="w"/><span class="n">computer</span><span class="w"/><span class="w"/><span class="o">-></span><span class="w"/><span class="k">Index</span><span class="w"/><span class="n">Scan</span><span class="w"/><span class="k">using</span><span class="w"/><span class="n">soft_hostidx</span><span class="w"/><span class="k">on</span><span class="w"/><span class="n">software</span></code></pre></div></div><p>
查询规划器并没有意识到使用 AND 组合多个条件组合的时候也可以使用索引，而做类似正则表达式那条一样的处理。trigger 每 200 个匹配要删除的 computer 会执行一次，会对 software 表执行一次索引查询。使用 rule 的第二个实现会执行使用索引的命令。rule 使用全表扫描的方法是否会比较快取决于 software 表的大小。trigger 通过 SPI 管理器执行的 2000 次命令总归还是需要一些时间的，即使索引都会在内存里面缓存。</p><p>
最后看一条命令</p><div class="src src-sql"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="k">DELETE</span><span class="w"/><span class="k">FROM</span><span class="w"/><span class="n">computer</span><span class="w"/><span class="k">WHERE</span><span class="w"/><span class="n">manufacturer</span><span class="w"/><span class="o">=</span><span class="w"/><span class="s1">'bim'</span><span class="p">;</span></code></pre></div></div><p>
这会删除 computer 里面很多行。所以 trigger 还是会执行很多次。rule 执行的命令如下</p><div class="src src-sql"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="k">DELETE</span><span class="w"/><span class="k">FROM</span><span class="w"/><span class="n">software</span><span class="w"/><span class="k">WHERE</span><span class="w"/><span class="n">computer</span><span class="p">.</span><span class="n">manufacturer</span><span class="w"/><span class="o">=</span><span class="w"/><span class="s1">'bim'</span><span class="w"/><span class="w"/><span class="k">AND</span><span class="w"/><span class="n">software</span><span class="p">.</span><span class="n">hostname</span><span class="w"/><span class="o">=</span><span class="w"/><span class="n">computer</span><span class="p">.</span><span class="n">hostname</span><span class="p">;</span></code></pre></div></div><p>
执行计划是个 nestloop 两个索引查询</p><div class="src src-sql"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="n">Nestloop</span><span class="w"/><span class="w"/><span class="o">-></span><span class="w"/><span class="k">Index</span><span class="w"/><span class="n">Scan</span><span class="w"/><span class="k">using</span><span class="w"/><span class="n">comp_manufidx</span><span class="w"/><span class="k">on</span><span class="w"/><span class="n">computer</span><span class="w"/><span class="w"/><span class="o">-></span><span class="w"/><span class="k">Index</span><span class="w"/><span class="n">Scan</span><span class="w"/><span class="k">using</span><span class="w"/><span class="n">soft_hostidx</span><span class="w"/><span class="k">on</span><span class="w"/><span class="n">software</span></code></pre></div></div><p>
在上面这些情况里面，rule 额外增加的命令不太依赖于影响的数据量。</p><p>
总结下就是，rule 在数据量比较大并且是比较糟糕的 join 导致了查询规划器失败的情况下会比 trigger 明显的慢。</p></div></div></div></div><div id="outline-container-headline-6" class="outline-3"><h3 id="headline-6">
不要使用表继承</h3><div id="outline-text-headline-6" class="outline-text-3"><p>
使用外键来代替表继承。</p><p>
现在表分区已经是 native 支持了，不用使用表继承来实现了。在维护某些历史表的情况下使用表继承可以避免使用 union all 获得全部数据，但是也有一些坑，比如查询的时候可能会需要特别指定是不是需要子表的数据，要不即使只想查父表里面的数据的时候也可能会触发子表的扫描，浪费时间。</p></div></div><div id="outline-container-headline-7" class="outline-3"><h3 id="headline-7">
不要使用 Not In</h3><div id="outline-text-headline-7" class="outline-text-3"><ol><li><p>not in 语句里面如果有 null 那会导致一行数据都不能返回。</p></li><li><p>会导致查询规划器无法很好的执行 sql。一般会有两种情况，一种是哈希子查询(hashed subplan)，一种是一般子查询(plain subplan)。哈希子查询比较快，但是限于数据了不能太大。一般子查询就很糟糕了，是个 O(n^2) 复杂度的操作。</p></li></ol></div></div><div id="outline-container-headline-8" class="outline-3"><h3 id="headline-8">
不要用驼峰方式给表取名，使用下划线方式</h3><div id="outline-text-headline-8" class="outline-text-3"><p>
就是不要用 NamesLikeThis 使用 names_like_this。</p><p>
pg 里面会使用小写字母做表名，除非使用了 "" ，例如 Foo 会创建 foo，"Bar" 会创建 Bar 。这样查的时候对于 "Foo", Bar, bar 这几个名字都会报找不到表（那个 Bar 找不到是因为每家引号）。</p><p>
有时候在报表里面可能想要名字显示的好看一点，那可以使用 as 来起个别名。</p></div></div><div id="outline-container-headline-9" class="outline-3"><h3 id="headline-9">
不要使用 between，特别是针对时间戳类型</h3><div id="outline-text-headline-9" class="outline-text-3"><p>
例如下面这个</p><div class="src src-sql"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="k">SELECT</span><span class="w"/><span class="o">*</span><span class="w"/><span class="k">FROM</span><span class="w"/><span class="n">blah</span><span class="w"/><span class="k">WHERE</span><span class="w"/><span class="n">timestampcol</span><span class="w"/><span class="k">BETWEEN</span><span class="w"/><span class="s1">'2018-06-01'</span><span class="w"/><span class="k">AND</span><span class="w"/><span class="s1">'2018-06-08'</span></code></pre></div></div><p>
对于 2018-06-08 00:00:00.000000 也是符合的。使用下面的查询会好一点</p><div class="src src-sql"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="k">SELECT</span><span class="w"/><span class="o">*</span><span class="w"/><span class="k">FROM</span><span class="w"/><span class="n">blah</span><span class="w"/><span class="k">WHERE</span><span class="w"/><span class="n">timestampcol</span><span class="w"/><span class="o">>=</span><span class="w"/><span class="s1">'2018-06-01'</span><span class="w"/><span class="k">AND</span><span class="w"/><span class="n">timestampcol</span><span class="w"/><span class="o">&lt;</span><span class="w"/><span class="s1">'2018-06-08'</span></code></pre></div></div><p>
对于 int 和 date 类型可能问题不大。</p></div></div><div id="outline-container-headline-10" class="outline-3"><h3 id="headline-10">
不要使用 timestamp 类型（就是不加时区的）</h3><div id="outline-text-headline-10" class="outline-text-3"><p>
使用 timestamptz 来存时间。不带时区的一旦涉及到时区相关的运算就会比较麻烦了，你总是需要指定你时间的时区。如果你不打算进行什么运算，只是存一下，也可以使用 timestamp.</p></div></div><div id="outline-container-headline-11" class="outline-3"><h3 id="headline-11">
不要使用 tempstamp 类型存放 UTC 时间</h3><div id="outline-text-headline-11" class="outline-text-3"><p>
和上面那个类似吧。</p></div></div><div id="outline-container-headline-12" class="outline-3"><h3 id="headline-12">
不要使用 timetz</h3><div id="outline-text-headline-12" class="outline-text-3"><p>
使用 timestamptz 代替。</p></div></div><div id="outline-container-headline-13" class="outline-3"><h3 id="headline-13">
不要使用 CURRENT_TIME</h3><div id="outline-text-headline-13" class="outline-text-3"><p>
使用下面的代替：</p><ol><li><p>带时区的 timestamp：CURRENT_TIMESTAMP 或者 now()</p></li><li><p>不带时区的：LOCALTIMESTAMP</p></li><li><p>只需要日期：CURRENT_DATE</p></li><li><p>只需要时间：LOCALTIME</p></li></ol><p>因为 CURRENT_TIME 会返回一个 timetz 类型的数据。</p></div></div><div id="outline-container-headline-14" class="outline-3"><h3 id="headline-14">
不要使用 timestamp(0) 或者 timestamptz(0)</h3><div id="outline-text-headline-14" class="outline-text-3"><p>
不要指定精度，尤其是 0。使用 date_trunc('second', xxx) 来代替。</p><p>
因为指定精度会使用 round 方式而不是通常认为的 truncate 方式来处理，例如你使用 now() 的时候可能会产生一个未来半秒之后的时间。</p></div></div><div id="outline-container-headline-15" class="outline-3"><h3 id="headline-15">
不要使用 char(n)</h3><div id="outline-text-headline-15" class="outline-text-3"><p>
使用 text 代替。</p><p>
char(n) 对于不足的部分会使用空数据不足，这会浪费空间，并且也并不会让查询变快。并且 char(n) 还不是个固定长度的类型，不同的字符的 byte 长度不同。</p></div></div><div id="outline-container-headline-16" class="outline-3"><h3 id="headline-16">
对于固定长度的标识符也不用使用 char(n)</h3><div id="outline-text-headline-16" class="outline-text-3"><p>
即使是定长的字符串也不要用 char(n)，例如国家代码，hash 值，标识符啥的。使用 text 或者 domain over text，加约束<code>CHECK(length(VALUE)=3)</code> 或者<code>CHECK(VALUE ~ '^[[[[:alpha:]]]]{3}$')</code> 或者其他类似的。</p><p>
因为 char(n) 并不检查长度，只是会补齐。使用 char(n) 并不会比 varchar(n) 有什么性能上面的提升。反过来反而是会提升。另外，如果查询的时候传入的数据类型是个 text 或者 varchar 的话就用不上索引了。</p></div></div><div id="outline-container-headline-17" class="outline-3"><h3 id="headline-17">
不要使用 varchar(n)</h3><div id="outline-text-headline-17" class="outline-text-3"><p>
使用不指定长度的 varchar() 或者 text 代替。</p><p>
varchar(n) 在插入长度超过 n 的字符的时候会报错。varchar() 或者 text 没有长度限制。存相同长度的字符的时候，他们三个占用的空间是一样的，性能也没区别。</p><p>
如果你确实需要长度限制，那么 varchar(n) 也挺好的，但是比如你用 varchar(20) 来存名字，某天可能一个名字巨长的人来了，他就不能注册了。</p><p>
如果你需要限制长度，那通常不止需要最大长度，也会需要限制最小长度，那使用 check 约束比较好。</p></div></div><div id="outline-container-headline-18" class="outline-3"><h3 id="headline-18">
不要使用 money 类型</h3><div id="outline-text-headline-18" class="outline-text-3"><p>
只处理一种货币类型，也不要处理分级别的 cents，并且只加减操作的话，可以试试看。</p><p>
这个我补充下：一般有建议是把金额放大成整数，只操作整数。这样可以避免无意义的小数，比如 0.011 元这个钱在现实世界里面是不存在的，只有 0.01 是有意义的。另外计算机世界里面浮点数的乘法和除法可能会出来 0.010000008 这样的金额的，也是无意义的。所以有一个建议就是把金额映射成 100 倍，存成整数，比如 0.01 元，存成 1。按说未来只有通货膨胀了，紧缩出现更小面额的可能性也不大，或者也可以考虑放大 1000 倍什么的。。。</p></div></div><div id="outline-container-headline-19" class="outline-3"><h3 id="headline-19">
不要使用 serial</h3><div id="outline-text-headline-19" class="outline-text-3"><p>
10 增加了<a href="https://www.postgresql.org/docs/12/sql-createtable.html">identity</a> 类型，</p><div class="src src-sql"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="k">GENERATED</span><span class="w"/><span class="err">{</span><span class="w"/><span class="n">ALWAYS</span><span class="w"/><span class="o">|</span><span class="w"/><span class="k">BY</span><span class="w"/><span class="k">DEFAULT</span><span class="w"/><span class="err">}</span><span class="w"/><span class="k">AS</span><span class="w"/><span class="k">IDENTITY</span><span class="w"/><span class="p">[</span><span class="w"/><span class="p">(</span><span class="w"/><span class="n">sequence_options</span><span class="w"/><span class="p">)</span><span class="w"/><span class="p">]</span></code></pre></div></div><p>
类似原来的 serial， 会创建一个 sequence 关联到这个字段，新插入的行会自动产生值。</p><p>
ALWAYS 和 BY DEFAULT 用来指定用户如果指定了一个值的时候怎么处理。设置成 ALWAYS 的话只有在 INSERT 的时候指定 overriding system value 才能。对于 BY DEFAULT，用户指定的优先。对于 COPY 命令总是会使用用户指定的。</p><p>
新的 identity 符合 sql 标准。老的 serial 类型有一些小问题，导致管理稍微有些麻烦。比如你需要单独给对应的 sequance 权限之后，用户才能真的对这个表插入。具体可以看<a href="https://www.2ndquadrant.com/en/blog/postgresql-10-identity-columns/">这个</a>。</p></div></div><div id="outline-container-headline-20" class="outline-3"><h3 id="headline-20">
不要使用 trust 允许 tcp/ip 方式连接</h3><div id="outline-text-headline-20" class="outline-text-3"><p>
特别是这样，会允许网络上的其他人连接你的数据库，还可以使用超级用户。</p><div class="src src-text"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text">host all all 0.0.0.0/0 trust</code></pre></div></div></div></div></content></item><item><title>Algorithms Lessons From MIT</title><link>https://wdicc.com/algorithms-lessons-from-mit/</link><pubDate>Wed, 29 Jan 2020 09:32:04 +0800</pubDate><guid>https://wdicc.com/algorithms-lessons-from-mit/</guid><description>在推上看到的这个课程 Introduction to Algorithms，虽然是 2011 年的，但是基础的东西还是比较稳定的，刚好补习一</description><content type="text/html" mode="escaped"><p>在推上看到的这个课程<a href="https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-006-introduction-to-algorithms-fall-2011/index.htm">Introduction to Algorithms</a>，虽然是 2011 年的，但是基础的东西还是比较稳定的，刚好补习一下基础知识，做点笔记。</p><div id="outline-container-headline-1" class="outline-3"><h3 id="headline-1">
Peak finding</h3><div id="outline-text-headline-1" class="outline-text-3"><p>
从头一个一个顺序找，是<code class="verbatim">O(n)</code> 复杂度。也可以用二分，从中间开始找，然后递归，复杂度是<code>O(log(n))</code> 。</p></div></div><div id="outline-container-headline-2" class="outline-3"><h3 id="headline-2">
Models of Computation, Document Distance</h3><div id="outline-text-headline-2" class="outline-text-3"><ul><li><p>L.append(x): O(1)</p></li><li><p>L = L1 + L2: O(1)</p></li><li><p>len(L): O(1)</p></li><li><p>L.sort(): O(nlog(n)) 还和比较的复杂度有关系</p></li><li><p>val in L: O(n)</p></li><li><p>D[key]=val: O(1)</p></li><li><p>key in D: O(1) 还取决于有没有冲突</p></li></ul><p>文档距离公式：</p><p>
d(D1, D2) = D1*D2 = ∑D1[W]*D2[W]</p><p>
只考虑相同词出现的次数，这样文字多的会打分比较多，文字少的打分少，这个公式和文章规模没关系。所以修正下，除以他们的长度，就是</p><p>
d(D1, D2) = D1*D2 = ∑(D1[W]*D2[W]/|D1|*|D2|)</p><p>
这个就是计算两个向量的夹角，夹角越小表示两个越接近。</p></div></div><div id="outline-container-headline-3" class="outline-3"><h3 id="headline-3">
Insertion Sort, Merge Sort</h3><div id="outline-text-headline-3" class="outline-text-3"><ul><li><p>插入排序：顺序检查每个元素，和前面的比较，如果比前面的小，那就和前面的交换。如果发生了交换，那需要递归和更前面的比较，直到没有交换。继续检查下一个元素。复杂度是 O(n^2)。</p></li><li><p>插入排序优化：需要和前面发生交换的时候，因为前面都是排好序的，所以可以使用二分找到合适的位置，而不用一个一个找。复杂度是 O(nlog(n))。</p></li><li><p>归并排序：归并需要是排序好的数组，但是可以通过拆分，把原始数据拆分成2个未排序数组，然后递归继续拆分，直到两个数组只有一个元素，比较之后就可以归并成一个有序数组，递归返回就可以完成排序。复杂度 O(nlog(n))</p></li></ul><p>递归算法的复杂度计算思路，T(n)=2T(n/2)+cx，取决于那个 x</p><ul><li><p>如果 x 是 n ，每层递归都是 n，这样计算量是分布到每层的，层数是 log(n)，那就是 nlog(n)。</p></li><li><p>如果 x 是 1 ，那第一层是 c，第二层是 2c…. 都是常数，只有第 n 层是 cn 值得考虑，所以复杂度就是 n。</p></li><li><p>如果 x 是 n^2，那第一层是 cn^2，第二层是 cn^2/2…. 因为 1+1/2+1/4 &lt; 2 这样后面的层就不用考虑了，只考虑第一层就行，所以复杂度就是 n^2。</p></li></ul></div></div><div id="outline-container-headline-4" class="outline-3"><h3 id="headline-4">
Heaps and Heap Sort</h3><div id="outline-text-headline-4" class="outline-text-3"><ul><li><p>堆：大顶堆，小顶堆，其他的。</p></li><li><p>堆排：先建一个小顶堆，可以得到最小值，拿掉最小值，重新递归建堆，拿掉最小值。建堆复杂度是 n，排序重建堆的复杂度是 nlog(n)，总的是 nlog(n)。</p></li></ul><p>建堆复杂度的直觉是 nlog(n)（每个 max_heapfy 是 logn，需要循环 n 次。不过视频里面做了计算，叶子往上一层有 n/4 节点，每个节点需要 O(1) 交换，再往上一层有 n/8 节点，每个节点最多需要 O(2)，这样越往上节点越少，每个节点可能需要做的交换越多，整体算下来是个 cn，所以是 n。</p></div></div><div id="outline-container-headline-5" class="outline-3"><h3 id="headline-5">
Binary Search Trees, BST Sort, AVL trees, AVL Sort</h3><div id="outline-text-headline-5" class="outline-text-3"><p>
各种树，copy 自网络…</p><div id="outline-container-headline-6" class="outline-4"><h4 id="headline-6">
二叉查找树 Binary Search Trees</h4><div id="outline-text-headline-6" class="outline-text-4"><ul><li><p>左结点小于根节点，右结点大于根节点的一种排序树，也叫二叉搜索树。</p></li><li><p>比普通树查找更快，查找、插入、删除的时间复杂度为O（logN）。但是二叉查找树有一种极端的情况，就是会变成一种线性链表似的结构。此时时间复杂度就变味了O（N），为了解决这种情况，出现了二叉平衡树。</p></li></ul></div></div><div id="outline-container-headline-7" class="outline-4"><h4 id="headline-7">
平衡二叉搜索树 AVL</h4><div id="outline-text-headline-7" class="outline-text-4"><ul><li><p>AVL 树也规定了左结点小于根节点，右结点大于根节点。并且还规定了左子树和右子树的高度差不得超过1。这样保证了它不会成为线性的链表。AVL树的查找稳定，查找、插入、删除的时间复杂度都为O（logN），但是由于要维持自身的平衡，所以进行插入和删除结点操作的时候，需要对结点进行频繁的旋转。</p></li><li><p>AVL 树每一个节点只能存放一个元素，并且每个节点只有两个子节点。</p></li></ul></div></div><div id="outline-container-headline-8" class="outline-4"><h4 id="headline-8">
B树</h4><div id="outline-text-headline-8" class="outline-text-4"><p>
B树也叫平衡树，也叫作B-树，英文为Blance-Tree。是一种多路平衡树。</p><p>
一个m阶的B树规定了：
1.根结点至少有两个子女。
2.每个中间节点都包含k-1个元素和k个孩子，其中 m/2 &lt;= k &lt;= m 。
3.每一个叶子节点都包含k-1个元素，其中 m/2 &lt;= k &lt;= m。
4.所有的叶子结点都位于同一层。
5.每个节点中的元素从小到大排列，节点当中k-1个元素正好是k个孩子包含的元素的值域分划。</p><ul><li><p>B树每一层存放了更多的节点，由AVL树的“瘦高”变成了“矮胖”。可以相对减少磁盘IO的次数。MongoDB的索引就是用B树实现的。</p></li><li><p>B树也是一种自平衡的树，在进行插入和删除操作时也需要对结点进行旋转等操作。</p></li><li><p>不过，B树的查找不稳定，最好的情况就是在根节点查到了，最坏的情况就是在叶子结点查到。另外，B树在遍历方面比较麻烦，由于需要进行中序遍历，所以也会进行一定数量的磁盘IO。为了解决这些问题，出现了B+树。</p></li></ul></div></div><div id="outline-container-headline-9" class="outline-4"><h4 id="headline-9">
B+树：</h4><div id="outline-text-headline-9" class="outline-text-4"><p>
B+树每个非叶子结点存放的元素只用于索引作用，所有数据保存在叶子结点。一个m阶的B+树规定了：</p><p>
1.有k个子树的中间节点包含有k个元素（B树中是k-1个元素），每个元素不保存数据，只用来索引，所有数据都保存在叶子节点。
2.所有的叶子结点中包含了全部元素的信息，及指向含这些元素记录的指针，且叶子结点本身依关键字的大小自小而大顺序链接。
3.所有的中间节点元素都同时存在于子节点，在子节点元素中是最大（或最小）元素。</p><ul><li><p>因为非叶子结点中存放的元素不存放数据，所以每一层可以容纳更多元素，也就是磁盘中的每一页可以存放更多元素。这样在查找时，磁盘IO的次数也会减少。</p></li><li><p>另外，B+树的查找稳定，因为所有的数据都在叶子结点。每个叶子结点也通过指针指向构成了一种链表结构，所以遍历数据也会简单很多。</p></li><li><p>B+树的插入和删除和B树类似。</p></li></ul></div></div><div id="outline-container-headline-10" class="outline-4"><h4 id="headline-10">
红黑树</h4><div id="outline-text-headline-10" class="outline-text-4"><p>
红黑树也叫RB树，RB-Tree。是一种自平衡的二叉查找树，它的节点的颜色为红色和黑色。它不严格控制左、右子树高度或节点数之差小于等于1。也是一种解决二叉查找树极端情况的数据结构。</p><p>
1.节点是红色或黑色。
2.根节点是黑色。
3.每个叶子节点都是黑色的空节点（NIL节点）。
4 每个红色节点的两个子节点都是黑色。也就是说从每个叶子到根的所有路径上不能有两个连续的红色节点)。
5.从任一节点到其每个叶子的所有路径都包含相同数目的黑色节点。</p><p>
红黑树在查找方面和AVL树操作几乎相同。但是在插入和删除操作上，AVL树每次插入删除会进行大量的平衡度计算，红黑树是牺牲了严格的高度平衡的优越条件为代价，它只要求部分地达到平衡要求，结合变色，降低了对旋转的要求，从而提高了性能。红黑树能够以O(log2 n)的时间复杂度进行搜索、插入、删除操作。此外，由于它的设计，任何不平衡都会在三次旋转之内解决。</p><p>
相比于BST，因为红黑树可以能确保树的最长路径不大于两倍的最短路径的长度，所以可以看出它的查找效果是有最低保证的。在最坏的情况下也可以保证O(logN)的，这是要好于二叉查找树的。因为二叉查找树最坏情况可以让查找达到O(N)。</p><p>
红黑树的算法时间复杂度和AVL相同，但统计性能比AVL树更高，所以在插入和删除中所做的后期维护操作肯定会比红黑树要耗时好多，但是他们的查找效率都是O(logN)，所以红黑树应用还是高于AVL树的. 实际上插入 AVL 树和红黑树的速度取决于你所插入的数据.如果你的数据分布较好,则比较宜于采用 AVL树(例如随机产生系列数),但是如果你想处理比较杂乱的情况,则红黑树是比较快的。</p></div></div></div></div><div id="outline-container-headline-11" class="outline-3"><h3 id="headline-11">
Counting Sort, Radix Sort, Lower Bounds for Sorting</h3><div id="outline-text-headline-11" class="outline-text-3"><ul><li><p>对于小的正整数，把他们直接作为数组下标放到数组里面，相同的直接把 val 加一，这样直接输出所有不为空的数组元素(要考虑个数)就是排序结果了。</p></li><li><p>对于比较大的整数，可以把数做一个分解，比如简单的，按照 10 的倍数（也可以是别的倍数），先按照个位把数分到不同的数组元素里面，每个元素对应一个数组，包含了个位相同的多个数字。然后递归按照十位排序。这样实际就是对于只有个位的数，那第一轮排序结果就是最终结果了。对于两位的，那就第二轮排完就是结果了。一轮一轮下去，注意排第二轮的时候对于一位数要保持他们的顺序。</p></li></ul></div></div><div id="outline-container-headline-12" class="outline-3"><h3 id="headline-12">
Hashing with Chaining</h3><div id="outline-text-headline-12" class="outline-text-3"><p>
python 2(Python 2.7.16 (default, Nov 9 2019, 05:55:08) ) 里面一个 hash 冲突的例子。</p><div class="src src-python"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="o">>>></span><span class="nb">hash</span><span class="p">(</span><span class="s1">'</span><span class="se">\0</span><span class="s1">B'</span><span class="p">)</span><span class="mi">64</span><span class="o">>>></span><span class="nb">hash</span><span class="p">(</span><span class="s1">'</span><span class="se">\0\0</span><span class="s1">C'</span><span class="p">)</span><span class="mi">64</span></code></pre></div></div><p>
对于 key -> item ，如果 key 都是整数，那就可以使用一个数组来存放这些数据，这样查找是 O(1) 复杂度。但是这样存在两个问题。</p><ol><li><p>key 必须是正整数。</p></li><li><p>key 可能会很大，占用很多空间。</p></li></ol><p>针对这两个问题解决方法：</p><ol><li><p>对于不是正整数的 key 先 prehash 到正整数。这样有一个 map 的过程，例如可以返回对象在内存里面的地址，或者其他映射方法。</p></li><li><p>合理的减少 key 的取值空间，比如当你最多只有 20 个元素的时候没必要弄个一千万的空间出来。</p></li></ol><p>冲突的解决方法：</p><ol><li><p>使用链表：对于 key 冲突，把 item 使用链表放到这个 key 对应的位置，这个时候查找会退化成 O(k)，k 是 hash 表的负载因子。</p></li><li><p>开放地址：后面课程讲。</p></li></ol><p>hash 函数实现方法：</p><ol><li><p>除法求余：h(k) = k mod m, m 是质数，但是不要太接近 2 或者 10 的指数倍。</p></li><li><p>乘法：h(k) = [(a·k) mod 2^w] >> (w−r)，乘法和按位操作比除法速度快。</p></li><li><p>通用的方法：h(k) = [(ak+b) mod p]，p 是质数，ab 是小于p的随机数。</p></li></ol></div></div><div id="outline-container-headline-13" class="outline-3"><h3 id="headline-13">
Table Doubling, Karp-Rabin</h3><div id="outline-text-headline-13" class="outline-text-3"><p>
hash table 的大小 m，和实际存放的数据量 n，负载因子 n/m 变大或者缩小到一定程度的时候就需要考虑增加或者缩小 m。</p><ul><li><p>负载因子太大查询将不再是 O(1)</p></li><li><p>负载因子太小，会浪费很多空间</p></li></ul><p>负载因子增加到一定大小的时候，可以通过 table doubling 的方法增加 table 的大小：</p><ul><li><p>2x 增加，可以保证 amortized cost 是 O(n) 的，虽然有部分操作是线性的，但是类似平均操作复杂度是 O(1)</p></li><li><p>一般运行时会有大量操作，这样会比较关心总的操作时间，而不纠结某一个</p></li><li><p>也可以使用类似 redis 的实现方法，不要一次迁移到新表，每次读写的时候操作几个 key，直到全部的 key 都迁移完毕。这样可以把那些耗时的 rehash 操作分布到很多操作里面。</p></li></ul><p>负载因子小到一定程度的时候，可以缩小 table 的大小：</p><ul><li><p>m &lt; n/4 当表内数据量小于 1/4 的时候，把表缩成 m/2 大小。</p></li></ul><p>子字符串查找，从 t 里面找到是否包含 s</p><ul><li><p>使用双重循环，每次滑动从 t 里面取 s 长度的字串和 s 的每一个字符比较，看是否 match。复杂度是 O(|s|*(|t| - |s|)) = O(|s|*|t|) 如果 s 比较长，这个算法就比较慢了。</p></li><li><p>Karp-Rabin 算法是通过比较 hash 值来看是否匹配。这样只要 hash 方法的复杂度小于 O(|s|) 就比上面的方法复杂度降低了。</p></li><li><p>计算 hash 值的时候，可以通过映射字符到数字，然后改为整数计算和比较，这样是 O(1) 复杂度，和字串长度无关了。主要思路是每次计算只需要考虑原来头部和新增尾部的字符就可以了，中间部分不用重复循环计算。</p></li></ul><div id="outline-container-headline-14" class="outline-4"><h4 id="headline-14">
Redis dict 的实现方法</h4><div id="outline-text-headline-14" class="outline-text-4"><p>
dict 数据结构包含两个 table ht[2]，和一个 rehashidx。通常情况下，ht2 对应的 table 是空的。只有 ht1 有数据。此时 rehashidx 的值是 -1。当负载因子超过阈值之后，会进行 rehash。先预申请 ht2 的空间，然后递增 rehashidx 为当前 rehash 进度的 key，对于小于等于这个 idx 的 key，插入和查找都去新的 ht2 操作。直到 rehash 完毕，会把 ht2 改为 ht1，同时放一个空的 ht2。</p></div></div><div id="outline-container-headline-15" class="outline-4"><h4 id="headline-15">
Redis skiplist 的实现方法</h4><div id="outline-text-headline-15" class="outline-text-4"><ul><li><p>redis 里面的有序集合应该就是使用 skiplist 和 dict 结合实现的。</p></li><li><p>skiplist 节点是有序的。</p></li><li><p>每个节点可以有不同的层高，一般来说，层的数量多访问其他节点的速度就快。每个节点可以有一个或者多个前进指针，有一个后退指针。查找的时候可以先从高层查找，逐渐降低层数，这样比普通链表更快。</p></li><li><p>插入新的节点的时候，层数是随机产生的，不会改变原来节点的层数。</p></li></ul></div></div></div></div><div id="outline-container-headline-16" class="outline-3"><h3 id="headline-16">
Open Addressing, Cryptographic Hashing</h3><div id="outline-text-headline-16" class="outline-text-3"><p>
Open Addressing 开放地址法主要思路是</p><ul><li><p>不使用链表</p></li><li><p>遇到插入的时候遇到冲突，那么用一个新的 hash 函数再次 hash 看存那里，这样循环直到找到一个合适的位置。</p></li><li><p>具体的探测可用地址的方法有简单的顺序线性探测，平方探测，伪随机探测等等，或者 double hashing。</p></li><li><p>删除的时候，把被删除的位置放一个 delete 标记，而不是 None，否则查找的时候会出错。插入的时候对 delete 标记和 None 做相同处理即可，可以复用空间。</p></li><li><p>线性探测会导致 clustering，导致存放数据不均衡。平方探测可能会导致不能探测到全部的空间。</p></li><li><p>要保持负载因子不要太大，否则探测次数会变大。</p></li></ul></div></div><div id="outline-container-headline-17" class="outline-3"><h3 id="headline-17">
Integer Arithmetic, Karatsuba Multiplication &amp; Square Roots, Newton's Method</h3><div id="outline-text-headline-17" class="outline-text-3"><p>
大数的算术运算</p></div></div><div id="outline-container-headline-18" class="outline-3"><h3 id="headline-18">
Breadth-First Search (BFS) &amp; Depth-First Search (DFS), Topological Sort</h3><div id="outline-text-headline-18" class="outline-text-3"><p>
广度优先搜索(BFS) 和深度优先搜索(DFS)。</p><ul><li><p>BFS 遍历是一层一层依次往下遍历。</p></li><li><p>DFS 遍历是优先往一个节点深度遍历，遇到结束返回上层继续遍历子节点。</p></li></ul><p>图的表示：</p><ol><li><p>使用数组的方法，adj[v] = [] 每个节点 v 可到达的邻居节点数组/链表。</p></li><li><p>使用对象，v.neighbors = adj[v]</p></li><li><p>使用函数，adj(v), v.neighbors() 都是函数，这样节省空间</p></li></ol><p>
BFS 遍历实现思路：</p><div class="src src-python"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">BFS</span><span class="p">(</span><span class="n">V</span><span class="p">,</span><span class="n">Adj</span><span class="p">,</span><span class="n">s</span><span class="p">):</span><span class="n">level</span><span class="o">=</span><span class="p">{</span><span class="n">s</span><span class="p">:</span><span class="mi">0</span><span class="p">}</span><span class="n">parent</span><span class="o">=</span><span class="p">{</span><span class="n">s</span><span class="p">:</span><span class="kc">None</span><span class="p">}</span><span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="n">frontier</span><span class="o">=</span><span class="p">[</span><span class="n">s</span><span class="p">]</span><span class="c1"># previous level,i−1</span><span class="k">while</span><span class="n">frontier</span><span class="p">:</span><span class="nb">next</span><span class="o">=</span><span class="p">[]</span><span class="c1"># next level,i</span><span class="k">for</span><span class="n">u</span><span class="ow">in</span><span class="n">frontier</span><span class="p">:</span><span class="k">for</span><span class="n">v</span><span class="ow">in</span><span class="n">Adj</span><span class="p">[</span><span class="n">u</span><span class="p">]:</span><span class="k">if</span><span class="n">v</span><span class="ow">not</span><span class="ow">in</span><span class="n">level</span><span class="p">:</span><span class="c1"># not yet seen</span><span class="n">level</span><span class="p">[</span><span class="n">v</span><span class="p">]</span><span class="o">=</span><span class="n">i</span><span class="c1">#===level[u] + 1</span><span class="n">parent</span><span class="p">[</span><span class="n">v</span><span class="p">]</span><span class="o">=</span><span class="n">u</span><span class="nb">next</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">v</span><span class="p">)</span><span class="n">frontier</span><span class="o">=</span><span class="nb">next</span><span class="n">i</span><span class="o">+=</span><span class="mi">1</span></code></pre></div></div><p>
也可以使用队列实现:</p><ul><li><p>将根节点放入队列</p></li><li><p>从队列里面取一个，将他的子节点放到队列里面</p></li><li><p>重复上面步骤，直到队列为空</p></li></ul><p>BFS 算法可以找到两个节点之间的最短路径，就是反向从目标节点根据 parent 找回根节点。</p><ul><li><p>将根节点入栈</p></li><li><p>查看栈顶，将他的一个未处理过子节点入栈</p></li><li><p>重复上面步骤，直到没有子节点</p></li><li><p>出栈顶部节点，重复上面步骤处理其他未处理子节点</p></li></ul><p>拓扑排序可以解决任务依赖问题，有向无环图(DAG, Directed Acyclic Graph)。通过 DFS 遍历的反向输出可以排序，在完成一个节点的遍历之后，这个节点就是第一个需要完成的。</p></div></div><div id="outline-container-headline-19" class="outline-3"><h3 id="headline-19">
Single-source shortest paths problem &amp; Dijkstra &amp; Bellman-Ford &amp; Speeding up Dijkstra</h3><div id="outline-text-headline-19" class="outline-text-3"><p>
字面翻译是单源最短路径问题，都是些寻路问题。</p></div></div><div id="outline-container-headline-20" class="outline-3"><h3 id="headline-20">
Dynamic programming I: Fibonacci, shortest paths &amp; Dynamic Programming II: Text Justification, Blackjack</h3><div id="outline-text-headline-20" class="outline-text-3"><p>
动态规划 DP =~ 总结就是把大问题切分成小问题，通过递归遍历再加对递归的结果记忆来解决问题的思路。</p><p>
比如斐波那契数列计算，<code>fib(n) = fib(n-1) + fib(n-2)</code> 如果单纯的递归，那复杂度大于 O(2^n/2)。但是实际是有部分重复计算的，记忆上次的计算结果，每个数字只需要计算一次就可以，这样复杂度可以降到 O(n)。</p><p>
5 Easy Steps to Dynamic Programming</p><ol><li><p>define subproblemscount # subproblems</p></li><li><p>guess (part of solution)count # choices</p></li><li><p>relate subproblem solutions compute time/subproblem</p></li><li><p>recurse + memoizetime = time/subproblem · #sub-problems OR build DP table bottom-upcheck subproblems acyclic/topological order</p></li><li><p>solve original problem: = a subproblemOR by combining subproblem solutions=⇒extra tim</p></li></ol></div></div></content></item><item><title>Comfort Zone</title><link>https://wdicc.com/comfort-zone/</link><pubDate>Sat, 18 Jan 2020 10:36:20 +0800</pubDate><guid>https://wdicc.com/comfort-zone/</guid><description>舒适区 舒适区这个概念不同人其实有不同的定义，比如有些人可能是工作中学习一些自己没学过的知识，就需要打</description><content type="text/html" mode="escaped"><div id="outline-container-headline-1" class="outline-3"><h3 id="headline-1">
舒适区</h3><div id="outline-text-headline-1" class="outline-text-3"><p>
舒适区这个概念不同人其实有不同的定义，比如有些人可能是工作中学习一些自己没学过的知识，就需要打破他的舒适区，因为总觉得自己去学那些东西费力不说可能还需要去做自己以前不熟悉的事情。有些人换工作会打破他的舒适区，因为很多的未知，比如可能需要重新租房什么的会觉得好麻烦。</p><p>
想要走出舒适区肯定会有那么一点痛苦，舒适区里面的呆着也不是没问题，毕竟不是每个人都会有危机感觉得需要不断突破自己。但是需要担心的是，现在这个高速发展的社会里，不进则退，如果你一直原地踏步，慢慢就可能被周围人甩掉。那些吃低保的人，10 年前可能活的也挺好的。</p></div></div><div id="outline-container-headline-2" class="outline-3"><h3 id="headline-2">
职业生涯规划</h3><div id="outline-text-headline-2" class="outline-text-3"><p>
想走出舒适区肯定有很多选择，但是到底选哪个方向呢？方向选不好可能反而花了时间没得到结果，也会很郁闷。首先讲，任何方向都比没有方向好，动起来就好。总比打游戏好，对不。</p><p>
然后，想要选对方向实际上是需要先做职业规划。自己喜欢什么方向，市场喜欢什么方向，还有就是什么方向可以增加自己的竞争力。</p><p>
先想想自己对社会的价值在哪里，比如搞技术的，可以通过技术建一个系统提升其他人的工作效率。那如何能把这个事情做的更好，可能是这样的，只会做后端 python 开发的，需要去学学数据库，去学学前端 html，javascript 等，这些都弄明白之后，你就可以一个人（或者带一个团队）就把这个事情做好了。那你的职业规划就可以是往类似于技术合伙人，架构师之类的岗位努力。</p><p>
如果是个运维人员，对社会的价值可能是如何能减少系统运行故障。那可能会需要知道自动化运维（毕竟手动的容易产生不确定性），备份恢复，负载均衡，现在还有容器隔离，虚拟化等等这些技术。搞明白之后呢，就可以为了实现 9999 的高可用指标努力了。</p><p>
还有人虽然也是技术人员，但是做着做着发现经常协调团队成员或者和其他团队成员的协作很有特长，那可能会慢慢对管理比较感兴趣，对社会的价值可能就是协调管理好几十号人，同时技术方面也有自己的理解，这样就可以去做技术团队的管理，制定技术方向，规划团队的发展。</p><p>
还有的技术人员，只对某些知识感兴趣，比如数据库，喜欢研究各种各样的数据库。慢慢会成为一个数据库专家，研究各种数据库的运行模式问题解决等等。</p><p>
不同人有不同的兴趣爱好，可能有不同的方向。不同的方向有各自的特点，可以解决特定的问题，做职业规划的时候，可以多想想竞争力在哪里。技术越精湛，能力越强，回头会发现就业市场反而会变小，因为毕竟一个只有 200M 数据库的公司不需要招聘一个研究了 10 年数据库的人吧？应该这么说，他们不会给那么多钱招聘一个那样的专家，你愿意降薪自然也是可以的。。</p></div></div><div id="outline-container-headline-3" class="outline-3"><h3 id="headline-3">
合理的评估自己的价值</h3><div id="outline-text-headline-3" class="outline-text-3"><p>
并不是每个人都可以随着年龄增长自己能力也会稳定增长，这个其实类似一个指数曲线，一般都会遇到瓶颈，越到后面越难突破。所以发现工作十年的代码抽象能力不如一个工作3年的年轻人的时候也不必惊讶，这个就是正常的现象。认识到自己的能力的意义在于，不要盲目的去和别人对比，看到别人工资比你高就眼红。对比一定是个多维度的事情。</p><p>
有些人觉得现在的老板就是个傻逼，懂的好像还没有自己多，一些决定做的也不怎么样，凭啥给他打工？这个当然了，你可以不给他打工，去做自己的事业，自己做老板去折磨其他人。但是如果你没有能力去做，那是不是有个老板愿意要你也应该挺开心的？</p><p>
一个人在人才市场上面，找工作的时候其实和市场里面卖商品的没什么区别。相同的商品不同的店铺可能价格不一样，不同的商品又各有千秋，看用户的目的是什么。没钱的用户会追求性价比，有钱的用户会买奢侈品，不需要啥性价比。那你也需要知道自己的价值，怎么知道呢？如果一直在一个公司呆着，会和周围人比较，但是一个公司内部通常薪资不透明，你也不知道那个看着不如你的人工资是不是比你高。而且还有可能这个公司一直打压工资呢。</p><p>
一个商品想要卖出合适的价格，无非就是多比较买家，多去面试，多调整自己的认知，只有交易发生的时候价值才能真的体现。</p><p>
有些人害怕公司有监控，更新了简历公司就会知道。如果你害怕这个事情发生，那正是说明你自己也对自己没有信心，害怕失去现在的工作。而作为一个公司，即使知道你有可能会想走，那他们会怎么做？一种情况是，早就看你不顺眼了，你想走，那就等你走或者挤兑你走，那这样不管你更新不更新迟早都会让你走的。二种情况是，觉得你是个人才，不想你走，那看到这个情况可能会悄摸给你涨工资也说不好。不管哪种情况你是不是都没啥吃亏的？</p><p>
关于自己能力的认知再多说几句，码农喜欢开玩笑说自己是个搬砖的，对搬砖的满是鄙视，觉得赚钱少。其实他们自己何尝不知道这个事情很累还不赚钱呢？主要是他们没有其他赚钱能力。你想想你自己，除了给别人打工写代码，还有其他赚钱能力么？那说起来和搬砖的有什么区别呢？工种不一样起点不一样而已。之前看《软技能》这本书作者给自己设定的目标就是即使不工作，被动收入也可以养活自己。他的被动收入包括股票，卖自己的书，房子出租这些。你看，这个作者就知道培养自己多方面的能力，而不至于将来只能靠打工赚钱。</p></div></div></content></item><item><title>Django Channels2</title><link>https://wdicc.com/django-channels2/</link><pubDate>Sat, 28 Dec 2019 14:11:19 +0800</pubDate><guid>https://wdicc.com/django-channels2/</guid><description>Django 3.0.1 has released for sometime. We still use Django 1.11 in one of our project, with Channels 1.1.8, I think it&amp;#39;s the time to upgrade to newest Django and Channels.
According this upgrade guide, Channels 2 is a fully rewritten, lots of things has changed. This post is just a record about the upgrade I&amp;#39;ve done.</description><content type="text/html" mode="escaped"><p>Django 3.0.1 has released for sometime. We still use Django 1.11 in one of our project, with Channels 1.1.8, I think it's the time to upgrade to newest Django and Channels.</p><p>
According this<a href="https://channels.readthedocs.io/en/latest/one-to-two.html#how-to-upgrade">upgrade guide</a>, Channels 2 is a fully rewritten, lots of things has changed. This post is just a record about the upgrade I've done.</p><div id="outline-container-headline-1" class="outline-3"><h3 id="headline-1">
Routing</h3><div id="outline-text-headline-1" class="outline-text-3"><p>
In Channels 2 you need to add an<code class="verbatim">ASGI_APPLICATION</code> in the settings file, point to the asgi application.</p><div class="src src-python"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">ASGI_APPLICATION</span><span class="o">=</span><span class="s2">"proj.routing.application"</span></code></pre></div></div><p>
And add<code>routing.py</code> file, add an<code>application</code> variable in the file like the bellow.</p><div class="src src-python"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">application</span><span class="o">=</span><span class="n">ProtocolTypeRouter</span><span class="p">({</span><span class="s2">"websocket"</span><span class="p">:</span><span class="n">URLRouter</span><span class="p">([</span><span class="n">url</span><span class="p">(</span><span class="sa">r</span><span class="s2">"^ws$"</span><span class="p">,</span><span class="n">MyConsumer</span><span class="p">)])</span><span class="p">})</span></code></pre></div></div><p>
The<code>websocket</code> key means it will handle websocket requests, the<code>URLRouter</code> just work as Django's.<code>MyConsumer</code> is the handler for the request.</p></div></div><div id="outline-container-headline-2" class="outline-3"><h3 id="headline-2">
Consumer</h3><div id="outline-text-headline-2" class="outline-text-3"><p>
Add<code>MyConsumer</code> class.</p><div class="src src-python"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span><span class="nc">MyConsumer</span><span class="p">(</span><span class="n">WebsocketConsumer</span><span class="p">):</span><span class="n">groups</span><span class="o">=</span><span class="p">[</span><span class="s2">"broadcast"</span><span class="p">]</span><span class="k">def</span><span class="nf">connect</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span><span class="bp">self</span><span class="o">.</span><span class="n">accept</span><span class="p">()</span><span class="nb">print</span><span class="p">(</span><span class="s2">"connected"</span><span class="p">)</span><span class="k">def</span><span class="nf">receive</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">text_data</span><span class="o">=</span><span class="kc">None</span><span class="p">,</span><span class="n">bytes_data</span><span class="o">=</span><span class="kc">None</span><span class="p">):</span><span class="nb">print</span><span class="p">(</span><span class="s2">"recv: "</span><span class="p">,</span><span class="n">text_data</span><span class="p">)</span><span class="k">def</span><span class="nf">disconnect</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">close_code</span><span class="o">=</span><span class="kc">None</span><span class="p">):</span><span class="nb">print</span><span class="p">(</span><span class="s2">"disconnect"</span><span class="p">)</span></code></pre></div></div><p>
When a client connected, it will call<code>connect</code> at first, you can do authentication(If you have your own auth method other than use Django's, otherwise you can use<a href="https://channels.readthedocs.io/en/latest/topics/authentication.html">AuthMiddlewarestack</a> instead), some preparing, if you didn't want to accept the connect, you can use<code>self.disconnect()</code> to end the connection, it will also call<code>disconnect</code>, where you can do some cleaning. The function<code>receive</code> will be called when the client send messages to you.</p><p>
Simple, huh? There are many other types of consumers, you can check<a href="https://channels.readthedocs.io/en/latest/topics/consumers.html#">here</a>.</p></div></div><div id="outline-container-headline-3" class="outline-3"><h3 id="headline-3">
Passing through data in session</h3><div id="outline-text-headline-3" class="outline-text-3"><p>
When a client connected, you may need to check the database and put some useful data in the session, so that you can use these data later. You have to use django session to do this in Channels 1, but in Channels 2 you didn't need to use django session, just store the data to<code>self</code>.</p><div class="src src-python"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="bp">self</span><span class="o">.</span><span class="n">my_data</span><span class="o">=</span><span class="p">{</span><span class="s1">'user'</span><span class="p">:</span><span class="o">....</span><span class="p">,</span><span class="s1">'role'</span><span class="p">:</span><span class="o">...</span><span class="p">}</span></code></pre></div></div><p>
Of cause, you still can use django sessions to store data, check the doc<a href="https://channels.readthedocs.io/en/latest/topics/sessions.html">here</a>, just add the<code>SessionMiddlewareStack</code> in the routing file.</p><p>
Use<code>self.scope["session"]["seed"] = '123'</code> to set the session, and don't forget to use<code>self.scope["session"].save()</code> to save the session if you want to persist.</p></div></div><div id="outline-container-headline-4" class="outline-3"><h3 id="headline-4">
Broadcast messages</h3><div id="outline-text-headline-4" class="outline-text-3"><p>
You can use<code>self.send(text_data="")</code> to send a message to a client. But if you need to send to multiple client at a same time, you need to use<a href="https://channels.readthedocs.io/en/latest/topics/channel_layers.html">Channel Layers</a>.</p><p>
There are many backends you can use, I recommend you use<code>channels_redis</code>.</p><div class="src src-python"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">CHANNEL_LAYERS</span><span class="o">=</span><span class="p">{</span><span class="s2">"default"</span><span class="p">:</span><span class="p">{</span><span class="s2">"BACKEND"</span><span class="p">:</span><span class="s2">"channels_redis.core.RedisChannelLayer"</span><span class="p">,</span><span class="s2">"CONFIG"</span><span class="p">:</span><span class="p">{</span><span class="s2">"hosts"</span><span class="p">:</span><span class="p">[(</span><span class="s2">"redis-server-name"</span><span class="p">,</span><span class="mi">6379</span><span class="p">)],</span><span class="p">},</span><span class="p">},</span><span class="p">}</span></code></pre></div></div><p>
Then you need to create groups when user connect in<code>MyConsume</code>.</p><div class="src src-python"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span><span class="nc">MyConsumer</span><span class="p">(</span><span class="n">WebsocketConsumer</span><span class="p">):</span><span class="n">groups</span><span class="o">=</span><span class="p">[</span><span class="s2">"broadcast"</span><span class="p">]</span><span class="k">def</span><span class="nf">connect</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span><span class="bp">self</span><span class="o">.</span><span class="n">accept</span><span class="p">()</span><span class="nb">print</span><span class="p">(</span><span class="s2">"connected"</span><span class="p">)</span><span class="n">async_to_sync</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">channel_layer</span><span class="o">.</span><span class="n">group_add</span><span class="p">)(</span><span class="s2">"some_room"</span><span class="p">,</span><span class="bp">self</span><span class="o">.</span><span class="n">channel_name</span><span class="p">)</span><span class="k">def</span><span class="nf">receive</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">text_data</span><span class="o">=</span><span class="kc">None</span><span class="p">,</span><span class="n">bytes_data</span><span class="o">=</span><span class="kc">None</span><span class="p">):</span><span class="nb">print</span><span class="p">(</span><span class="s2">"recv: "</span><span class="p">,</span><span class="n">text_data</span><span class="p">)</span><span class="k">def</span><span class="nf">disconnect</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">close_code</span><span class="o">=</span><span class="kc">None</span><span class="p">):</span><span class="nb">print</span><span class="p">(</span><span class="s2">"disconnect"</span><span class="p">)</span><span class="n">async_to_sync</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">channel_layer</span><span class="o">.</span><span class="n">group_discard</span><span class="p">)(</span><span class="s2">"some_room"</span><span class="p">,</span><span class="bp">self</span><span class="o">.</span><span class="n">channel_name</span><span class="p">)</span><span class="k">def</span><span class="nf">group_notify</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">msg</span><span class="p">):</span><span class="bp">self</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">text_data</span><span class="o">=</span><span class="n">msg</span><span class="p">[</span><span class="s2">"text"</span><span class="p">])</span></code></pre></div></div><p>
The string<code>some_room</code> is the group id you want the user to join, think about it"s just like a chat room, everyone who join this room is a group. Or you can use the<code>user_id</code> as the group id like us, so you can send same messages to the same user at once even they have many sessions through many clients.</p><p>
Use<code>self.channel_layer.group_discard</code> to quite a group and use<code>self.channel_layer.group_send</code> to send a message to a group. If you need to send to the group outside the comsumer, just use the codes below to get the<code>channel_layer</code>.</p><div class="src src-python"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span><span class="nn">channels.layers</span><span class="kn">import</span><span class="n">get_channel_layer</span><span class="n">channel_layer</span><span class="o">=</span><span class="n">get_channel_layer</span><span class="p">()</span><span class="n">async_to_sync</span><span class="p">(</span><span class="n">channel_layer</span><span class="o">.</span><span class="n">group_send</span><span class="p">)(</span><span class="s2">"some_room"</span><span class="p">,</span><span class="p">{</span><span class="s2">"type"</span><span class="p">:</span><span class="s2">"group.notify"</span><span class="p">,</span><span class="s2">"text"</span><span class="p">:</span><span class="nb">str</span><span class="p">(</span><span class="n">notify</span><span class="p">)</span><span class="p">},</span><span class="p">)</span></code></pre></div></div><p>
Please beware that the message type here is<code>group.notify</code>, it can be anything you want, just add a handler for it in the comsumer, like the function<code>group_notify</code> I added above(replace the "." to "_").</p></div></div><div id="outline-container-headline-5" class="outline-3"><h3 id="headline-5">
Deploy and run</h3><div id="outline-text-headline-5" class="outline-text-3"><p>
After add the<code>ASGI_APPLICATION</code>, you can run the server use command<code>./manage.py runserver</code>, the server will handle both http and websocket requests.</p><p>
You can also use<code>daphne</code> to run the server, just need to add an<code>asgi.py</code> like the bellow.</p><div class="src src-python"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span><span class="nn">os</span><span class="kn">import</span><span class="nn">django</span><span class="kn">from</span><span class="nn">channels.routing</span><span class="kn">import</span><span class="n">get_default_application</span><span class="n">os</span><span class="o">.</span><span class="n">environ</span><span class="o">.</span><span class="n">setdefault</span><span class="p">(</span><span class="s2">"DJANGO_SETTINGS_MODULE"</span><span class="p">,</span><span class="s2">"proj.settings"</span><span class="p">)</span><span class="n">django</span><span class="o">.</span><span class="n">setup</span><span class="p">()</span><span class="n">application</span><span class="o">=</span><span class="n">get_default_application</span><span class="p">()</span></code></pre></div></div><p>
Then run with command<code>daphne -p 8001 proj.asgi:application</code>, it also can handle both http and websocket request.</p><p>
If you prefer to handle http requests use WSGI method like before, just run<code>proj.asgi:application</code> use wsgi server like<code>gunicorn</code>.</p></div></div></content></item><item><title>Year in Review 2019</title><link>https://wdicc.com/year-in-review-2019/</link><pubDate>Wed, 18 Dec 2019 16:48:58 +0800</pubDate><guid>https://wdicc.com/year-in-review-2019/</guid><description>Here it comes, the end-of-year 2019. The next year will be 2020, it’s more easy to pronounce for foreigners :) Works Finally, I realized that I lack of experience and knowledge to continue run our startup company. When you are the founder of a company yourself, you</description><content type="text/html" mode="escaped"><p>Here it comes, the end-of-year 2019. The next year will be 2020, it’s more easy to pronounce for foreigners :)</p><div id="outline-container-headline-1" class="outline-3"><h3 id="headline-1">
Works</h3><div id="outline-text-headline-1" class="outline-text-3"><p>Finally, I realized that I lack of experience and knowledge to continue run our startup company. When you are the founder of a company yourself, you can’t blame others doing things not well, especially when you didn’t know how to doing it well either. I have to accept the fact that I am not having all the skills that a company needed.</p><p>
Our APPs and website are entered its stable state last year, and the new goal is that we have to gain more customers, either the skydiving product on Qunar.com, and our APPs.</p><p>
In fact, we found skydiving is really a minority activities, and it’s easily affected by the weather, wind speed, temperature, and the air traffic control. If someone wants skydiving, he had to make a reservation 2 or 3 days in advance, and also need to leave all day preserved for the skydiving, because the skydiving base usually far from city, he had to take a taxi or bus to arrive the base. He had to wait the air traffic control center to allow the plane to take off, also need to wait the weather, wind are suitable for skydiving. Although it’s only 10 minutes in the sky, sometimes he has to wait for four hours, and there is also a big chance that the base had to cancel the skydiving.</p><p>
I didn’t know how to attract more customers for skydiving, and we trapped here.</p><p>
Our customers for general aviation hit a record last year, but we are losing them now, because we didn’t find the way to satisfy them all. Our products didn’t solve the root issue they have. We also didn’t find the way to introduce our APPs to drone pilots, which we thought they were the growth point for us.</p><p>
Running a company is not just need what you already known, it’s need you to learn much more, because if you didn’t do it or didn’t know how to do it, then no one else will be. You maybe say no one could do all the things, recruit some experts to do it. Yes, you are right, but as a small company, to recruit an expert also need some special abilities. I’m a software engineer before, recruit some expert in a different field is a challenge to me.</p><p>
I’m finding a job now and trying to find a job work in different countries. I lose an opportunity to work at a global company, due to the poor English spoken language.</p></div></div><div id="outline-container-headline-2" class="outline-3"><h3 id="headline-2">
Readings</h3><div id="outline-text-headline-2" class="outline-text-3"><p>
I have lots of time to read this year. I started reading some English books, hope it’s useful for my English study.</p><ol><li><p>伟大的博弈:华尔街金融帝国的崛起(1653～2011)(珍藏版) (约翰·S·戈登).</p></li><li><p>1Q84 (村上春树).</p></li><li><p>﻿1984 ({英} 乔治·奥威尔), Here are the<a href="/readings/">reviews</a> about the above three books.</p></li><li><p>Effective Python：编写高质量 Python 代码的 59 个方法, the review is<a href="/book-review-of-effective-python/">here</a>.</p></li><li><p>软技能, the review is<a href="/book-review-of-soft-skills/">here</a>.</p></li><li><p>编写高质量代码 改善Python程序的91个建议.</p></li><li><p>Untouchable Love, downloaded from<a href="https://www.obooko.com/free-books-for-teens/untouchable-love">here</a>, it's free.</p></li><li><p>JoJo的奇妙冒险 1-6,<a href="https://zh.wikipedia.org/wiki/JoJo%25E7%259A%2584%25E5%25A5%2587%25E5%25A6%2599%25E5%2586%2592%25E9%2599%25A9">here</a> is the link from Wikipedia.</p></li></ol></div></div><div id="outline-container-headline-3" class="outline-3"><h3 id="headline-3">
English study</h3><div id="outline-text-headline-3" class="outline-text-3"><p>I started to remember English words by using<a href="/use-anki-to-leaning-english/">Anki</a>. It’s really a helpful tool for English study. I have reviewed half of the words of IELTS tests, it’s still a long way to go.</p><p>
Since 2017, I started watch English movies with English subtitles, I think my English listening skill has improved a lot. I’m trying to improve my spoken English now, I think I should do more English writing practices, it’s will help me think in English instead of think in Chinese and then translate to English.</p></div></div><div id="outline-container-headline-4" class="outline-3"><h3 id="headline-4">
Traveling</h3><div id="outline-text-headline-4" class="outline-text-3"><p>My wife and I had traveled to many cities this year, especially we had rent a car in US and driven from Chicago to San Francisco, it’s 3800 mils far, really a long trip.</p><ol><li><p>Inner Mongolia at Feb.</p></li><li><p>Seoul at Mar.</p></li><li><p>Japan at Apr. I buy an iPad Pro and an apple watch series 4.</p></li><li><p>Maldives at Jun.</p></li><li><p>Hong Kong at Jun.</p></li><li><p>US. at Sep. to Oct. Details are<a href="/drive-in-the-us/">here</a>.</p></li></ol></div></div></content></item><item><title>Should I Join a Startup Company</title><link>https://wdicc.com/should-i-join-a-startup-company/</link><pubDate>Thu, 12 Dec 2019 15:19:51 +0800</pubDate><guid>https://wdicc.com/should-i-join-a-startup-company/</guid><description>前几天看到一个这个程序员为了期权加入创业公司，值得吗？，高票的回答写的挺有意思的，有兴趣可以看看。 大</description><content type="text/html" mode="escaped"><p>前几天看到一个这个<a href="https://www.zhihu.com/question/28023819">程序员为了期权加入创业公司，值得吗？</a>，高票的回答写的挺有意思的，有兴趣可以看看。</p><p>
大家都想前几年上市潮带来的程序员暴富神话发生在自己身上，所以会去初创，拿着原始股，想一想上市之后 10 - 100 倍回馈，这到时候得多有钱啊，睡觉都流口水。</p><p>
正常来说，开一家公司是想要靠做业务赚钱的，比如卖马桶的卖一个赚 50 块钱，那一年想办法卖他 10 万个，年底算一算，500 万到手。比如卖煎饼的，卖一个煎饼赚 1 块钱，那一年想办法卖他 500 万个，年底算一算，500 万到手。</p><p>
但是前几年上市潮告诉我们，还有一种发财的方法，就是上市。开一家公司，不管做什么吧，把 20% 的股票拿出来，找到人愿意出 100 万买，那么岂不就是等于每 1% 的股票价值就是 (100/20%)*1% = 5 万了？那么 5% 的股票就相当于值 25万。如果继续发展，继续抬升股价，那么可能以后这 1% 就值 100 万了，那算算，5% 就等于是 500 万啦。当然这些还需要等着上市，上市之后你的价值 500 万的股票一卖，有普通股民接盘，你也一样是赚了 500 万。</p><p>
你看前面传统靠业务的企业赚钱，最后钱是谁的？当然是老板的，不过老板一开心，可能拿 100 万出来鼓励一下员工，那就大家都拿个奖金，这下大家都开心啦。</p><p>
那么通过上市的方法呢，股票相对来说就多了，一般老板可能会占大部分，但是小兵手里也会给点，如果你得到了那 1%，那恭喜你，500 万到手。</p><p>
这么看，好像去个公司拿股票更好啊，回头发财的时候，不必指望老板心情，只要手里有股票就可以。</p><p>
实际呢？要想拿到那 500 万，可能需要经历下面的步骤：</p><ol><li><p>老板愿意给你 1% 的股票。这么大比例股份的，一般需要多少是个核心人员啦，我记得哪看过，可能核心高管给个 5% 就不错了。注意这里说的是比例哦，一个公司可能会把公司设计成总共 1 万股，也可能设计成 100 万股，那同样拿 1000 股，差别可就大了去了。</p></li><li><p>那接下来需要有一个对的方向，找到愿意买那 20% 的人，好提升你手里股票的价值呀。一般投资机构为啥要买你们股票呢，他们想法和你的想法一样，都是希望最后上市的时候好大赚一笔，你看他的可是 20%，比你的 1% 多了 20 倍。但是根据什么判断呢，这就需要公司有一个增长点，一般都是用户量持续增加什么的，这个下面具体说。</p></li><li><p>一般上面那个叫 A 轮，离上市还早。需要继续保持增长速度，吸引新的投资人来投资，这个时候再卖股票可就不是 A 轮那个价格啦，会涨价。因为公司发展势头好啊，这次投资的人看好将来上市还是有的赚的，所以可以接受涨价。</p></li><li><p>这个时候可能会有一个选择，就是把你们手里的原始股票拆分一下，比如一拆二，然后再卖 10% 出去（相当于原来的 20%），这 10% 可以是增发，也可以是从你们自己手里回购，这样就有了兑现的机会。当然，这个需要人家新的投资人愿意，要不这不等于投资人花钱给大家发奖金么？</p></li><li><p>这样如果你们公司发展一直不错，多轮融资之后，基本就成了某个方向的独角兽啦（这么多钱花出去了，如果市场占有率上不来，那没人继续买单啊，所以最后必须要是某个领域最厉害的），这个时候就可以上市了。</p></li><li><p>上市之后，手里股票一般有禁售期，可能是一年，过了之后如果公司发展还不错，股票没跌，那你就可以兑现你的 500 万了。</p></li></ol><p>那么说说什么是增长点。实际上你回过头来看看，一个要上市的企业，和一个卖煎饼的，没什么区别。都是需要把自己业务搞到够大，然后赚钱。区别在于，卖煎饼的一开始就清楚自己可以赚多钱。而搞上市的，可以先不赚钱只花钱来圈场地，相当于是先把猪都圈到自己地里慢慢宰。因为投资人也不傻，如果市场里面你已经是最大了，那要么你去占别的市场，要不就是要看盈利情况啊，赚钱了股东每年分红才是正事。最后接盘的普通股民也不傻，看好不好看你的股票，最后总是需要有一个看的点，哪怕现在你能把牛逼吹到天上，但是后面连 1% 都实现不了，那未来估值也是个白瞎。那么多公司后面股价低迷不振就是这个原因。当然了，如果在大家都意识到这个问题的时候，你已经套现离场，那你就是赢家了。</p><p>
基于上面的点，需要满足几个条件你才可以拿到你的 500 万。</p><ol><li><p>你手里的股票够多。一来是初始的时候多，二来还需要老板不坑你，没有不停的增发稀释你手里股票。否则你干个10年最后股票价值 100 万，那平均下来还不如别人年终奖呢。</p></li><li><p>公司的业务持续壮大，一般牛逼公司动不动就是 300% 的增长，每年 4 倍，三年就 64 倍了。就按 100% 增长算，每年 2 倍三年是 8 倍。琢磨下你业务方向，可能的市场规模，和合伙人有没有这么牛逼。</p></li><li><p>公司还需要有盈利的点，如果一直只看到花钱看不到入账，那没人敢继续投资。没人投资还怎么做大。</p></li><li><p>你没有离职。如果从初创就加入，这个过程可能至少需要 10 年，当然也有牛逼的可能 5 年上市。</p></li><li><p>公司如果厚道，离职有时候也可以允许行权保留手里的股票。但是这个还得基于你愿意买，因为如果将来公司不能上市，买的就是废纸。</p></li><li><p>遇到问题，老板首先考虑需要保障的是投资人和自己的利益，其他人的，碰运气吧，毕竟得罪了投资人后面不好继续要钱了，而得罪了你的话，应该还是很轻松可以再忽悠一个的。</p></li></ol><p>附一个从水木上面看到的<a href="http://m.newsmth.net/article/WorkLife/2189195">帖子</a>，内容写的很好，备份到下面。</p><p>
先说结论</p><ol><li><p>可以创业，可以打工，但是不要去创业公司打工，更不要为了别人的梦想拼命。</p></li><li><p>加入创业公司不叫创业，是去创业公司打工</p></li><li><p>结合1&amp;2， 不到走投无路，不去创业公司，尤其是ABC轮的公司。</p></li></ol><p>说说理由：</p><ol><li><p>创业公司要钱没钱，要名气没名气，这种情况下公司的薪水根本招不到靠谱的人，所以就靠创始人用前景和情怀去忽悠（骗），所以，当有人邀你去创业的时候，你不要心中一喜，有人带你来发财了，而是有人拉你去当炮灰了。</p></li><li><p>说说创业公司常见的坑</p><ol><li><p>薪水，去创业公司要面临巨大的风险，所以一定要有高的回报，凡是降薪或者需要用财务手段平薪的，基本上都不要去，公司的现金流有问题。</p></li><li><p>股票，大多数去创业公司都是为了股票，期待有朝一日公司上市就能财务自由，但是能上市的公司实在太少，很多公司上不了市，很多公司需要用财务手段上市，某知名视频网站1:18合股可以了解一下。就算公司上市了，google/Facebook/alibaba这样的公司实在太少，大多数公司上市了，股票都会在解禁期之后暴跌。股票另外一个大坑就是，很多公司要求你花钱购买，这也是创始人拉不到投资募集资本的方式，很多人没有投资人的眼光和估值方法，很多情况是高价购买，也就是说那些创业公司的股票根本值不了那么多钱。</p></li><li><p>期权，期权其实不是股票，只是一种权利，约定的是公司上市之后，你可以用某个价格购买公司股票来赚取差价。所以说，你有了期权并不等于拥有公司的资产，你只是个打工的。</p></li><li><p>中国没有期权保护法，公司有无数种办法来剥夺你的股票期权</p></li><li><p>头衔，也有人加入创业公司为了头衔，但是很多创业公司标榜自己是扁平化管理，连个头衔都不舍得施舍，或者施舍一个常用忽悠头衔，例如技术负责人啥的。这是因为，公司对你不认可，他要把高级头衔留给别人。你加入时是CTO，后面来的人就不能是CTO，但是你如果被忽悠了，加入是是技术负责人，后面来的人可以是总监、CTO。</p></li><li><p>最后一点专门针对技术人员，技术人员加入早期的创业公司基本上要悲剧，哪怕你是技术合伙人：公司早期要钱没钱要名气没名气，请不来什么牛人，基本上都是一帮挫人，你作为技术合伙人带着一帮多人7x24的工作，那系统上线了，那么恭喜你，你很快就要被公司清洗了，因为系统上线，公司下面要发展业务和市场推广，需要清洗技术部节约开支，二是技术部或者技术合伙人所占的股票会让老板们心疼，三是公司起步阶段，没几个用户，所以，系统压力不大，因此技术部显得越来越不重要。就算技术合伙人凭借自己对系统的掌控没有被清洗，那么公司业务发展了，系统压力变大了，技术合伙人的能力是否还能跟上也是一个问题，如果不能，那么技术合伙人就要出局，让位给更牛的人。</p></li></ol></li></ol><p>最后说说例外，什么情况下可以加入创业公司：1）走投无路，不去工作就没钱吃饭了 2）遇到真正赏识你的老板，什么是真正赏识你的老板，请参考刘备三顾茅庐，刘邦登坛拜将</p><p>
肯定会有人反驳我：XXX就是因为加入创业公司，公司上市就财务自由了。这个和XXX买了体彩福彩中了500万1000万差不多。毕竟，google/facebook/alibaba这样的公司还是太少。</p></content></item><item><title>Add an Force Sync Button in Django Admin</title><link>https://wdicc.com/add-an-force-sync-button-in-django-admin/</link><pubDate>Thu, 12 Dec 2019 13:33:15 +0800</pubDate><guid>https://wdicc.com/add-an-force-sync-button-in-django-admin/</guid><description>我们的系统里面需要和外部的系统同步一些数据，为了保证数据正确处理，增加了一个队列。队列是通过一个 celery 里</description><content type="text/html" mode="escaped"><p>我们的系统里面需要和外部的系统同步一些数据，为了保证数据正确处理，增加了一个队列。队列是通过一个 celery 里面的定时任务同步的。定时任务设置是 5 分钟一次，那有时候测试的时候或者出错的时候就可能会想要立刻执行下同步，好看看执行结果，要不很有可能等到下次执行的时候还是有问题，这就有点浪费时间了。</p><p>
自然就想在 Django admin 后台增加一个按钮，点一下就执行一下同步功能。Django 提供了一个<code>admin.ModelAdmin.change_list_template</code> 变量来让你自己定义 list 模版，我们就用这个实现了。</p><p><code>admin.py</code> 的代码如下。</p><div class="src src-python"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span><span class="nc">TestAdmin</span><span class="p">(</span><span class="n">admin</span><span class="o">.</span><span class="n">ModelAdmin</span><span class="p">):</span><span class="n">change_list_template</span><span class="o">=</span><span class="s2">"test/change_list.html"</span><span class="k">def</span><span class="nf">get_urls</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span><span class="n">urls</span><span class="o">=</span><span class="nb">super</span><span class="p">()</span><span class="o">.</span><span class="n">get_urls</span><span class="p">()</span><span class="n">my_urls</span><span class="o">=</span><span class="p">[</span><span class="n">url</span><span class="p">(</span><span class="sa">r</span><span class="s1">'^$'</span><span class="p">,</span><span class="bp">self</span><span class="o">.</span><span class="n">force_sync</span><span class="p">),</span><span class="p">]</span><span class="k">return</span><span class="n">my_urls</span><span class="o">+</span><span class="n">urls</span><span class="k">def</span><span class="nf">force_sync</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">request</span><span class="p">):</span><span class="n">force_sync</span><span class="o">=</span><span class="n">request</span><span class="o">.</span><span class="n">GET</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">'force_sync'</span><span class="p">)</span><span class="k">if</span><span class="n">force_sync</span><span class="p">:</span><span class="n">logger</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="s1">'Force sync start'</span><span class="p">)</span><span class="n">ret</span><span class="o">=</span><span class="n">manual_syn_task</span><span class="p">()</span><span class="n">logger</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="s1">'Force sync done, ret:</span><span class="si">{}</span><span class="s1">'</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">ret</span><span class="p">))</span><span class="k">return</span><span class="bp">self</span><span class="o">.</span><span class="n">changelist_view</span><span class="p">(</span><span class="n">request</span><span class="p">)</span></code></pre></div></div><p><code>test/change_list.html</code> 模版文件的代码如下</p><div class="src src-html"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html">{% extends 'admin/change_list.html' %}
{% load i18n admin_static %}
{% block object-tools-items %}
{{ block.super }}<span class="p">&lt;</span><span class="nt">li</span><span class="p">></span><span class="p">&lt;</span><span class="nt">a</span><span class="na">href</span><span class="o">=</span><span class="s">"{% url 'admin:app_list' app_label=cl.opts.app_label %}test?force_sync=1"</span><span class="p">></span>Force Sync<span class="p">&lt;/</span><span class="nt">a</span><span class="p">></span><span class="p">&lt;/</span><span class="nt">li</span><span class="p">></span>
{% endblock %}</code></pre></div></div><p>
这里面的核心内容是</p><ol><li><p><code>change_list_template</code> 设置使用自己的模版，然后在这个模版里面，覆盖<code>object-tools-items</code> 这个 block，不过这个 blog 里面使用<code>{{ block.super }}</code> 又保留了原来的内容，所以综合就是增加了那个链接。</p></li><li><p>然后在<code>admin.py</code> 里面，通过<code>get_url</code> 捕获你增加的 url，我省事直接用了<code>^$</code> 。</p></li><li><p>在对应的 view 函数<code>force_sync</code> 里面，判断参数里面是不是有<code>force_sync</code> ，有的话执行自己的函数就好了。最后通过<code>return self.changelist_view(request)</code> 返回默认的 view。</p></li><li><p>这个<code>changelist_view</code> 方法里面，会判断你给的参数啥的是否合法，那个<code>force_sync</code> 当然不合法，哪里都没有注册过，所以这个方法里面会直接到下面代码那个<code>except</code> 里面，会 redict 一下，把 url 参数改成<code>e=1</code> 这样的形式。</p></li><li><p>这样效果就是点击那个按钮之后，执行我的 sync 方法，然后会进行一个 302 页面刷新，参数改成了<code>e=1</code> ，然后页面内部能看到同步效果。完成了我的需求，因为页面参数都修改了，还避免了刷新页面导致无意中再次 sync 的问题。</p></li></ol><p><code>.venv/lib/python3.7/site-packages/django/contrib/admin/options.py</code> 文件里面，1671 行左右</p><div class="src src-python"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="k">try</span><span class="p">:</span><span class="n">cl</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">get_changelist_instance</span><span class="p">(</span><span class="n">request</span><span class="p">)</span><span class="k">except</span><span class="n">IncorrectLookupParameters</span><span class="p">:</span><span class="c1"># Wacky lookup parameters were given, so redirect to the main</span><span class="c1"># changelist page, without parameters, and pass an 'invalid=1'</span><span class="c1"># parameter via the query string. If wacky parameters were given</span><span class="c1"># and the 'invalid=1' parameter was already in the query string,</span><span class="c1"># something is screwed up with the database, so display an error</span><span class="c1"># page.</span><span class="k">if</span><span class="n">ERROR_FLAG</span><span class="ow">in</span><span class="n">request</span><span class="o">.</span><span class="n">GET</span><span class="p">:</span><span class="k">return</span><span class="n">SimpleTemplateResponse</span><span class="p">(</span><span class="s1">'admin/invalid_setup.html'</span><span class="p">,</span><span class="p">{</span><span class="s1">'title'</span><span class="p">:</span><span class="n">_</span><span class="p">(</span><span class="s1">'Database error'</span><span class="p">),</span><span class="p">})</span><span class="k">return</span><span class="n">HttpResponseRedirect</span><span class="p">(</span><span class="n">request</span><span class="o">.</span><span class="n">path</span><span class="o">+</span><span class="s1">'?'</span><span class="o">+</span><span class="n">ERROR_FLAG</span><span class="o">+</span><span class="s1">'=1'</span><span class="p">)</span></code></pre></div></div><p>
那如果想要在页面显示同步的结果呢？这个时候那个 302 就成问题了，因为这样还需要想办法把数据传下去。如果没有 302 的话，我们直接给<code>changelist_view(self, request, extra_context=None)</code> 传一个<code>extra_context</code> 就可以在模版里面读传进去的数据了。</p><p>
那就需要想办法绕开那个参数检查。再看看代码是哪里导致的那个 302，可以看到下面的代码。</p><p><code>.venv/lib/python3.7/site-packages/django/contrib/admin/views/main.py</code> 文件 414 行左右</p><div class="src src-python"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="k">try</span><span class="p">:</span><span class="c1"># Finally, we apply the remaining lookup parameters from the query</span><span class="c1"># string (i.e. those that haven't already been processed by the</span><span class="c1"># filters).</span><span class="n">qs</span><span class="o">=</span><span class="n">qs</span><span class="o">.</span><span class="n">filter</span><span class="p">(</span><span class="o">**</span><span class="n">remaining_lookup_params</span><span class="p">)</span><span class="k">except</span><span class="p">(</span><span class="n">SuspiciousOperation</span><span class="p">,</span><span class="n">ImproperlyConfigured</span><span class="p">):</span><span class="c1"># Allow certain types of errors to be re-raised as-is so that the</span><span class="c1"># caller can treat them in a special way.</span><span class="k">raise</span><span class="k">except</span><span class="ne">Exception</span><span class="k">as</span><span class="n">e</span><span class="p">:</span><span class="c1"># Every other error is caught with a naked except, because we don't</span><span class="c1"># have any other way of validating lookup parameters. They might be</span><span class="c1"># invalid if the keyword arguments are incorrect, or if the values</span><span class="c1"># are not in the correct type, so we might get FieldError,</span><span class="c1"># ValueError, ValidationError, or ?.</span><span class="k">raise</span><span class="n">IncorrectLookupParameters</span><span class="p">(</span><span class="n">e</span><span class="p">)</span></code></pre></div></div><p>
就是那个<code>qs.filter</code> 抛的异常。那个<code>lookup_params</code> 很眼熟，查了一下，原来是和 list_filter 里面的设置有关，继续挖掘一下，django 支持自己定义自己的 filter 的，那我们自己定义一个看看。</p><div class="src src-python"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span><span class="nc">ForceSyncFilter</span><span class="p">(</span><span class="n">admin</span><span class="o">.</span><span class="n">SimpleListFilter</span><span class="p">):</span><span class="n">title</span><span class="o">=</span><span class="s2">"force sync"</span><span class="n">parameter_name</span><span class="o">=</span><span class="s1">'force_sync'</span><span class="k">def</span><span class="nf">lookups</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">request</span><span class="p">,</span><span class="n">model_admin</span><span class="p">):</span><span class="k">return</span><span class="p">()</span><span class="k">def</span><span class="nf">queryset</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">request</span><span class="p">,</span><span class="n">queryset</span><span class="p">):</span><span class="k">return</span><span class="n">queryset</span><span class="k">class</span><span class="nc">TestAdmin</span><span class="p">(</span><span class="n">admin</span><span class="o">.</span><span class="n">ModelAdmin</span><span class="p">):</span><span class="n">list_filter</span><span class="o">=</span><span class="p">(</span><span class="n">ForceSyncFilter</span><span class="p">)</span></code></pre></div></div><p>
增加之后访问一下，发现不会 redirect 啦，后续就简单了，不演示了。哦，实际上还需要把结果显示在页面的话，还需要找一个地方，刚好我发现那个搜索如果出错的话，会有显示，我们服用那个就可以。模版里面在<code>object-tools</code> 上面增加一个输出就行。</p><div class="src src-html"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html">{% block object-tools %}
{{ block.super }}
{% if extra.sync_message %}<span class="p">&lt;</span><span class="nt">p</span><span class="na">class</span><span class="o">=</span><span class="s">"errornote"</span><span class="p">></span>{{ extra.sync_message }}<span class="p">&lt;/</span><span class="nt">p</span><span class="p">></span>
{% endif %}
{% endblock %}</code></pre></div></div></content></item></channel></rss>