<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Home on wd and cc</title>
    <link>https://wdicc.com/</link>
    <description>Recent content in Home on wd and cc</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sun, 13 May 2018 10:43:28 +0800</lastBuildDate>
    
        <atom:link href="https://wdicc.com/atom.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Redux Selector</title>
      <link>https://wdicc.com/redux-selector/</link>
      <pubDate>Sun, 13 May 2018 10:43:28 +0800</pubDate>
      
      <guid>https://wdicc.com/redux-selector/</guid>
      <description>&lt;p&gt;redux 应用可以通过 selector 来做 state -&gt; props 的映射工作。selector 本身有缓存效果，所以可以一定意义上加速。我用的是这个 &lt;a href=&#34;https://github.com/reduxjs/reselect&#34; title=&#34;https://github.com/reduxjs/reselect&#34;&gt;https://github.com/reduxjs/reselect&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;selector 主要是一个纯函数，给同样的输入，得到同样的输出，只处理数据，没有其他附加影响。这样就可以缓存中间结果了。&lt;/p&gt;

&lt;p&gt;新建 selector 有两个方法，一个是直接定义函数，例如&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const s1 = (state) =&amp;gt; {
    // 经过计算
    return state.user
}
const s2 = state =&amp;gt; state.data
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;另外一个方法是通过 &lt;code&gt;createSelector&lt;/code&gt; 函数来创建，例如&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const s3 = createSelector(s1, s2, (s1, s2) =&amp;gt;{
    // 经过计算
    return xx
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;实际上 selector 都是一些函数，具体用的是侯会执行这些函数，第一个方法创建的还好理解，第二个方法里面，会传什么参数呢？输入是什么呢？&lt;/p&gt;

&lt;p&gt;实际上，第二个方法定义的 selector 执行的时候类似这样。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const res = s3(s1(state), s2(state))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;输入是里面 selector 的输入，然后不停嵌套到最初的数据。这样一个 selector 使用的方法就广泛了。比如&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const s1_res = s1(state) // 从其他地方或者逻辑获取到这个值

const res = s3(s1_res, s2(state)) // 直接用来作为 s3 的输入
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Openwrt</title>
      <link>https://wdicc.com/openwrt/</link>
      <pubDate>Sun, 13 May 2018 10:01:39 +0800</pubDate>
      
      <guid>https://wdicc.com/openwrt/</guid>
      <description>&lt;p&gt;前段时间还搞了一下 openwrt 定制，记录一下。&lt;/p&gt;

&lt;p&gt;openwrt 提供了很方便的方式让你可以在 x86 机器上面定制路由器固件，到 &lt;a href=&#34;https://archive.openwrt.org/&#34; title=&#34;https://archive.openwrt.org/&#34;&gt;https://archive.openwrt.org/&lt;/a&gt; 下载对应的源码就可以。&lt;/p&gt;

&lt;p&gt;比如我用的是这个 &lt;a href=&#34;https://archive.openwrt.org/barrier_breaker/14.07/ar71xx/generic/OpenWrt-ImageBuilder-ar71xx_generic-for-linux-x86_64.tar.bz2&#34; title=&#34;https://archive.openwrt.org/barrier_breaker/14.07/ar71xx/generic/OpenWrt-ImageBuilder-ar71xx_generic-for-linux-x86_64.tar.bz2&#34;&gt;https://archive.openwrt.org/barrier_breaker/14.07/ar71xx/generic/OpenWrt-ImageBuilder-ar71xx_generic-for-linux-x86_64.tar.bz2&lt;/a&gt; ， &lt;code&gt;barrier_breaker&lt;/code&gt; 是版本， &lt;code&gt;ar71xx&lt;/code&gt; 是 cpu 架构。解压之后目录类似如下&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;drwxr-xr-x 12 wd wd 4.0K Mar 29 17:18 .
drwxr-xr-x  3 wd wd 4.0K Mar 26 20:32 ..
drwxr-xr-x  3 wd wd 4.0K Mar 27 10:40 bin
drwxr-xr-x  3 wd wd 4.0K Oct  1  2014 build_dir
-rw-r--r--  1 wd wd  94K Oct  1  2014 .config
drwxr-xr-x  2 wd wd 4.0K Oct  1  2014 dl
drwxr-xr-x  3 wd wd 4.0K Mar 26 20:37 include
-rw-r--r--  1 wd wd 5.0K Sep 21  2014 Makefile
-rw-r--r--  1 wd wd 570K Oct  1  2014 .packageinfo
drwxr-xr-x  4 wd wd 4.0K Oct  1  2014 packages
-rw-r--r--  1 wd wd  331 Oct  1  2014 repositories.conf
-rw-r--r--  1 wd wd  11K Sep 21  2014 rules.mk
drwxr-xr-x  4 wd wd 4.0K Sep 21  2014 scripts
drwxr-xr-x  3 wd wd 4.0K Oct  1  2014 staging_dir
drwxr-xr-x  3 wd wd 4.0K Oct  1  2014 target
-rw-r--r--  1 wd wd 128K Sep 21  2014 .targetinfo
drwxr-xr-x  2 wd wd 4.0K Mar 27 10:40 tmp
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;编译的命令如下&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;make image \
    PROFILE=TLWR703 \
    PACKAGES=&amp;quot;firewall -ip6tables -kmod-ip6tables -kmod-ipv6 -odhcp6c -ppp -ppp-mod-pppoe -liblua -libubus-lua -libuci-lua -luci-app-firewall -luci-i18n-english -luci-lib-ipkg -luci-lib-lmo -luci-lib-sys -luci-proto-core -luci-proto-ppp -luci-sgi-cgi -luci-theme-base -luci-theme-openwrt kmod-mii kmod-usb-net kmod-usb-net-cdc-ether usb-modeswitch curl&amp;quot; \
    FILES=files/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;编译结果会放在 &lt;code&gt;bin/ar71xx/&lt;/code&gt; 下面&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;-rw-r--r-- 1 wd wd  827 May 13 10:08 md5sums
-rw-r--r-- 1 wd wd 2.2M May 13 10:08 openwrt-ar71xx-generic-root.squashfs
-rw-r--r-- 1 wd wd 1.9M May 13 10:08 openwrt-ar71xx-generic-root.squashfs-64k
-rw-r--r-- 1 wd wd 3.8M May 13 10:08 openwrt-ar71xx-generic-tl-wr703n-v1-squashfs-factory.bin
-rw-r--r-- 1 wd wd 2.9M May 13 10:08 openwrt-ar71xx-generic-tl-wr703n-v1-squashfs-sysupgrade.bin
-rw-r--r-- 1 wd wd 1.5M May 13 10:08 openwrt-ar71xx-generic-uImage-gzip.bin
-rw-r--r-- 1 wd wd 1.1M May 13 10:08 openwrt-ar71xx-generic-uImage-lzma.bin
-rwxr-xr-x 1 wd wd 3.2M May 13 10:08 openwrt-ar71xx-generic-vmlinux.bin
-rwxr-xr-x 1 wd wd 3.3M May 13 10:08 openwrt-ar71xx-generic-vmlinux.elf
-rw-r--r-- 1 wd wd 1.5M May 13 10:08 openwrt-ar71xx-generic-vmlinux.gz
-rw-r--r-- 1 wd wd 1.1M May 13 10:08 openwrt-ar71xx-generic-vmlinux.lzma
-rwxr-xr-x 1 wd wd 1.2M May 13 10:08 openwrt-ar71xx-generic-vmlinux-lzma.elf
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;那个 &lt;code&gt;openwrt-ar71xx-generic-tl-wr703n-v1-squashfs-factory.bin&lt;/code&gt; 就是我那个路由器的出厂固件。简直简单到没法说了。&lt;/p&gt;

&lt;p&gt;前面那个编译命令里面， &lt;code&gt;PROFILE&lt;/code&gt; 是指定要编译的路由器，这个必须得是固件支持的，可以在 &lt;code&gt;target/linux/ar71xx/generic/profiles/&lt;/code&gt; 目录看到。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;00-default.mk  8devices.mk  atheros.mk   buffalo.mk  dragino.mk   ew.mk          jjplus.mk   netgear.mk   pcs.mk      rosewill.mk  tp-link.mk   wd.mk
01-minimal.mk  alfa.mk      atlantis.mk  compex.mk   easylink.mk  gl-connect.mk  linksys.mk  oolite.mk    planex.mk   senao.mk     trendnet.mk  zcomax.mk
02-ath5k.mk    allnet.mk    bhu.mk       d-link.mk   engenius.mk  hiwifi.mk      nclink.mk   openmesh.mk  redwave.mk  sitecom.mk   ubnt.mk      zyxel.mk
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;PACKAGES&lt;/code&gt; 指定了要包含的包，可以在 &lt;code&gt;packages/&lt;/code&gt; 目录下面看到有的包。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;FILES&lt;/code&gt; 指定了自己定义要包含到固件里面的文件。可以把这个目录当作 &lt;code&gt;/&lt;/code&gt; 来放文件，比如你放到 &lt;code&gt;files/abc&lt;/code&gt; 下面的文件，将来会在路由器的 &lt;code&gt;/abc&lt;/code&gt; 下面。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.:
etc

./etc:
banner  config  crontabs  dropbear  run.sh

./etc/config:
dropbear  firewall  network  system  wireless

./etc/crontabs:
root

./etc/dropbear:
authorized_keys
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;后面还给 wr703n 接了一个华为 4g usb E8372h 型号，支持了 4g 上网。需要的包是这些， &lt;code&gt;kmod-mii kmod-usb-net kmod-usb-net-cdc-ether usb-modeswitch&lt;/code&gt; ，华为这个 usb 支持 ether 方式使用，并且 usb-modeswitch 直接就支持，不用自己配置。把 eth1 作为 wan 就可以了。&lt;/p&gt;

&lt;p&gt;中国联通的信道&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;3G: WCDMA Band 1/8&lt;/li&gt;
&lt;li&gt;4G: LTE-FDD 1/3/8  LTE-TDD 40/41&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;参考的一些文章&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;链接 &lt;a href=&#34;https://soha.moe/post/make-4g-wifi-ap-with-openwrt.html&#34; title=&#34;https://soha.moe/post/make-4g-wifi-ap-with-openwrt.html&#34;&gt;https://soha.moe/post/make-4g-wifi-ap-with-openwrt.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;链接 &lt;a href=&#34;http://right.com.cn/forum/forum.php?mod=viewthread&amp;amp;action=printable&amp;amp;tid=209854&#34; title=&#34;http://right.com.cn/forum/forum.php?mod=viewthread&amp;amp;action=printable&amp;amp;tid=209854&#34;&gt;http://right.com.cn/forum/forum.php?mod=viewthread&amp;action=printable&amp;tid=209854&lt;/a&gt; 这个论坛里面之前有一个帖子帮助很大没保存&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Develop Plugin for Asuswrt Merlin</title>
      <link>https://wdicc.com/develop-plugin-for-asuswrt-merlin/</link>
      <pubDate>Sun, 13 May 2018 08:03:28 +0800</pubDate>
      
      <guid>https://wdicc.com/develop-plugin-for-asuswrt-merlin/</guid>
      <description>&lt;p&gt;换华硕路由器之后，一直用的是梅林（merlin）的固件（rom）。基于这个固件，有一个 &lt;a href=&#34;http://koolshare.cn/forum-96-1.html&#34; title=&#34;koolshare&#34;&gt;koolshare&lt;/a&gt; 的团队做了很多插件，并且做了一个通用的软件中心，可以方便的管理插件，还挺不错的。&lt;/p&gt;

&lt;p&gt;打算用 v2ray 的时候，就想着如何才能无缝替换掉 ss。因为 v2ray 在路由器上面跑效率不高内存占用比较高，ss 作者开始说不打算支持 v2ray。后来研究了 ss 原理之后发现替换很简单，只需要具备 2 个功能就可以，一个是可以支持 socks 代理，一个是可以透明转发流量的端口。这两个协议在 v2ray 都支持，所以要做的其实就是在启动 ss 相应软件的时候启动 v2ray 的就可以了。&lt;/p&gt;

&lt;p&gt;基于这个逻辑写了一个&lt;a href=&#34;https://gist.github.com/wd/e0bc83b33ce63506a9bdbc3b81658c52&#34; title=&#34;文档&#34;&gt;文档&lt;/a&gt; ，能弄明白的话，自己用应该也够了。后来一时兴起，做了一个&lt;a href=&#34;https://gist.github.com/wd/1445e3fcf0c9bc535a6e70d2de1d1624&#34; title=&#34;改进版&#34;&gt;改进版&lt;/a&gt;。这个版本基本上就傻瓜化了。做的时候对基于 merlin 开发有了一些经验记录一下，发现讲这个的东西不多。&lt;/p&gt;

&lt;h1 id=&#34;一些基础知识&#34;&gt;一些基础知识&lt;/h1&gt;

&lt;p&gt;路由器上面的内容是只读的，修改之后重启就会重置。但是 JFFS 分区里面的内容是会保留的。想要保存数据有两个方法。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;存一个文件放到 JFFS 分区上面。&lt;/li&gt;
&lt;li&gt;通过 &lt;code&gt;dbus&lt;/code&gt; 命令储存。(这个命令具体会把数据存哪里我还没仔细看。)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;文件方式没什么好说的，储存和读取解析需要你自己做。 &lt;code&gt;dbus&lt;/code&gt; 命令提供了 key-value 的形式储存数据，可以通过例如 &lt;code&gt;dbus list v2ray&lt;/code&gt; 列出来所有 &lt;code&gt;v2ray&lt;/code&gt; 开头的 key 的情况，执行 &lt;code&gt;dbus&lt;/code&gt; 命令不带参数会有使用方法提示。&lt;/p&gt;

&lt;p&gt;一般开发插件还有一个设置也需要开启，就是允许执行 JFFS 的自定义脚本。这个指的是路由器启动的时候，自动执行 &lt;code&gt;/jffs/scripts/&lt;/code&gt; 下面的一些文件，也并不是任意文件都会执行，merlin 自己的 &lt;a href=&#34;https://github.com/RMerl/asuswrt-merlin/wiki/User-scripts&#34; title=&#34;wiki&#34;&gt;wiki&lt;/a&gt; 有比较详细的说明。&lt;/p&gt;

&lt;p&gt;所以实际上一个插件的工作方式实际上是这样&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;路由器启动&lt;/li&gt;
&lt;li&gt;读取 dbus 配置的数据&lt;/li&gt;
&lt;li&gt;执行 &lt;code&gt;/jffs/scripts/&lt;/code&gt; 目录下面相应的脚本&lt;/li&gt;
&lt;li&gt;这些脚本里面会执行你的插件的脚本&lt;/li&gt;
&lt;li&gt;你的脚本会读取 dbus 配置的数据，以及读取你存储的文件&lt;/li&gt;
&lt;li&gt;不管是你的界面还是脚本有新的数据需要保存，通过 dbus 或者文件存下来&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;每次路由器启动都是这样一个从头初始化的过程。&lt;/p&gt;

&lt;h1 id=&#34;基于-koolshare-软件中心的离线包&#34;&gt;基于 koolshare 软件中心的离线包&lt;/h1&gt;

&lt;p&gt;我开发是基于 koolshare 软件中心的，他提供了一个离线安装的功能，以及很多好用的小工具，可以方便开发。想支持离线安装，需要你提供一个 &lt;a href=&#34;https://github.com/wd/koolshare_plugin_v2ray/blob/master/install.sh&#34; title=&#34;install.sh&#34;&gt;install.sh&lt;/a&gt;，你上传的包的名字必须是 &lt;code&gt;name.tar.gz&lt;/code&gt; ， &lt;code&gt;name&lt;/code&gt; 名字还得和解压之后的目录名字对应，有些人多次下载系统可能会给他改成 &lt;code&gt;name(1).tar.gz&lt;/code&gt; 这种会失败。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;install.sh&lt;/code&gt; 里面底部定义的那几个 &lt;code&gt;softcenter_module_v2ray_&lt;/code&gt; 开头的配置是给软件中心用的。 &lt;code&gt;home_url&lt;/code&gt; 是软件中心里面点击你插件的图标的时候打开的页面。&lt;/p&gt;

&lt;p&gt;安装离线包的时候不会自动处理 &lt;code&gt;uninstall.sh&lt;/code&gt; ，需要你自己把这个放到&lt;a href=&#34;https://github.com/wd/koolshare_plugin_v2ray/blob/master/install.sh#L61&#34; title=&#34;对应地方&#34;&gt;对应地方&lt;/a&gt;，并且需要有对的名字。&lt;/p&gt;

&lt;p&gt;整个安装完全是你自己控制自己要做的事情。卸载也一样，需要自己删除自己复制的脚本文件和产生的数据等。&lt;/p&gt;

&lt;h1 id=&#34;界面功能&#34;&gt;界面功能&lt;/h1&gt;

&lt;p&gt;merlin 的界面文件是 &lt;code&gt;.asp&lt;/code&gt; 结尾，里面唯一相关的标记是类似这样的 &lt;code&gt;&amp;lt;% nvram_get(&amp;quot;firmver&amp;quot;); %&amp;gt;&lt;/code&gt; ，不记得是不是 asp 语法里面的东西了。基本上都是一些 js 和 html 的东西。&lt;/p&gt;

&lt;h2 id=&#34;初始化&#34;&gt;初始化&lt;/h2&gt;

&lt;p&gt;一般是在界面的 body 的 onload 方法里面执行&lt;a href=&#34;https://github.com/wd/koolshare_plugin_v2ray/blob/master/webs/Module_v2ray.asp#L463&#34; title=&#34;自己的函数&#34;&gt;自己的函数&lt;/a&gt;。&lt;a href=&#34;https://github.com/wd/koolshare_plugin_v2ray/blob/master/webs/Module_v2ray.asp#L500&#34; title=&#34;这里&#34;&gt;这里&lt;/a&gt;是预留左侧系统原有的导航按钮的地方。&lt;/p&gt;

&lt;h2 id=&#34;保存配置&#34;&gt;保存配置&lt;/h2&gt;

&lt;p&gt;界面里面可以通过 post 给 &lt;code&gt;applydb.cgi&lt;/code&gt; 的方式保存给 dbus，类似&lt;a href=&#34;https://github.com/wd/koolshare_plugin_v2ray/blob/master/webs/Module_v2ray.asp#L251&#34; title=&#34;这里&#34;&gt;这里&lt;/a&gt;。先把表单里面的值都读出来做适当的处理，然后存到 &lt;code&gt;dbus&lt;/code&gt; 这个变量里面， &lt;code&gt;SystemCmd&lt;/code&gt; 定义的是执行 post 的之后需要执行的脚本。 &lt;code&gt;action_mode&lt;/code&gt; 是执行脚本之后界面的动作。&lt;/p&gt;

&lt;p&gt;这个里面你的脚本会被调用，你需要处理的事情，比如保存配置到文件什么的就可以在这里做了。&lt;/p&gt;

&lt;p&gt;这里有一个问题是执行命令的时候，不能得到执行的结果反馈。&lt;/p&gt;

&lt;h2 id=&#34;执行命令的时候显示反馈&#34;&gt;执行命令的时候显示反馈&lt;/h2&gt;

&lt;p&gt;上面保存配置是通过 ajax 异步执行的，ajax 的执行结果立刻就会反馈，脚本调用也是异步的，调用脚本的执行结果需要你自己想办法获取。&lt;/p&gt;

&lt;p&gt;类似我&lt;a href=&#34;https://github.com/wd/koolshare_plugin_v2ray/blob/master/webs/Module_v2ray.asp#L300&#34; title=&#34;这里&#34;&gt;这里&lt;/a&gt;，在 ajax 执行成功之后获取执行的结果。先显示一个图层，在里面再&lt;a href=&#34;https://github.com/wd/koolshare_plugin_v2ray/blob/master/webs/Module_v2ray.asp#L305&#34; title=&#34;无限执行另外一个 ajax&#34;&gt;无限执行另外一个 ajax&lt;/a&gt;，把 ajax 的执行结果放到刚才那个图层里面，这样用户就可以看到了。然后通过检查结果里面是否&lt;a href=&#34;https://github.com/wd/koolshare_plugin_v2ray/blob/master/webs/Module_v2ray.asp#L316&#34; title=&#34;包含特定字符&#34;&gt;包含特定字符&lt;/a&gt;来判断脚本是不是执行完毕。&lt;/p&gt;

&lt;p&gt;ajax 请求的是一个 &lt;a href=&#34;https://github.com/wd/koolshare_plugin_v2ray/blob/master/webs/Module_v2ray.asp#L307&#34; title=&#34;url&#34;&gt;url&lt;/a&gt;，这个 url 对应的文件是&lt;a href=&#34;https://github.com/wd/koolshare_plugin_v2ray/blob/master/res/v2ray_status.htm&#34; title=&#34;这个&#34;&gt;这个&lt;/a&gt;。里面其实很简单，就是把 &lt;code&gt;/tmp/v2ray_status.log&lt;/code&gt; 的内容显示出来。&lt;/p&gt;

&lt;p&gt;所以通过这个方式，上面的脚本自需要把想要反馈的内容放到这个 log 文件就可以了，整个逻辑就这样。我这里为了简单所有的脚本执行都复用了这个 log 文件，所以为了避免被上次执行的命令影响，每次执行脚本写入这个文件前都先把这个文件里面的历史数据清楚掉。&lt;/p&gt;

&lt;h2 id=&#34;其他命令执行结果的方式&#34;&gt;其他命令执行结果的方式&lt;/h2&gt;

&lt;p&gt;merlin 还提供了一个 &lt;code&gt;apply.cgi&lt;/code&gt; 可以执行脚本，例如&lt;a href=&#34;https://github.com/wd/koolshare_plugin_v2ray/blob/master/webs/Module_v2ray.asp#L136&#34; title=&#34;这里&#34;&gt;这里&lt;/a&gt;。我忘记是不是同步执行的了，好像是命令执行完毕之后才会执行 ajax 的回调。&lt;/p&gt;

&lt;p&gt;依然还是通过请求刚才那个 &lt;code&gt;/res/v2ray_status.html&lt;/code&gt; 文件来&lt;a href=&#34;https://github.com/wd/koolshare_plugin_v2ray/blob/master/webs/Module_v2ray.asp#L147&#34; title=&#34;取结果&#34;&gt;取结果&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;这里还不有一个坑，如果长时间没有从登录界面进入过路由器管理界面，那执行这个可能会遇到获取到的数据是一个 html 的到 Login 页面的 redirect。&lt;/p&gt;

&lt;h1 id=&#34;cron&#34;&gt;Cron&lt;/h1&gt;

&lt;p&gt;如果想要定时执行一些任务，可以添加 cron。merlin 管理界面的用户不一定都是 admin，所以 cron 的用户也不一定是什么，可以用 &lt;code&gt;cru&lt;/code&gt; &lt;a href=&#34;https://github.com/wd/koolshare_plugin_v2ray/blob/master/scripts/v2ray_watchdog.sh#L91&#34; title=&#34;命令&#34;&gt;命令&lt;/a&gt;来管理 cron。&lt;/p&gt;

&lt;h1 id=&#34;自己的启动脚本&#34;&gt;自己的启动脚本&lt;/h1&gt;

&lt;p&gt;前面也说过，可以放到&lt;a href=&#34;https://github.com/RMerl/asuswrt-merlin/wiki/User-scripts&#34; title=&#34;这些对应的脚本&#34;&gt;这些对应的脚本&lt;/a&gt;里面。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Self Hosted Blog</title>
      <link>https://wdicc.com/self-hosted-blog/</link>
      <pubDate>Fri, 06 Apr 2018 14:59:49 +0800</pubDate>
      
      <guid>https://wdicc.com/self-hosted-blog/</guid>
      <description>&lt;p&gt;给 checked 的一个反馈。&lt;/p&gt;

&lt;p&gt;给播客写反馈是个很奇怪的事情，当我听完博客觉得心潮澎湃的写反馈的时候，其实主播们应该已经对那些说过的事情的兴趣估计已经没有了。所以感觉是像是一个很激动兴奋的人找别人聊天，结果人家波澜不惊的和你说：嗯嗯嗯。。一样。。&lt;/p&gt;

&lt;p&gt;有两点反馈，一点关于文章格式，一点关于自建博客。&lt;/p&gt;

&lt;p&gt;语言这个东西，发明出来就是为了交流用的，如果某种流行的东西有助于交流，那我觉得没有什么问题。比如空行代替头部空两个字，感觉好很多。比如使用 &#39;。。。。&#39; 代替 &#39;……&#39; 也没什么（其实是给我下面标点乱用打埋伏。。。:p ）。&lt;/p&gt;

&lt;p&gt;直角引号的讨论有很多，随便搜了&lt;a href=&#34;https://www.zhihu.com/question/19589668&#34; title=&#34;一个&#34;&gt;一个&lt;/a&gt; 。我记得最早流行这个好像就是知乎，后来搜狗输入法还提供了一个选项是在知乎输入引号的时候输入直角引号。我个人喜欢看直角的，因为很多时候那个蝌蚪样子的，有好几个编码，比如 ‘ ’、“ ”、&#39; &#39;、&#34; &#34;、 这几个都是半角的，左右不好区分开。但是直角的，再怎么也比较好区分左右，并且对竖排文字，比如广告图什么的里面也很有好。可以参考下&lt;a href=&#34;https://zh.wikipedia.org/wiki/%25E5%25BC%2595%25E5%258F%25B7&#34; title=&#34;这个&#34;&gt;这个&lt;/a&gt; 。&lt;/p&gt;

&lt;p&gt;下面聊自建博客。这个 20 年前我和 hum 的看法是一样的，有病才去自己弄，需要自己搞服务器，自己维护，成本很高。但是使用别人搞的，也并不是没有问题。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;网站倒闭。最初的 MSN Live Space，然后新浪博客，然后国外的 wordpress，然后国内牛博网等等很多，那会博客风起来的时候，非常多这种网站，目前这些都不能访问或者死掉了。死掉的时候，你的文章怎么办？良心一点的提供一个导出，要不然就是你自己想办法解决。写的时候可能文本，最后拿到的没准是一堆的 HTML，很难处理。&lt;/li&gt;
&lt;li&gt;流氓的版权协议。国内各大网站都会要你发的帖子的著作权，可以找找看有没有说版权归你，使用的时候会找你协商以及给你版权费的。&lt;/li&gt;
&lt;li&gt;格式样式不可控。各网站都有自己的风格，比如我们程序员经常会想贴一点代码，想要一个高亮，但是人家不给你提供的话，你就很难做到。还有比如想要在文章顶部显示一个大纲方便看的人一目了然的需求。不过目前因为 markdown 的兴起，还算是对程序员友好，也算有希望统一这个格式的问题。同时 markdown 还能一定意义上解决上面提到的导出迁移的问题（当然，前提是人家让你导出），不过呢，还有另一个问题是 markdown 原定的标准实际是个残废，很多常用的东西都不支持，比如表格，比如 footnote，然后各家必定会对他扩展，那就会导致你从这家导出来的别家不一定支持。这里顺便安利一下 org-mode。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;我自己使用自建博客很多年了，以后应该也不会使用其他商业的博客。我自己的博客的用途是留存我自己的经历，本身只分享文本内容，因为图片的流量问题，一般免费服务的空间都会限制，这些图片你自己维护起来也很费劲。就算是付费的，也很少有终身的，以后的事情谁能说的清。所以我都是用文字来表达，好处一方面是整站打包也就几M，另一方面，分享出去的东西别人也很方便的可以留存。&lt;/p&gt;

&lt;p&gt;如果用途不止我那个，那平台名气是可以借用的，用平台肯定是最好的选择。&lt;/p&gt;

&lt;p&gt;自建博客目前其实也很简单，空间在 github 开个账号就可以，只需要传 HTML 内容就可以，可以通过一些工具把文章转成 HTML 就可以。就算没有这种商业服务，自己搞一个 vps 跑一个 nginx 之类的，服务这些 HTML 也是一个很简单的事情。比如我用的是 hugo，支持 markdown，org-mode。类似的还有 hexo。&lt;/p&gt;

&lt;p&gt;最后说忍不住补充一下 org-mode。org-mode 一直被认为是 Emacs 用户才能用，其实并不是，目前也也有一些支持他的文本处理工具，比如 hugo 和 pandoc 就支持 org-mode 文件输入，输出 HTML。目测目前 markdown 的那个表格就是学习的 org-mode 的，org-mode 的表格还支持写公式计算。别的不多说了，org-mode 基本是 markdown 的一个超集，有兴趣可以了解一下。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Beijing Traffic</title>
      <link>https://wdicc.com/beijing-traffic/</link>
      <pubDate>Fri, 06 Apr 2018 14:51:19 +0800</pubDate>
      
      <guid>https://wdicc.com/beijing-traffic/</guid>
      <description>&lt;p&gt;给比特新声的一个反馈，记录一下。&lt;/p&gt;

&lt;p&gt;北京最初的时候，应该只有二环里面四个区（崇文，宣武，东西城）可能才算城区，后面慢慢的，加上海淀，朝阳等几个区，那会通州区还是通县，类似的大兴，密云县。到目前的大北京的情况，东边繁华地带都和河北接壤了（就是燕郊）。&lt;/p&gt;

&lt;p&gt;北京实在太大了。&lt;/p&gt;

&lt;p&gt;我在中关村上班的时候，家在东五环外面，去公司上班，开车单程需要 35 公里。快的话 40 分钟，慢的话 1.5 小时。我也有同事住在燕郊，长阳，你们可以查查有多远。&lt;/p&gt;

&lt;p&gt;大概 10 年左右，我从中关村 7 点下班了开车回家是 40 分钟。基本不堵车，全程 4 环加 5 环路，基本没有红绿灯，开的还是挺快的。但是现在就不行了，即使在 1/5 车限行的情况下，堵车也很厉害。可能只有单双号还能和以前一比了。&lt;/p&gt;

&lt;p&gt;北京特别大，但是走哪里都有一个比较集中的生活区，会有一些大的商场，超市，方便你购买生活用品和吃饭。但是随着年轻人不在家里做饭或者很少做饭，这些商场现在也是人满为患，到了饭点吃饭基本都需要排队。&lt;/p&gt;

&lt;p&gt;北京喜欢建大路。二环到现在的六环。这种规划我认为比较脑残，可能能体现出来一些气派的感觉，毕竟第一次看到能让 10 辆车并行通过的路，还是会觉得：哇，比我们那的土路确实牛逼多了。这种路，刚修好的几年里面，确实会爽，只要开上去，一路没有红绿灯困扰，不堵车还是挺快的。尤其领导开上来的时候，把路一封，其他车上不来，领导的自豪感估计挺强的。&lt;/p&gt;

&lt;ol&gt;
说说脑残的地方。
&lt;li&gt;这种路非常怕扰动。为了快速，肯定要减少出入口，因为车辆出入的时候，速度肯定会比较慢，多了就容易影响其他不出入的车。这样，一旦遇到点情况，大家都出不去，只能在里面堵着。我说的情况包括不限于车祸，恶劣天气，路况的变化。&lt;/li&gt;
  这种路一般都有应急车道。但是有时候遇到比如桥梁啥的，可能那一小段会没有应急车道。而就这个情况，会导致拥堵。怎么发生的呢？车辆一旦稍微多一点，就会有车开应急车道，这些车到了没有应急车道的地方，必然需要并到路里面来，因为车辆本身多，他一并入，必然导致后车需要减速让行，然后连锁反应，后面的车觉得这个车道好像比旁边的车道慢，就会并入旁边车道或者进入应急车道。恶性循环，而这个情况的出现，可能值需要一辆走应急的车来触发一下，这条路立刻就不行了。
  讲一个搞笑的事情，我每天都路过环路的一个桥，这个桥就没有应急车道。而且这个桥上桥是个上坡，那一些货车到了这里就起不来速度，就会导致这个地方产生那个连锁反应开始拥堵。这个拥堵，一般到了下桥的地方就恢复了。感觉道路设计应该也是一个比较有意思的事情。
  五环路之前是收费的，所以出入口就更加少了，每次开上去遇到堵车都没有办法绕开。
&lt;li&gt;过马路很头大。马路太宽，要么建天桥，要么地道，或者就是绕道到一个立交桥的地方过。拿着重物的话，天桥和地道上下会觉得不方便。绕道立交桥又会比较远。很难受。&lt;/li&gt;
  这里还想起来另外一个事情，就是北京也喜欢建大的小区。然后小区物业为了管理方便，自然把能关的门都关掉，这样可以开那么几个门派少量的保安看着。如果一个小区在大路边上，大概率是没有临路的门的，所以过了马路还得绕道到另外一边进小区。
&lt;li&gt;这种大路，还会导致临路的屋子住的很难受。大路上面一般车多且速度快，噪音很大，灰尘也很大。&lt;/li&gt;
&lt;li&gt;这个因为一旦开上去后路就比较，往往都是一直大路开就可以，所以这个很多人会首选往这里开，尤其新手怕开错路，这也就导致这种路更容易拥堵。而且，因为修大路会导致很多小路给大路让行，在小路上面开很难受。&lt;/li&gt;
  也因为这个思路，主路一旦堵了之后，很多排队上主路的车，会继续把辅路也堵住。然后往那些方向走的路就彻底都废掉了。
&lt;/ol&gt;

&lt;p&gt;上面是我觉得几个大路不好的地方。我 6 月份去上海，发现很喜欢上海的路。另外当时觉得上海好像比北京小多了。我是住在静安寺附近，去了田子坊，人民公园，外滩一路玩，发现骑摩拜就可以。&lt;/p&gt;

&lt;p&gt;上海的路大都有树荫，骑车很舒服。自行车道也都有，另外很多的单行线。和香港的路有点类似。不知道像北京这么大的城市，是不是也适合这样的设计。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Bitcoin</title>
      <link>https://wdicc.com/bitcoin/</link>
      <pubDate>Sun, 25 Mar 2018 20:10:44 +0800</pubDate>
      
      <guid>https://wdicc.com/bitcoin/</guid>
      <description>&lt;p&gt;比特币上万刀一个之后，简直已经没人不知道这个东西了。有的东西只要号称要搞比特币，股票就得涨 30%。我简单讲讲我的理解。&lt;/p&gt;

&lt;ul&gt;
比特币相关概念，有两个重要的要点。
&lt;li&gt;区块链&lt;/li&gt;
&lt;li&gt;去中心化&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;区块链&#34;&gt;区块链&lt;/h2&gt;

&lt;p&gt;大家都知道区块链是一个账本。普通的账本，比如银行存折，每笔交易都会记录本次交易的金额，也会记录操作之后的余额。这样多次交易之后，你也无法只修改其中一条记录，因为一旦修改，和这条记录之后的记录就对不上了。但是其实抛开存折这回事的话，在你的记录中间插入一些记录是没有人会发现的。不过我们因为有存折，存折上面一行记录一条记录，中间也没法插入其他的。但是目前存折其实用的人不多了。&lt;/p&gt;

&lt;p&gt;区块链的特点是把一些数据以链条一样的形式串起来。不过和链条有区别的地方是，链条每个节点是相同的，其实切断链条，取掉一个节点，然后接上，看着并没有什么不同。但是区块链任何一个节点都是不同的，去掉一个，后面的就无法连接起来了。因为每一个节点都是唯一的，且每一个节点都包含了他上一个节点的信息。某一个节点丢失或者被修改，那下一个节点保存的这个节点的信息和实际情况就对不上了。&lt;/p&gt;

&lt;p&gt;这样的一个链条下来，能达到防止中间某条记录被篡改，保证了数据的可靠性。&lt;/p&gt;

&lt;h2 id=&#34;去中心化&#34;&gt;去中心化&lt;/h2&gt;

&lt;p&gt;我们的账本，交易记录，大多是存放在银行的。银行开放了一些接口可以让你查账。但是实际上如果银行如果记录了一笔你认为错误的记录，你很难提供一个方法来证明银行出错了。这个就是中心化的方式存在的问题。当然，现实环境里面，银行也不会主动去做损坏自己名誉的事情，比如做假账错账。银行也会想办法防止自己内部的员工因为某些自己的目的来作恶，比如系统会记录各种审计记录，系统开发人员和使用人员权限分离，使用的时候需要授权鉴权等，这些都是防止银行自己出错的措施。&lt;/p&gt;

&lt;p&gt;去中心化，就是把银行这个节点拿掉，所有参与记账的人员（就是旷工）都共享一份账本。每个人都可以验证账本数据的正确性，大家互相不信任，通过博弈来实现这个账本的记录和传递。&lt;/p&gt;

&lt;p&gt;因为去中心化，大家数据同步是需要时间的，那么实际上一个账本的记录走向是会分叉的，一个博弈是大家都会挑选长的分支走。因为如果其他旷工不选短的，那么他自己选短的链条对他没有任何好处，他将得不到自己的挖矿奖励。所以旷工都会保证自己确认的交易都是没问题的。那么整个网络才是一个可信的，可持续的。&lt;/p&gt;

&lt;p&gt;如果是有大量的旷工（算力）联合起来了，那么其实他们就可以控制链条走向了。现在很多时候挖矿是加入了矿池，走向可能是会被矿池控制的。&lt;/p&gt;

&lt;p&gt;目前很多的公司都搞区块链，基本都不讲如何实现去中心化，如果没有去中心化，那还是一个大公司记录的话，实际上只是是用了一部分比特币的概念。没有去中心化思维的区块链就是耍流氓，千万别信。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>BJ Chinaunicom Iptv</title>
      <link>https://wdicc.com/bj-chinaunicom-iptv/</link>
      <pubDate>Sun, 25 Mar 2018 09:21:39 +0800</pubDate>
      
      <guid>https://wdicc.com/bj-chinaunicom-iptv/</guid>
      <description>&lt;p&gt;刚入住现在的房子的时候，只有朝阳有线，当时还没有高清台，机顶盒也很烂。后来大家争取来了歌华有线，好了很多。再之后，我买了华为盒子之后，发现有线电视简直就是情怀了，很少开了，都是在线看视频。尤其后来装了一个 HDP 直播之后，电视节目也可以看了，就更少开有线了。就去把有线盒子给退了。&lt;/p&gt;

&lt;p&gt;有段时间岳母在北京住着，离不开有线，HDP 直播很不稳定，节目有时候还打不开什么的，岳母老抱怨。后来想起来，装了北京联通宽带好像会送一个 iptv 的盒子，可以看电视节目。就联系了一下联通，给过来装了一个盒子。&lt;/p&gt;

&lt;p&gt;这个盒子只能直接接到光猫的 lan4 口，我的上网的路由器是接在 lan1 口的。盒子虽然支持无线，但是不能直接连我 lan1 口的路由器。这个盒子有自带的遥控器，不好用，并且系统里面会诱导你用点播什么的，不是很爽。前段时间看到一个水木的&lt;a href=&#34;http://www.newsmth.net/bbscon.php?bid=1050&amp;amp;id=757772&amp;amp;ftype=3&amp;amp;num=3435&#34; title=&#34;帖子讲折腾 iptv 的&#34;&gt;帖子讲折腾 iptv 的&lt;/a&gt; ，自己想尝试在任意设备看，就了解了一下。&lt;/p&gt;

&lt;p&gt;光猫有的带路由功能，可以直接光猫拨号，以及可以登录后台修改网络结构。有的不带，等于啥功能都没有。IPTV 和通常的上网通道在猫里面是隔离的，不同的 vlan 走不同的网络。所以这也是为什么盒子只能接 lan4，而且这个 lan4 口并不能正常的访问我们的互联网，限制了只能访问那个 iptv 运转需要的网络。而 lan1 可以访问互联网，但是不能访问 iptv 的网络。我家的电视和光猫分别在客厅的两个面对的墙，因为盒子只能直连光猫，那光猫到盒子，盒子到电视都必须是有线，经过客厅线就没法走了。类似下面这样的。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;光猫 lan4 --- 网线 ---&amp;gt; iptv 盒子 --- HDMI ---&amp;gt; 电视
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;后来找到了一个通过电力猫解决的办法。买一对就可以了。类似下面这样。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;光猫 lan4 -- 网线 --&amp;gt; 电力猫1  ........电网..... 电力猫2 ---- 网线 ---&amp;gt;  iptv 盒子 ---- HDMI ---&amp;gt; 电视
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这样基本就可以了。但是那个盒子用起来不爽，所以打算折腾一下。按照那个帖子我试了，我这无法配置光猫，无法控制光猫的 ip 段。这样那个方案似乎就没法用了。后来又找了一些方案，比如&lt;a href=&#34;https://github.com/phorcys/merlin-BJ-Unicomm-IPTV-scripts&#34; title=&#34;这个方案&#34;&gt;这个方案&lt;/a&gt;可以单路由搞这个事情，但是我发现也有问题，里面需要知道光猫里面的 vlan 划分，我这没法知道，也没法弄了。&lt;/p&gt;

&lt;p&gt;后来发现了&lt;a href=&#34;http://www.newsmth.net/bbscon.php?bid=1050&amp;amp;id=760517&#34; title=&#34;另外一个思路&#34;&gt;另外一个思路&lt;/a&gt;，解决了我的问题。线路连接思路大概如下。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;光猫 lan1 -- 主路由 WAN
光猫 lan4 -- 辅路由 WAN
辅路由 LAN（任意一个口） --- 主路由 LAN（任意一个口）
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后主路由就以前的设置就可以，假设主路由的 LAN 的网段是 192.168.8.x。辅路由需要设置几个地方。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;辅路由 LAN 关闭 DHCP。辅路由 LAN 部分 ip 比如设置为 192.168.8.4 (数值可以自己定，不要和其他设备 ip 冲突了)。&lt;/li&gt;
&lt;li&gt;辅路由 LAN 里面设置 IPTV 的 Udpxy 端口比如 8012。&lt;/li&gt;
&lt;li&gt;辅路由 WAN 设置为通过 DHCP 自动获取 ip。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;这个时候，连接到主路由的设备应该就可以通过访问 192.168.8.4 来访问到辅路由的配置界面了。到&lt;a href=&#34;https://opengg.github.io/bj-unicom-iptv/&#34; title=&#34;这里&#34;&gt;这里&lt;/a&gt; udpxy address 输入 192.168.8.4:8012 生成一个 m3u 列表，就可以在连接到主路由的设备里面，通过各种支持的软件里面看了。&lt;/p&gt;

&lt;p&gt;如果还想使用 iptv 看，可以在 iptv 的无线设置里面连接辅路由的无线就可以。&lt;/p&gt;

&lt;p&gt;这个方案巧妙的使用了路由器自带的交换机功能，把主路由和辅路由放到了一个 LAN 里面。虽然多了一个路由器，但是节省了电力猫，iptv 盒子，电视的一个 HDMI 口。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Apple Carplay</title>
      <link>https://wdicc.com/apple-carplay/</link>
      <pubDate>Sat, 24 Mar 2018 09:08:47 +0800</pubDate>
      
      <guid>https://wdicc.com/apple-carplay/</guid>
      <description>&lt;p&gt;Carplay 技术苹果老早就搞出来了，一直没有机会体验。最近车上搞了一个 carplay，总结下这段时间的体验。&lt;/p&gt;

&lt;p&gt;手机连上车之后，Carplay 会自动启动，然后其实是会把车的娱乐系统的那个屏幕变成第二个手机屏幕一样。上面会排列一堆支持 Carplay 的 app，只有 app 支持才能在上面用（越狱之后可以解开这个限制，我没试过）。&lt;/p&gt;

&lt;p&gt;Apple 自带的软件，比如 Phone, Messages, Music, Podcasts, Maps 这些都支持。第三方的地图比如 Google maps 高德都不支持，不清楚是不是 Apple 限制的。第三方的音乐软件，比如 Spotify, QQ音乐，网易音乐支持。界面会和手机上面的有点区别，应该是需要特别为 Carplay 做界面。&lt;/p&gt;

&lt;p&gt;Carplay 和 Airplay 很像，就是 app 实际是运行在你手机上面的，比如你启动了 Spotify 的话，这个时候看手机，会发现手机上面也显示的是 Spotify 的界面，手机上面如果按 Home 退出，那 Carplay 的界面上面也会会到 Home。&lt;/p&gt;

&lt;p&gt;苹果自带的 Maps 在国内用的是高德的数据，最近支持了摄像头限速提醒。我用英文系统，可以设置为显示当地的文字，地图上面看到的就是中文，不过语音提示都是英文的，念地名的时候很好笑。在汽车屏幕上面不能不支持手势缩放，只能点那个加减按钮。也不支持我车自带的一个旋钮缩放地图，那个旋钮在车自带的地图里面可以很方便的缩放。苹果地图会自动做一些判断，比如早上上车会提示你是不是要去公司，可以做到点一下就自动设置好导航路线。另外，因为实际上是在手机上面也会同时导航，打开手机界面的话，也能看到，当然手机就不会重复播报提醒的，但是如果你有 apple watch 的话，手表会提醒。快到转向什么的，会振动提醒。&lt;/p&gt;

&lt;p&gt;播客播放的时候，支持调整速度，但是只能是 0.5，1, 1.5 这样，不能调到 0.8，1.3 这样。但是在 APP 里面调整好了会显示。支持快速前进和后退几十秒，和 app 里面操作类似。&lt;/p&gt;

&lt;p&gt;Message 有消息的时候，图标上面会有提醒，点开会自动启动 siri 给你播报，但是播不出来中文，感觉很蠢，而且还不显示内容。。。会提示你是不是要回复，可以通过 siri 回复。&lt;/p&gt;

&lt;p&gt;然后就是，siri 实在太蠢了。我开始的时候，在个人信息里面设置了 Home 和 Work 的地址，然后试了语音说 Navigate to home 或者 Take me to home，结果就给我找到一个东北的地方，不知道是不是音译匹配上了，非常蠢，试了很多次都不行。最后只能点那个提示出来的 Home。（我刚才又试了几次，发现目前可以准确找到 Home 了。。）&lt;/p&gt;

&lt;p&gt;我车上 Carplay 导航和自带的导航不能同时启动，启动一个另外一个导航就会退出。Carplay 不支持车的 HUD 显示，本来想做一个补充的，用车自带的导航在 HUD 显示，Carplay 的导航提示摄像头和限速。不知道其他车是不是也这样。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>React Native compnent reuse</title>
      <link>https://wdicc.com/react-native-compnent-reuse/</link>
      <pubDate>Sat, 24 Mar 2018 08:44:39 +0800</pubDate>
      
      <guid>https://wdicc.com/react-native-compnent-reuse/</guid>
      <description>&lt;p&gt;做功能的时候，一般我们会适当的封装一些组件出来共享，这样好管理和维护，这个大家估计都会这么做。有时候手机上面因为屏幕小，填一些表单的时候，会需要到另外一个页面去维护选择一些内容，那这个页面是页面还是组件呢？&lt;/p&gt;

&lt;p&gt;我总结下来，所有需要填写的页面，都应该按照组件的思维来封。因为他们实际上很可能会被多次复用，一个路径上面可能会出现多次。当然，普通页面也可能会出现多次，出现多次的展示页面如果是相同的内容，那 store 里面用一个按说也没问题，如果是不同的内容，那应该会有一个 id 来区分不同的内容，这个时候 store 里面存一个用这个 id 做 key 的 map 就可以了。&lt;/p&gt;

&lt;p&gt;继续说填写页面。比如我们的新建订单的页面，会有两个入口，一个是全新的，一个是从历史订单复制的。从历史订单复制的，就需要在 store 里面先把已有的数据放一份，再进入新建页面，如果用户点了返回按键，还需要把 store 里面的状态清掉，否则下次进入的时候还会有出来上次的数据。&lt;/p&gt;

&lt;p&gt;如果按照组件的思维封装，那数据入口只有 props，store 里面不会有，就不用考虑清数据的问题。至于返回的数据，根据页面情况，一般是有两个途径，一个是需要把数据返回给上一个页面的，一个是直接把数据通过网络请求发送的。对于第一个，可以通过 callback 方法给上一个页面，对于第二个，通过 action 来做就可以了。&lt;/p&gt;

&lt;p&gt;我们需要把页面里面的数据区分一下 private 数据和 public 数据。对于 private 数据每次使用基本不一样，通过 props 传递进来。而 public 数据基本是相同的，那通过 store 存下来，必要的时候更新就可以了。&lt;/p&gt;

&lt;p&gt;我们使用的是 reac-navigation，使用的时候，可以通过 &lt;code&gt;navigate(&#39;newPage&#39;, {prop1: &#39;prop1 value&#39;, callback: func1})&lt;/code&gt; 这种方法来把数据和 callback 方法传递过去。那个页面处理完毕之后，通过 callback 把数据返回来。这样就不用费力把数据通过 action -&gt; reducer -&gt; selector 传到上一个页面了，并且页面再次使用也不用操心上一次使用的时候的残留数据了，页面被复用也不会互相干扰。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Go Across the Gfw</title>
      <link>https://wdicc.com/go-across-the-gfw/</link>
      <pubDate>Thu, 15 Feb 2018 08:56:03 +0800</pubDate>
      
      <guid>https://wdicc.com/go-across-the-gfw/</guid>
      <description>&lt;p&gt;一直用的是梅林里面自带的方案来处理翻墙，后来想在公司的服务器上面也搞一下这个事情，至少把 Google 等常用站点能翻出去，就研究了一下原理。&lt;/p&gt;

&lt;p&gt;目前墙有两个基本措施需要我们去跨越。1 DNS 污染。 2 数据包解析劫持。3 ip 封禁。&lt;/p&gt;

&lt;p&gt;DNS 污染是通过修改或者限制 DNS 请求的数据，来让用户取到一个错误的 ip 而导致用户不能访问正确的网站的方法。一些比较大的网站都被做了 DNS 污染，比如 Google，youtube，facebook，twitter 等。&lt;/p&gt;

&lt;p&gt;数据包解析是指在出国的核心路由上面，分析用户要访问的网站和发送的数据，然后发现问题之后，从中间给用户和网站发送 rst 数据包，让双方断开连接的一种方法。这样就算是用户通过指定 host 等方法避开了 DNS 污染，也可以进一步阻止请求。这种方法对于 https 的请求应该是没有效果的。所以有时候可以通过指定 host 的方法访问到 google。&lt;/p&gt;

&lt;p&gt;对于上面的避开措施，第三种方法就起作用了，就是直接封禁 ip。这样就算指定了 host 也不能访问。&lt;/p&gt;

&lt;p&gt;如果想要翻墙，就需要避开上面这三种封禁的方法。我这里列了一些方式，https://wdicc.com/across-the-great-wall-we-can-reach-every-corner-in-the-world/ 各有利弊。这里想讲的是梅林大致的逻辑。&lt;/p&gt;

&lt;p&gt;最主要的一个思路是使用 iptables 把一些包发给一些支持透明代理的软件，例如 &lt;code&gt;ss-redir&lt;/code&gt; 或者 &lt;code&gt;v2ray&lt;/code&gt; 的 &lt;code&gt;dokodemo-door&lt;/code&gt; 协议的端口。这些软件会自动把数据请求通过代理请求到之后，返回给用户。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;-A PREROUTING -p tcp -j REDIRECT --to-ports 1080

-A PREROUTING -p tcp -m multiport --dports 443 dst -j REDIRECT --to-ports 1080
-A PREROUTING -p tcp -m multiport --dports 80 dst -j REDIRECT --to-ports 1080
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;第一句是把所有请求都转发到了 1080 端口，这样就是全部请求都走代理。第二三句是把所有 443 和 80 端口的请求都转发到了 1080 这个代理端口。如果只是想要某些网站走代理呢？那一个办法是在这个语句里面指定 &lt;code&gt;--dest=12.34.56.78&lt;/code&gt; 指定目标 ip，但是这样一来有的网站 ip 很多且会变化，这样就有点累了。&lt;/p&gt;

&lt;p&gt;iptables 支持和 ipset 配合来做数据包的过滤，而 dnsmasq 支持自动添加特定的 ipset 条目，这两个结合就完美了。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;server=/.google.com/208.67.222.222#443
server=/.google.com.hk/208.67.222.222#443
server=/.gstatic.com/208.67.222.222#443
server=/.ggpht.com/208.67.222.222#443
server=/.googleusercontent.com/208.67.222.222#443
server=/.appspot.com/208.67.222.222#443
server=/.googlecode.com/208.67.222.222#443
server=/.googleapis.com/208.67.222.222#443
server=/.gmail.com/208.67.222.222#443
server=/.ytimg.com/208.67.222.222#443

ipset=/.google.com/setmefree
ipset=/.google.com.hk/setmefree
ipset=/.gstatic.com/setmefree
ipset=/.ggpht.com/setmefree
ipset=/.googleusercontent.com/setmefree
ipset=/.appspot.com/setmefree
ipset=/.googlecode.com/setmefree
ipset=/.googleapis.com/setmefree
ipset=/.gmail.com/setmefree
ipset=/.ytimg.com/setmefree
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上面是 dnsmasq 的配置，前面的 server 部分，对于指定域名使用特定的 DNS 服务器，用来防污染。ipset 部分，把这些域名解析的结果，提交给 ipset 的 setmefree 这个 set，然后方便配合 iptables 来做过滤。&lt;/p&gt;

&lt;p&gt;dnsmasq 做了上面的配置之后，查询一下列表里面的 DNS，然后通过 &lt;code&gt;ipset list setmefree&lt;/code&gt; 可以看到里面会有一些 ip。&lt;/p&gt;

&lt;p&gt;然后是修改 iptables，增加 ipset 的规则过滤。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;-A PREROUTING -p tcp -m multiport --dports 443 -m set --match-set setmefree dst -j REDIRECT --to-ports 1080
-A PREROUTING -p tcp -m multiport --dports 80 -m set --match-set setmefree dst -j REDIRECT --to-ports 1080
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这样，对于列到 dnsmasq 那个里面的 ipset 部分的域名，全部会走代理了。对于其他地址的请求，不会有任何影响。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>GeoHash</title>
      <link>https://wdicc.com/geohash/</link>
      <pubDate>Thu, 25 Jan 2018 11:00:57 +0800</pubDate>
      
      <guid>https://wdicc.com/geohash/</guid>
      <description>&lt;p&gt;我们的应用里面，会有需要用户提交一些坐标点，然后还需要判断这些坐标点和其他坐标点是不是重合或者距离在一定范围内（例如 200M）。&lt;/p&gt;

&lt;p&gt;这个需求最简单的做法就是用户提交的时候，循环和所有需要判断的点比较一下就可以了，但是如果数据量比较大的情况下，这个消耗还是很可观的，因为无法提前索引。所以我们就想，是不是有更好的思路呢？&lt;/p&gt;

&lt;p&gt;一个比较简单的思路是，每次坐标点存储的时候都 hash 一下，一定范围内的，都 hash 到同一个值，这样比较的时候只需要做等于判断就可以了，这个可以索引。那么最简单的做法就是参考 &lt;a href=&#34;https://en.wikipedia.org/wiki/Decimal_degrees&#34; title=&#34;https://en.wikipedia.org/wiki/Decimal_degrees&#34;&gt;https://en.wikipedia.org/wiki/Decimal_degrees&lt;/a&gt; 把坐标点的经纬度按照精度 round，例如 &lt;code&gt;123.4567890123&lt;/code&gt; 和 &lt;code&gt;123.4567894562&lt;/code&gt; 都 round 为 &lt;code&gt;123.456789&lt;/code&gt; ，但是这么做无法精确到想要的那个 200M。&lt;/p&gt;

&lt;p&gt;然后依据上面的思路，和四舍五入的思路，我琢磨是不是可以弄一个 x 舍 x+1 入这么个逻辑，把坐标轴分为 x 等份。然后我就可以通过自己定义 x 来做到想要的精度了（通过经纬度来定义实际距离应该本身就是有误差的，这个和把球面坐标系投影到平面坐标系的方法有关系）。&lt;/p&gt;

&lt;p&gt;按照上面 x 舍 x+1 入的逻辑，实际上是把平面分成了 n 个正方形，同一个正方形里面的，可以认为他们是符合条件的。但是，很明显在相邻的区域里面的，也有可能有符合条件的点，比如两个点分别在区域的这边和另一边。这些点怎么找到呢？&lt;/p&gt;

&lt;p&gt;有一个思路是先找到点所在的区域，然后把周围 8 个区域的点也找出来，这个查找是可以索引的，是 O(1) 的，然后再循环的和找出来的点单个做比较算距离，这个过程是 O(n)，但是 n 小了很多。&lt;/p&gt;

&lt;p&gt;上面是我山寨的一个思路，找了一下发现已经有了，就是 geohash，可以看参考链接，里面比较详细了。&lt;/p&gt;

&lt;p&gt;参考链接&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Geohash&#34; title=&#34;Geohash&#34;&gt;Geohash&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.cnblogs.com/LBSer/p/3310455.html&#34; title=&#34;http://www.cnblogs.com/LBSer/p/3310455.html&#34;&gt;http://www.cnblogs.com/LBSer/p/3310455.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>SafeAreaView in RN</title>
      <link>https://wdicc.com/safeareaview-in-rn/</link>
      <pubDate>Thu, 25 Jan 2018 10:36:51 +0800</pubDate>
      
      <guid>https://wdicc.com/safeareaview-in-rn/</guid>
      <description>&lt;p&gt;iPhone X 整出来一个刘海和底部的下巴，app 需要做特殊处理，否则可能会顶部把内容显示到被刘海挡住的那部分里面，下面呢会显示到那个手势控制的里面，导致一些按钮不能点击。&lt;/p&gt;

&lt;p&gt;之前我们用的是 &lt;a href=&#34;https://www.npmjs.com/package/react-native-iphone-x-helper&#34; title=&#34;https://www.npmjs.com/package/react-native-iphone-x-helper&#34;&gt;https://www.npmjs.com/package/react-native-iphone-x-helper&lt;/a&gt; 自己计算的。前几天升级 RN 翻 0.52 的 release Note 发现 RN 0.50 新增了一个叫做 &lt;code&gt;SafeAreaView&lt;/code&gt; 的 view 来解决这个问题。&lt;/p&gt;

&lt;p&gt;用法也很简单，把你的内容包含到这里面就可以了。有下面两个方法。&lt;/p&gt;

&lt;p&gt;不用 SafeAreaView 来处理底部，比如显示的是一个列表什么的，底部不固定的，用户如果有需要点按会往上滚动出底部的手势区域然后点击。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;SafeAreaView /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;使用 SafeAreaView 处理底部，比如底部是一排固定按钮，例如微信那样的，这个时候需要把底部区域让出来。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;SafeAreaView&amp;gt;
  ....
&amp;lt;/SafeAreaView&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;SafeAreaView 本身支持设置背景色，但是不支持顶部和底部设置不同的颜色，思路是可以给 SafeAreaView 下面放两个 view 分别设置他们的颜色。代码我贴到参考链接 2 里面了。&lt;/p&gt;

&lt;p&gt;参考链接：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/facebook/react-native/commit/ad4b124&#34; title=&#34;https://github.com/facebook/react-native/commit/ad4b124&#34;&gt;https://github.com/facebook/react-native/commit/ad4b124&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/facebook/react-native/commit/983b05441d3d23809b924de2e4bf96a55c47428d&#34; title=&#34;https://github.com/facebook/react-native/commit/983b05441d3d23809b924de2e4bf96a55c47428d&#34;&gt;https://github.com/facebook/react-native/commit/983b05441d3d23809b924de2e4bf96a55c47428d&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Best Practice for React-Native and Redux</title>
      <link>https://wdicc.com/best-practice-for-react-native-redux/</link>
      <pubDate>Sun, 26 Nov 2017 09:19:11 +0800</pubDate>
      
      <guid>https://wdicc.com/best-practice-for-react-native-redux/</guid>
      <description>&lt;p&gt;从 6 月到现在，在 RN 上面摸爬滚打了一段时间了，目前总算找到了一个适合我们自我感觉还可以的开发模式。&lt;/p&gt;

&lt;p&gt;一开始，我们使用的是传统的 React 的模式，然后一个 app 页面一个文件，通过 StackNavigator 组合到一起。这么做在我们的第一个 app 里面没觉得有什么问题，每个页面维护自己的数据，页面之间需要数据共享或者通讯的时候（比如从 list 到详情页面的时候，详情里面有一个改变状态的按钮，状态改变之后希望 list 的状态也跟着变化，这样用户返回之后能看到正确的数据）有 2 个方式。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;通过 DeviceEventEmitter。&lt;/li&gt;
  需要数据的页面订阅，然后在其他页面 emit event 之后前面的页面就可以收到。这个时候可以只通知改变的数据的字段，前一个页面直接去修改，这样可以避免重新刷新页面。也可以发一个简单的通知让其他页面去自己获取数据。
&lt;/ul&gt;

&lt;ul&gt;
&lt;li&gt;通过 navigator 提供的 params 属性。&lt;/li&gt;
  StatckNavigator 提供了一个 params 属性。就是 &lt;code&gt;this.props.navigation.state.params&lt;/code&gt; ，可以通过 setParams 来改变，或者通过类似 &lt;code&gt;this.props.navigation.navigate(&#39;Login&#39;, {goBackToHome: true})&lt;/code&gt; 的方式给，那个 &lt;code&gt;goBackToHome&lt;/code&gt; 将来就会在 params 里面。
&lt;/ul&gt;

&lt;p&gt;直到我们开始做第二个 app。&lt;/p&gt;

&lt;p&gt;第二个 app 是一个单页面 app，登录之后就只有一个页面了，有一个大地图，有左侧 sidebar，sidebar 里面的按钮点击还会出其他页面。这个肯定不能按照我们前面的思路来做了，我们按照组件，拆分了不同的文件，然后组合起来。这个时候更加会需要页面之间的通讯，并且这个时候可选项只有第一个了 &lt;code&gt;DeviceEventEmitter&lt;/code&gt; ，因为都没有 navigate 什么事情。&lt;/p&gt;

&lt;p&gt;这个时候就发现一个问题，event 太多了，开始有点混乱了。emit event 之后，慢慢会发现不知道哪里有订阅，不好管理。这个 app 做完之后，就仔细研究了一下 redux。&lt;/p&gt;

&lt;p&gt;其实写第一个 app 的时候就知道 redux，但是很多概念看的云里雾里的，当时在 react 还没有吃透的情况下，根本没有能力把 redux 搞好。所以当时放弃了 redux。&lt;/p&gt;

&lt;p&gt;了解 redux 之后，感觉这个东西是我们的药。统一的 state 管理，这不就不用考虑状态传递了么？所以一门心思开始研究 redux。刚好我们第一个 app 需要全新改版，我们就借机把我们的第一个 app 也重构到了 redux 实现。整体过程还是蛮舒服的，自己也总结了几条我们自己的使用的思路。&lt;/p&gt;

&lt;h3 id=&#34;目录结构安排&#34;&gt;目录结构安排&lt;/h3&gt;

&lt;p&gt;先大概看看我们 app 的目录结构。我们把所有的 js 文件都放到了 app 目录下面。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;app
ios
android
index.js
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后 app 目录下面，分了 &lt;code&gt;actions&lt;/code&gt; ， &lt;code&gt;reducers&lt;/code&gt; ， &lt;code&gt;sagas&lt;/code&gt; ， &lt;code&gt;selector&lt;/code&gt; 几个目录。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;actions
images
index.js
reducers
sagas
screens
selectors
utility
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;actions 里面放的是 mapDispatchToProps 这个逻辑对应的东西。&lt;/li&gt;
&lt;li&gt;reducers 里面放的是 reducers。&lt;/li&gt;
&lt;li&gt;sagas 里面放的是所有网络请求相关的 actions 的处理逻辑。&lt;/li&gt;
&lt;li&gt;seelctor 里面放的是 mapStateToProps 这个逻辑对应的东西。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;每个目录里面也都有一个自己的 index.js 把本目录里面的内容组合起来。通过最外面的 index.js 把这几个目录的逻辑组合起来。&lt;/p&gt;

&lt;h3 id=&#34;给页面设计一个基类&#34;&gt;给页面设计一个基类&lt;/h3&gt;

&lt;p&gt;这样会比较方便你去做一些所有页面都需要做的事情。&lt;/p&gt;

&lt;h3 id=&#34;一个-app-一个统一的-store&#34;&gt;一个 app 一个统一的 store&lt;/h3&gt;

&lt;p&gt;我们 app 还不大，所以这么设计也还好，如果页面比较复杂，我看也有组件使用自己的 store 的例子，这个还没有经验。这么做唯一一个问题就是，那个 store 里面的数据一直都在，多少会占用一些内存。不过我是觉得没啥了，其实这点内存占用不算啥。&lt;/p&gt;

&lt;h3 id=&#34;store-设计和页面无关&#34;&gt;store 设计和页面无关&lt;/h3&gt;

&lt;p&gt;Store 参考了一个文章统一设计，和页面无关。比如我们设计了 user, orders, orderDetail 这些 state，数据所有页面共享。否则如果按照页面来划分的话，某些页面之间如果有用到共享数据就要么多复制一份，那有点浪费了，要么就是会有点乱。&lt;/p&gt;

&lt;h3 id=&#34;每个页面都使用自己的-props&#34;&gt;每个页面都使用自己的 props&lt;/h3&gt;

&lt;p&gt;不在页面间交叉使用 props ，这样不会乱。并且因为我们是一个统一的 store，所以其实每次 props 变化，所有页面都会 render。这个我使用下面的一个思路来解决了。&lt;/p&gt;

&lt;h3 id=&#34;shouldcomponentupdate&#34;&gt;shouldComponentUpdate&lt;/h3&gt;

&lt;p&gt;这个就是在页面的基类里面，通过比较判断本页面的 props 是否有变化来解决前面那个 render 问题。&lt;/p&gt;

&lt;h3 id=&#34;使用-reselect&#34;&gt;使用 reselect&lt;/h3&gt;

&lt;p&gt;因为只要 state 发生变化 redux 就会调用 mapStateToProps 来计算 props，这个计算有一些消耗，毕竟一般也就其中一个页面的 props 需要计算。我们用这个 reselect 解决这个问题，一个页面的 props 需要的 state 没变化的时候，reselect 就可以把 cache 的数据直接返回就好了。&lt;/p&gt;

&lt;h3 id=&#34;适当使用页面的-state&#34;&gt;适当使用页面的 state&lt;/h3&gt;

&lt;p&gt;redux 的理念是所有页面的 state 都放到了 store 里面，你不需要做 setState 动作了。但是实际上有些时候适当使用 state 会让你的开发更加方便。比如表单验证，用户输入数据之后点击提交 ，如果通过发送 action 改变 state 然后再通过 selector 返回页面，那就有点太费劲了。而直接通过 setState 设定页面 state，然后在提交表单的时候读出来做验证就简单多了。&lt;/p&gt;

&lt;p&gt;有时候页面的一些 state 是和 props 有关系的，这个时候可以使用 &lt;code&gt;componentWillReceiveProps(nextProps)&lt;/code&gt; 来判定，然后和 state 同步。&lt;/p&gt;

&lt;h3 id=&#34;android-的返回按钮处理&#34;&gt;Android 的返回按钮处理&lt;/h3&gt;

&lt;p&gt;android 有一个实体的返回按钮，StackNavigator 给出的&lt;a href=&#34;https://reactnavigation.org/docs/guides/redux#Handling-the-Hardware-Back-Button-in-Android&#34; title=&#34;方案&#34;&gt;方案&lt;/a&gt;是监听一个 &lt;code&gt;hardwareBackPress&lt;/code&gt; 事件，然后 &lt;code&gt;dispatch(NavigationActions.back())&lt;/code&gt; ，但是有一个问题是，有时候我们返回的时候还需要做一些自己的动作。比如清理 store 的数据，或者判断一下往哪里返什么的，比如用户刚提交了订单之后，给了一个按钮可以看订单详情，这个时候从详情返回就希望直接到首页，不要又返回新建订单的页面。&lt;/p&gt;

&lt;p&gt;我们通过下面的思路做的&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;    onBackPress = () =&amp;gt; {
        const { dispatch, nav } = this.props;

        if (nav.index === 0) {
            return false;
        }
        const {routes} = nav;
        const {params} = routes[routes.length-1]

        if(params &amp;amp;&amp;amp; params.goBack) {
            params.goBack();
        } else {
            dispatch(NavigationActions.back());
        }
        return true;
    };
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后在页面的基类里面&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;    constructor(props) {
        super(props);
        if (this.goBack)
            this.props.navigation.setParams({ goBack: ()=&amp;gt;this.goBack() })
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后页面里面如果有自己的特殊逻辑，那就实现一个 &lt;code&gt;goBack&lt;/code&gt; 方法就好了。&lt;/p&gt;

&lt;h3 id=&#34;表单的弹出页面-不一定需要使用-store&#34;&gt;表单的弹出页面，不一定需要使用 store&lt;/h3&gt;

&lt;p&gt;比如一个下单页面，需要填联系人信息，这个时候我们一般会到一个联系人的页面来选择联系人。这个时候在这个页面选择的联系人，如何传递给上一个页面呢？有两个类型的方法。&lt;/p&gt;

&lt;p&gt;第一个方法自然就是 redux 的方法，在选择页面点确定的时候，触发 action 通过 reducer 设置这个页面的 store，然后通过 selector 修改上一个页面的 props，这样就达到了传递的目的。&lt;/p&gt;

&lt;p&gt;第二个方法是在新页面打开的时候，通过 navigater 传一个 callback 过去，那边选择好的时候，调用这个回调方法把数据传回来。&lt;/p&gt;

&lt;p&gt;第一个方法贴合 redux 的做法，但是存在一个问题，如果这个新的选择页面在多个地方出现，那么就需要有一个区分，当前这个选择是给哪个地方服务的(因为必须得在 redux 的 store 里面做好区分，否则两个页面总是相同的状态)。另外还有一个数据清理的问题，否则下次在别的页面打开这个页面，会有上次的数据残留。&lt;/p&gt;

&lt;p&gt;第二个方法土一点，但是没有上面的问题。不过要注意的是，如果新的页面有网络请求，那这个时候还需要和 saga thunk 这些关联，那么就总是会走到 redux 的 store，所以这个方法就不适用了。&lt;/p&gt;

&lt;h3 id=&#34;参考文章&#34;&gt;参考文章&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://wdicc.com/11-mistakes-during-use-react-native/&#34; title=&#34;11-mistakes-during-use-react-native&#34;&gt;11-mistakes-during-use-react-native&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Podcasts 推荐</title>
      <link>https://wdicc.com/podcasts/</link>
      <pubDate>Sat, 25 Nov 2017 11:38:37 +0800</pubDate>
      
      <guid>https://wdicc.com/podcasts/</guid>
      <description>

&lt;p&gt;也不知道从什么时候开始听播客的，现在几乎是 podcast 的重度用户。听播客比看东西省力，以前是上下班的时候想休息一下眼睛就听播客，现在每天开车上下班没法看东西，所以听的更多了。推荐一些我自己听的，下面排序是随机的，和推荐度无关。&lt;/p&gt;

&lt;h2 id=&#34;中文播客&#34;&gt;中文播客&lt;/h2&gt;

&lt;h3 id=&#34;迟早更新&#34;&gt;迟早更新&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://www.weareones.com/2&#34;&gt;http://www.weareones.com/2&lt;/a&gt; 这个是个夫妻档，主播任宁刚 30 岁，但是知识面还是挺广的，播客里面的内容很广，但是多与科技有些关系。主播枪枪和他是夫妻，挺有意思的。更新比较快，基本每周都有。&lt;/p&gt;

&lt;h3 id=&#34;teahour&#34;&gt;Teahour&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://teahour.fm/&#34;&gt;http://teahour.fm/&lt;/a&gt; 这个播客经常会请一些比较厉害的开发者和创始人来做访谈，谈的内容也基本是在科技圈。不过最近更新比较慢，前几天刚更新了一期，距上一期已经是 1 年左右了。但是听一听历史的 ep 有些也不过时。&lt;/p&gt;

&lt;h3 id=&#34;代码时间&#34;&gt;代码时间&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://codetimecn.com/&#34;&gt;http://codetimecn.com/&lt;/a&gt; 这个播客也是请人来做访谈，不过聊的感觉有时候有点尴尬，也不知道为啥有这个感觉。也是很久更新一期，历史的也可以听听。&lt;/p&gt;

&lt;h3 id=&#34;checked&#34;&gt;checked&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://checked.fm/&#34;&gt;http://checked.fm/&lt;/a&gt; 这个播客有三个主播，2 个少数派的雇员，还有个妹子。都是年轻人，都挺有意思的。会讨论各种科技话题，科技热点事件，APP 使用经验等，更新也比较及时。&lt;/p&gt;

&lt;h3 id=&#34;机核网&#34;&gt;机核网&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://www.g-cores.com/categories/9&#34;&gt;https://www.g-cores.com/categories/9&lt;/a&gt; 一个游戏播客。机核网本身是个游戏咨询站。播客内容就是各种游戏相关的东西。我之前听过《血缘》和《黑魂》相关的。不过因为我游戏玩的其实没那么多，所以他们谈的很多游戏没玩过，后来也就不听了。&lt;/p&gt;

&lt;h3 id=&#34;比特新声&#34;&gt;比特新声&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://banlan.show/bitvoice&#34;&gt;https://banlan.show/bitvoice&lt;/a&gt; 主播海龙是出国培训老师，主播有才是一个 soho 的程序员。一个文科一个理科，思想的一些碰撞还挺有意思的。谈论的话题基本是科技圈的居多，但是内容也比较广泛。&lt;/p&gt;

&lt;h3 id=&#34;ux-coffee-设计咖&#34;&gt;UX Coffee 设计咖&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://uxcoffee.co/&#34;&gt;http://uxcoffee.co/&lt;/a&gt; 主要和谈论一些设计和用户体验相关的内容。主播应该在国外，会请一些在国外的华语开发者来访谈。&lt;/p&gt;

&lt;h3 id=&#34;i-o-调频&#34;&gt;「I/O」调频&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://dailyio.net/&#34;&gt;http://dailyio.net/&lt;/a&gt; 更新不多，貌似是一个人的独白，感觉听的不多，所以我也不记得大致内容了。&lt;/p&gt;

&lt;h3 id=&#34;内核恐慌&#34;&gt;内核恐慌&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://kernelpanic.fm/&#34;&gt;https://kernelpanic.fm/&lt;/a&gt; 科技播客，内容还挺好的，可惜目前更新很少。最近几期《字谈字串》都是 4 个人串台。Rio 和吴涛其实还参加了近期的《迟早更新》，但是他们居然不更新自己的播客，发指。&lt;/p&gt;

&lt;h3 id=&#34;it-公论&#34;&gt;IT 公论&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://itgonglun.com/&#34;&gt;https://itgonglun.com/&lt;/a&gt; 李如一和 Rio 主持。李如一好像挺有名的，不过我不是很熟悉。也是科技相关的播客。&lt;/p&gt;

&lt;h3 id=&#34;两个-it-大叔&#34;&gt;两个 iT 大叔&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://podcast.lengqidong.com/podcast.xml&#34;&gt;http://podcast.lengqidong.com/podcast.xml&lt;/a&gt; 没有找到他们的网站，只有一个 rss 地址了。这个是两个男主播，聊的内容大都和科技相关。&lt;/p&gt;

&lt;h3 id=&#34;etw&#34;&gt;ETW&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://www.etw.fm/&#34;&gt;http://www.etw.fm/&lt;/a&gt; 这个是两个驻美记者做的播客，两个妹子。聊各种热点话题，还是挺有意思的。&lt;/p&gt;

&lt;h2 id=&#34;英文播客&#34;&gt;英文播客&lt;/h2&gt;

&lt;p&gt;英文播客我基本只能听英语学习类的，其他的语速和发音会导致有不少听不懂。&lt;/p&gt;

&lt;h3 id=&#34;all-ears-english&#34;&gt;All Ears English&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://www.allearsenglish.com/&#34;&gt;https://www.allearsenglish.com/&lt;/a&gt; 两个美国妹子，语速没有调慢，聊一些日常的用语什么的，感觉还是比较好懂的。&lt;/p&gt;

&lt;h3 id=&#34;潘吉jenny告诉你-学英语聊美国-开言英语&#34;&gt;潘吉Jenny告诉你|学英语聊美国|开言英语&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://openlanguage.com/library/learn-english/9/culture-show&#34;&gt;https://openlanguage.com/library/learn-english/9/culture-show&lt;/a&gt; 这个是一个中国人一个外国人搭配的播客。里面中文说的比较多，会讲解一些常用的词汇用语什么的。&lt;/p&gt;

&lt;h3 id=&#34;culips-english&#34;&gt;Culips English&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://esl.culips.com/&#34;&gt;https://esl.culips.com/&lt;/a&gt; 主播都是外国人，语速应该是调整过感觉比较慢。有词汇讲解，也有普通的聊天。&lt;/p&gt;

&lt;h3 id=&#34;the-english-we-speak&#34;&gt;The English We Speak&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://www.bbc.co.uk/programmes/p02pc9zn&#34;&gt;http://www.bbc.co.uk/programmes/p02pc9zn&lt;/a&gt; 主播是英国口音，内容都比较短，每次基本就是一二个词。&lt;/p&gt;

&lt;h3 id=&#34;eslpod&#34;&gt;ESLPod&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://www.eslpod.com/&#34;&gt;https://www.eslpod.com/&lt;/a&gt; 这个是我很早以前听过的，目前这个没有免费的更新了，必须付费，年费还不低。不过这个是我听过觉得比较好的，会仔细用英文解释对话里面的单词。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>草泥马</title>
      <link>https://wdicc.com/freedom/</link>
      <pubDate>Mon, 06 Nov 2017 18:47:41 +0800</pubDate>
      
      <guid>https://wdicc.com/freedom/</guid>
      <description>&lt;p&gt;我搜了一下我的帖子，GFW 这个 tag 最早在我的 「2006/12/01 咱也玩玩lilina」 这个帖子里面就出现了。里面提到 Google 有时候会撞墙，会导致 Google reader 也不能访问。我也忘记这个东西最早是什么时候进入我的生活的，从我的 blog 后面可以看到 09 年开始研究一些相关技术，到现在已经 8 年了。&lt;/p&gt;

&lt;p&gt;很多人说百度更懂中文。我从来没觉得，可能因为我中文搜的不多吧，不过就算是中文也更喜欢看 Google 里面的结果。百度里面巨量的重复内容，都是一个帖子被复制了很多次，浪费很多时间翻页之后你还是会发现没有你想要的结果。用 Google 的时候，如果前面 3 页（更多时候，1-2 页足够）还没有你想要的结果，那么要么是这个结果就是少，要么就是你的关键字不对，根据结果里面的一些信息，适当调整自己的关键字。&lt;/p&gt;

&lt;p&gt;因为本身是搞技术的，技术方面，国外的文章水分更少，并且自己也基本能看懂技术相关的英文内容，所以从来都不用百度。国内的各种论坛（也有一些例外的，比如 v2ex，rubychina 等），大量的顶，回复可见内容的帖子，基本没什么意义。不如直接看英文世界里面的情况来的直接。&lt;/p&gt;

&lt;p&gt;那会有一段时间还流行各种草泥马相关的东西，比如草泥马之歌。大家用这种方式自嘲，讽刺。当时总觉得这种东西不符合普世价值并不能长久，笑笑也就好了。这么一翻，就是 8 年。现在还每况愈下，一些稍微活跃一点的还有喝茶的待遇。&lt;/p&gt;

&lt;p&gt;这个帖子前几天就想写了，一忙忘记了，今天补上。我和图拉鼎同学并没有见过面。唯一的近距离接触，是当时他在北京 Canonical 公司的时候，有次要聚会，我和他在 qtalk 上面聊过，不过可惜我最后没参加（这段记忆也比较模糊了，可能会有记错），没有见面。后面更多的就是在微博看他在回到杭州后享受生活了。&lt;/p&gt;

&lt;p&gt;看看他的生活，就是一个普通宅男，聪明热爱生活，经常游荡在杭州的街巷，发现一些别人没注意到或者忽略的事物。写写代码，咖啡馆坐坐，找一个志同道合的朋友聊聊天，再普通不过了。偏偏就是这样的一个人都容不下，神经一点一点变的异常铭感，没有点神经病估计现在也不好当领导了。&lt;/p&gt;

&lt;p&gt;前两年，还有另外一个朋友开发了一款搭建高性能网站使用的服务器软件（和翻墙无关），本来一直在国外工作，回家探亲被限制出境，具体原因不聊了，后来解决了出去了。目前在国外成立的自己的公司，专门发扬自己的软件，也拿到了绿卡。估计以后也没兴趣回来了。&lt;/p&gt;

&lt;p&gt;目前这个形势下，无法预见我们自己哪天不会遇到问题，即使你自己学会了阉割自己，但你怎么知道他们的铭感点在哪里呢？也可能是「就是喜欢看你虽然不喜欢，但是又不得不一起建设社会主义的样子」呢？&lt;/p&gt;

&lt;p&gt;想起来一个大话西游里面大对白了&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;爱一个人需要理由么？&lt;/li&gt;
&lt;li&gt;需要吗？&lt;/li&gt;
&lt;li&gt;不需要吗？&lt;/li&gt;
&lt;li&gt;需要吗？&lt;/li&gt;
&lt;li&gt;不需要吗？&lt;/li&gt;
&lt;li&gt;等你真爱上一个人你就知道了&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;把里面的「爱」替换为「整」（等你真被整的时候就知道了）我感觉还是挺适合的。&lt;/p&gt;

&lt;p&gt;附送 &lt;a href=&#34;https://www.youtube.com/watch?v=01RPek5uAJ4&#34; title=&#34;草泥马之歌&#34;&gt;草泥马之歌&lt;/a&gt; 给有兴趣的。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Why I Am Not at React Native Developer(节译)</title>
      <link>https://wdicc.com/why-i-am-not-at-react-native-developer/</link>
      <pubDate>Thu, 02 Nov 2017 14:00:39 +0800</pubDate>
      
      <guid>https://wdicc.com/why-i-am-not-at-react-native-developer/</guid>
      <description>&lt;p&gt;翻译自这里 &lt;a href=&#34;https://arielelkin.github.io/articles/why-im-not-a-react-native-developer.html#javascript&#34; title=&#34;Why I&#39;m not a React Native Developer&#34;&gt;Why I&#39;m not a React Native Developer&lt;/a&gt; 。&lt;/p&gt;

&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;很多人把 RN 作为下一个移动 app 的开发平台。切换开发平台有可能会有巨大的消耗也可能会改变你日常的工作流程。同时平台也可能会改变你开发使用的软件，需要你掌握一些特殊的工具和工作流，把你绑定到一个新的开发生态里面。&lt;/p&gt;

&lt;p&gt;Facebook 自己想要完全切换到 RN 来代替原来的 Native 开发。RN 开发团队也在努力做这个事情，他们搞了一个软件开发平台来代替传统的 Xcode/Swift/ObjC 开发模式。RN 团队到底对这个是一个怎么的态度，貌似还不太明确。&lt;/p&gt;

&lt;p&gt;我自己搞了几个月开发之后，我感觉这个平台不是我想要的一个，也不推荐其他人往里跳。&lt;/p&gt;

&lt;h2 id=&#34;declarative-style&#34;&gt;Declarative style&lt;/h2&gt;

&lt;p&gt;在 RN 里面，UI 是一堆包含状态(state)的函数(function)和属性(props)。&lt;/p&gt;

&lt;p&gt;下面是个例子，假设我们需要在左上角有一个小正方形，如果用户连接了就显示红色，没连接显示绿色。&lt;/p&gt;

&lt;p&gt;在这种编程类型下，你指定所有更新 UI 需要的步骤。我们需要监听 isConnectd 来更新 view。我们告诉 iOS 如何计算状态。&lt;/p&gt;

&lt;p&gt;比较一下 RN 的模式。&lt;/p&gt;

&lt;p&gt;RN 让你在 render() 方法里面描述你的 UI。React 框架来保证 state 的变化会触发 re-rendering。对于数据的修改，会自动触发 UI 的改变。&lt;/p&gt;

&lt;p&gt;我想这是一种思考 UI 的很好的方式。这也是 MVC 模式的一种进化，View 只需要负责展示，不需要负责管理数据。&lt;/p&gt;

&lt;h2 id=&#34;faster-iterations&#34;&gt;Faster iterations&lt;/h2&gt;

&lt;p&gt;RN 里面开发的时候，框架会在本地启动一个 server。你只需要编译一次，然后在 iOS 模拟器或者真机上面运行，RN 会保证你在 js 里面做的任何修改都会反馈到 app 里面。&lt;/p&gt;

&lt;ul&gt;
你有两个选择:
&lt;li&gt;Live Reloading。使用 CMD + R 快捷键。&lt;/li&gt;
&lt;li&gt;Hot Reload。只更新你编辑的部分。比如你在编辑一个 table view 的一个 cell，你的修改会立刻可以看到，不用每次都从开始界面一步一步找过去。当前页面的状态也会一直保留，这就是所见即所得的编程体验。Xcode 没有这个。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这个比之前在 native 里面快太多了，在 native 里面有时候还需要在 ViewController 里面加一些 debug 方法，以便快速的找到需要的界面。&lt;/p&gt;

&lt;h2 id=&#34;cross-platform&#34;&gt;Cross-platform&lt;/h2&gt;

&lt;p&gt;跨平台。&lt;/p&gt;

&lt;h2 id=&#34;uncertain-roadmap&#34;&gt;Uncertain roadmap&lt;/h2&gt;

&lt;p&gt;担心 RN 团队没有对这个项目的长期的保证。&lt;/p&gt;

&lt;p&gt;不像我们使用一些第三方库，如果那个库出点问题我们的项目也不至于出啥大问题。而 RN 是一整个软件开发平台，如果 facebook 停止维护 RN，我们的软件可能就停滞了，目前也没有一个 RN 替代。如果要自己搞，那还需要区了解 RN 的代码，React.js 的代码，RN CLI 工具，和 JavaScriptCore。社区会继续搞么？也许吧，可能不是我们熟悉的速度。&lt;/p&gt;

&lt;p&gt;Github 上面 RN 大概 2 周就会发布一个新版本。&lt;/p&gt;

&lt;h2 id=&#34;patently-daunting&#34;&gt;Patently daunting&lt;/h2&gt;

&lt;h2 id=&#34;patently-silent&#34;&gt;Patently silent&lt;/h2&gt;

&lt;h2 id=&#34;october-2017-update-facebook-relicensing&#34;&gt;October 2017 update: Facebook Relicensing&lt;/h2&gt;

&lt;h2 id=&#34;javascript&#34;&gt;Javascript&lt;/h2&gt;

&lt;ul&gt;
我们应该从 RN 切换到 Swifh 一个比较重要的原因是「技术倒退」，你应该抛弃 JavsScript，这是一门
&lt;li&gt;有缺陷的&lt;/li&gt;
&lt;li&gt;不安全的&lt;/li&gt;
&lt;li&gt;进化缓慢的语言&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;下面的例子都是基于 ES2016。&lt;/p&gt;

&lt;h3 id=&#34;javascript-s-inadequacy&#34;&gt;Javascript’s inadequacy&lt;/h3&gt;

&lt;p&gt;司机都喜欢开集成了很多安全措施的车。不是因为它们能让你开起来更简单，而是因为它们会降低你遇到事故的几率。&lt;/p&gt;

&lt;p&gt;类似的，一门编程语言也应该提供一些能避免编程错误的安全措施。&lt;/p&gt;

&lt;p&gt;ARC 刚加入 Object-C 的时候，我们可以选择关闭他，但是为啥不推荐呢，因为编译器可以比你更加准确的知道一个对象的生命周期。「编译器比你聪明」。&lt;/p&gt;

&lt;h3 id=&#34;type-errors&#34;&gt;Type errors&lt;/h3&gt;

&lt;p&gt;JavaScript 里面一个变量可以在任何时间编程任意类型。&lt;/p&gt;

&lt;h3 id=&#34;lack-of-optionals&#34;&gt;Lack of optionals&lt;/h3&gt;

&lt;p&gt;Objective-C 里面(以及其他语言里面)大量的错误是调用一个 nil 的对象上面的方法。&lt;/p&gt;

&lt;p&gt;Swift 里面，会强制你做 nil 检查，如果你知道一个对象可能会是 nil。&lt;/p&gt;

&lt;h3 id=&#34;lack-of-function-signature&#34;&gt;Lack of function signature&lt;/h3&gt;

&lt;p&gt;JavaScript 里面函数没有返回类型。&lt;/p&gt;

&lt;h3 id=&#34;immutability&#34;&gt;Immutability&lt;/h3&gt;

&lt;p&gt;JavaScript 里面对不可变数据的支持很弱。&lt;/p&gt;

&lt;h3 id=&#34;you-can-t-trust-arrays&#34;&gt;You can’t trust arrays&lt;/h3&gt;

&lt;h3 id=&#34;poor-error-handling&#34;&gt;Poor error handling&lt;/h3&gt;

&lt;h3 id=&#34;no-support-for-decimals&#34;&gt;No support for decimals&lt;/h3&gt;

&lt;h3 id=&#34;dodgy-maths&#34;&gt;Dodgy maths&lt;/h3&gt;

&lt;h3 id=&#34;unsafe-initialisation&#34;&gt;Unsafe initialisation&lt;/h3&gt;

&lt;h3 id=&#34;optional-curly-braces-after-an-if&#34;&gt;Optional curly braces after an if&lt;/h3&gt;

&lt;h3 id=&#34;ambiguous-curly-braces&#34;&gt;Ambiguous curly braces&lt;/h3&gt;

&lt;h3 id=&#34;switch-fallthrough&#34;&gt;Switch fallthrough&lt;/h3&gt;

&lt;h3 id=&#34;what-s-nothing&#34;&gt;What’s nothing?&lt;/h3&gt;

&lt;h3 id=&#34;poor-expressivity&#34;&gt;Poor expressivity&lt;/h3&gt;

&lt;h3 id=&#34;exceedingly-slow-evolution&#34;&gt;Exceedingly slow evolution&lt;/h3&gt;

&lt;ul&gt;
ES2016 提供了一些新的功能
&lt;li&gt;The includes method for arrays.&lt;/li&gt;
&lt;li&gt;The ** operator&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;flow-to-the-rescue&#34;&gt;Flow to the rescue!&lt;/h3&gt;

&lt;p&gt;Flow 是 Facebook 提出来解决上面那些问题的。这是一个 JavaScript 的静态类型检查工具。&lt;/p&gt;

&lt;p&gt;回忆一下那些例子。&lt;/p&gt;

&lt;h3 id=&#34;flow-s-like-flossing&#34;&gt;Flow’s like flossing&lt;/h3&gt;

&lt;p&gt;Flow 修复了 JavaScript 那些问题了么？没有。&lt;/p&gt;

&lt;p&gt;Flow 开发工程师虽然做了很多努力，但是他依然只是 JavaScript 的一个超集，基于一个很弱的根基。&lt;/p&gt;

&lt;p&gt;github 上面大量的项目都没有使用 Flow。也没有一个 RN 的例子讲到了 flow。&lt;/p&gt;

&lt;h2 id=&#34;the-javascript-ecosystem-balls-and-chains&#34;&gt;The Javascript Ecosystem: balls and chains&lt;/h2&gt;

&lt;p&gt;JavaScript 的缺点让所有人都印象深刻，除了 JavaScript 开发。对于他们来说，上面提到的问题并没有那么糟糕。这是因为 JavaScript 开发并不觉得 js 语言有什么欠缺。&lt;/p&gt;

&lt;p&gt;你说没有 immutability，那我们写一个库支持他，你说没有类型检查，那我们写一个库。&lt;/p&gt;

&lt;p&gt;&#34;自由挖掘&#34;是指选择一门健全的语言。这么挖并没有很好的利用好精力。JS 总是让你开发一些其他语言默认就支持的东西。&lt;/p&gt;

&lt;h3 id=&#34;chains&#34;&gt;Chains&lt;/h3&gt;

&lt;p&gt;有条大鱼需要 JavaScript 来处理。这门语言考虑 billions 选择升级或者不升级他们流量起和网站的网络用户。这使得这门语言的开发不健全。&lt;/p&gt;

&lt;p&gt;还记得 typeof(null) == &#39;object&#39; 么，已经有提案把 null 对象改成 null 了，但是「考虑到这会导致现有的大量网站出问题。」这个提案被否决了。ES6 里面 null 依然是个 object。&lt;/p&gt;

&lt;ul&gt;
JavaScript 的进化，需要考虑：
&lt;li&gt;大量的旧版本流量起用户&lt;/li&gt;
&lt;li&gt;一群不同的浏览器厂商&lt;/li&gt;
&lt;li&gt;大量的网站和它们的开发&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;wider-angles&#34;&gt;Wider angles&lt;/h3&gt;

&lt;h2 id=&#34;dependencies&#34;&gt;Dependencies&lt;/h2&gt;

&lt;p&gt;RN 项目有 648 项依赖(我刚看了一下是 603)。你的项目基于其他 600 多人的努力。这也就是说，你的项目也依赖于这 600 多自愿者能持续维护他们的项目。&lt;/p&gt;

&lt;h2 id=&#34;better-alternatives&#34;&gt;Better alternatives&lt;/h2&gt;

&lt;p&gt;广告时间。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>11 Mistakes During Use React Native(翻译)</title>
      <link>https://wdicc.com/11-mistakes-during-use-react-native/</link>
      <pubDate>Wed, 01 Nov 2017 19:12:24 +0800</pubDate>
      
      <guid>https://wdicc.com/11-mistakes-during-use-react-native/</guid>
      <description>&lt;p&gt;粗略的翻译自 &lt;a href=&#34;https://medium.com/dailyjs/11-mistakes-ive-made-during-react-native-redux-app-development-8544e2be9a9&#34; title=&#34;11 mistakes I’ve made during React Native / Redux app development&#34;&gt;11 mistakes I’ve made during React Native / Redux app development&lt;/a&gt;。&lt;/p&gt;

&lt;h2 id=&#34;一些可能会错误的评估&#34;&gt;一些可能会错误的评估&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;虽然有很多可以重复使用的组件，你还是需要分开考虑 iOS 和 Android 的布局。&lt;/li&gt;
&lt;li&gt;当你评估表单实现的时候，应该要同时考虑表单的验证。开发 RN 比开发例如 Cordova 这样的 hybrid 的程序需要写的代码更多。&lt;/li&gt;
&lt;li&gt;如果是基于一个已经有后端的 webapp 写代码，应该需要先去仔细看看后端提供的功能接口，因为你需要自己写逻辑，弄明白了 DB 结构数据关联，可以然你更好的规划你的 redux store。&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;尽量使用已有的组件&#34;&gt;尽量使用已有的组件&lt;/h2&gt;

&lt;p&gt;Google 一下就会发现，已经有大量的现成的组件，例如 buttons, footers 等。如果你没啥特殊要求，这些你都可以直接用。你要是有自己的特殊需要，也可以包装一下这些组件成你自己的，然后在里面自定义样式。不过你自己使用 View, Text, TouchableOpacity 等这些 RN 组件来自己包装对于你理解 RN 的工作原理。你自己打包的组件的版本也不会变，不像依赖外部模块。&lt;/p&gt;

&lt;h2 id=&#34;不要分开搞-ios-和-android-的布局&#34;&gt;不要分开搞 iOS 和 Android 的布局&lt;/h2&gt;

&lt;p&gt;如果你有不同的布局需求，那就分开。否则，你可以使用 RN Platform 提供的 API 来做一些小的区分。&lt;/p&gt;

&lt;p&gt;如果布局很大不同，那就把布局内容放到不同的文件里面。&lt;/p&gt;

&lt;p&gt;你可以使用 index.ios.js 给 iOS 布局用，index.android.js 给 Android 用。&lt;/p&gt;

&lt;p&gt;共同的重复代码可以放到 helpers 里面。&lt;/p&gt;

&lt;h2 id=&#34;错误的-redux-store-规划&#34;&gt;错误的 redux store 规划&lt;/h2&gt;

&lt;p&gt;在规划你的 app 的时候可能会花很多时间在布局上，少量时间在数据规划上。这是个错误。redux 可以帮我们很好的处理数据。如果能规划好他，这会是一个很有用的工具，否则可能会带来不好的结果。&lt;/p&gt;

&lt;p&gt;在我刚开始规划的时候，想着 reducers 是每个 container 的数据层。所以，如果有登录，忘记密码，Todo 列表页面，那应该来说会有各自的 reducers: SignIn, Forgot, ToDoList。&lt;/p&gt;

&lt;p&gt;后来才发现，数据没那么好管理。我有 Todo 详情页，用这个方式规划的话，就需要有一个 ToDoDetails reducer。这是个巨大的失误。当用户在 Todo 列表页面选择了一项的时候，我们需要把数据传递给 ToDoDetails reducer。这表示需要额外的 actions 来发送数据给 reducer，这不太合理。&lt;/p&gt;

&lt;p&gt;做了一些调查之后，打算该改结构&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Auth&lt;/li&gt;
&lt;li&gt;Todos&lt;/li&gt;
&lt;li&gt;Friends&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Auth 用来存放 token。Todos 和 Friends reducers 用来存放实体数据，从名字就能理解。当从列表打开 ToDo 详情的时候，只需要根据 id 从 Todos 里面查询就可以了。&lt;/p&gt;

&lt;p&gt;不管多复杂的结构，都推荐你这么搞，这样你总是知道你应该去哪里找你的数据。&lt;/p&gt;

&lt;h2 id=&#34;错误的项目结构&#34;&gt;错误的项目结构&lt;/h2&gt;

&lt;p&gt;对于新手来说，规划项目结构是个比较难的事情。&lt;/p&gt;

&lt;p&gt;得看看你的项目是大项目？巨大的？还是小的。有多少 screen，20？30？还是 5 个，或者是只有个 Hello world？&lt;/p&gt;

&lt;p&gt;一开始我的项目结构如下：&lt;/p&gt;

&lt;p&gt;图不贴了，可以看原文。简单讲就是把 reducers actions 等分开放到不同的目录里面。&lt;/p&gt;

&lt;p&gt;如果你的项目不大，例如 10 来个 screen 这么搞是挺好的。如果比较大，可以考虑下下面这个方式：&lt;/p&gt;

&lt;p&gt;就是按照 screen 划分目录，把这个 screen 对应的 actions reducers 等放到一个目录下面。这样可以清楚的知道一个 container 和 action 等的关系。&lt;/p&gt;

&lt;p&gt;如果你有通用的 style 文件，可以建一个 styles/index.js 文件。&lt;/p&gt;

&lt;p&gt;还有很多其他的结构类型，你需要找到适合你自己的。&lt;/p&gt;

&lt;h2 id=&#34;container-里面错误的结构&#34;&gt;container 里面错误的结构&lt;/h2&gt;

&lt;p&gt;其实简单概括就是，应该尽量封装你的组件，比如 form 表单里面的东西，应该适当的做一些封装，比如搞一个 FormItem 这样的组件出来，就不用重复的写 Text 和 TextInput 的组合了。&lt;/p&gt;

&lt;p&gt;但是也要注意，不要为了封装而封装，原文里面有个例子，把组件搞了一个 setTitle 方法，然后根据 id 来设置 title。作者的意思是，Dumb 组件不应该加入业务逻辑进来，比如加一个 id 就需要修改一下这个组件。&lt;/p&gt;

&lt;h2 id=&#34;内联样式&#34;&gt;内联样式&lt;/h2&gt;

&lt;p&gt;就是这样的 &lt;code&gt;&amp;lt;View style={{flex:1, flexDirection:&#39;row&#39;, backgroundColor:&#39;transparent&#39;}}&amp;gt;&lt;/code&gt; ，慢慢会变得很难管理，也没法重用。应该一开始就把这个写入到单独的文件里面。&lt;/p&gt;

&lt;h2 id=&#34;使用-redux-验证表单&#34;&gt;使用 redux 验证表单&lt;/h2&gt;

&lt;p&gt;这个是我犯的一个错误，但也有可能适合你们。&lt;/p&gt;

&lt;p&gt;如果需要通过 redux 验证表单，我们需要创建 action， action type 和 reducer 里面单独的字段。这么做有点太麻烦了。&lt;/p&gt;

&lt;p&gt;所以我们决定使用 state。不用 reducers, types 等。只用一些在 container 范围的简单的函数。这么做让我们删除了 action，reducer 文件里面不必要的函数。也不用处理维护 store，这么做很适合我们的项目。&lt;/p&gt;

&lt;h2 id=&#34;大量依赖-zindex&#34;&gt;大量依赖 zIndex&lt;/h2&gt;

&lt;p&gt;从 web 过来的人会比较喜欢 css 里面的 z-index，可以控制显示哪一层。但是在 RN 里面，一开始没有这个，但是后来也加上了。一开始用的时候挺好的，但是直到我开始在 Android 上面跑。。。现在我都是在构建的时候就考虑好他们将来展示的顺序。&lt;/p&gt;

&lt;h2 id=&#34;不阅读依赖的模块的代码&#34;&gt;不阅读依赖的模块的代码&lt;/h2&gt;

&lt;p&gt;简单说就是用第三方模块的时候，看文档是必须的了，但是有时候也需要看看代码的。比如不工作了，或者和文档描述不一致啥的。看代码也能学习到如何构建自己的模块。&lt;/p&gt;

&lt;h2 id=&#34;使用-panresonder-和-动画-api-的时候要小心&#34;&gt;使用 PanResonder 和 动画 API 的时候要小心&lt;/h2&gt;

&lt;p&gt;RN 提供了你构建完全 native 体验的 app 的能力。例如布局，手势，动画。&lt;/p&gt;

&lt;p&gt;默认提供了布局功能，当你使用 View, Text, TextInput 这些 RN 模块的时候，手势和动画需要使用 PanResonder 和动画 API 来提供手势和动画。&lt;/p&gt;

&lt;p&gt;一开始可能会觉得好难，什么时候开始，什么时候结束，长按，短按等。RN 也确实没有把这些讲的足够清晰。作者提供了一个例子&lt;/p&gt;

&lt;p&gt;开始我们初始化一个 PanResonder 对象，针对我们感兴趣的 onPanResponderGrand(当用户点击 button 的时候调用) 和 onPanResponderRelease(当用户手指离开屏幕的时候调用) 设置了一些 handler。&lt;/p&gt;

&lt;p&gt;同时我们也设置了 Animated 对象来帮我们处理动画。设置他的取值为 0，然后定义 _setOpacity 方法来改变 this.opacityAnimated 的值。在渲染之前，给 this.opacityAnimated 赋值为通常情况下的值。我们不使用 View，使用 Animated.View 来动态修改透明度。&lt;/p&gt;

&lt;p&gt;可以看到，这没啥难理解的。当然你需要阅读这些 API 的文档让你的 app 更完美。希望这个例子可以让你有一个好的开始。&lt;/p&gt;

&lt;p&gt;React Naive 很不错，你几乎可以用它做任何事情。如果有不行的，你还可以通过 Swift/Object C 或者 Java 来配合 RN 完成。此外还有一个大的社区。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Howto Make react-redux Work With react-navigation</title>
      <link>https://wdicc.com/howto-make-react-redux-work-with-react-navigation/</link>
      <pubDate>Sat, 21 Oct 2017 08:19:28 +0800</pubDate>
      
      <guid>https://wdicc.com/howto-make-react-redux-work-with-react-navigation/</guid>
      <description>&lt;p&gt;这周花了一些时间研究 &lt;code&gt;react-redux&lt;/code&gt; 和怎么让它和 &lt;code&gt;react-navigation&lt;/code&gt; 配合一起工作，总结一下，把代码和注释直接贴这里了，也可以看这个 &lt;a href=&#34;https://gist.github.com/wd/7935c3fb20f2517280b8e050796310b3&#34; title=&#34;gist&#34;&gt;gist&lt;/a&gt;。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;/**
 * 一个简单的 RN 应用，有 2 个页面，使用了 react-navigation 的 StackNavigator 来做界面管理
 * 为了说明如何使用 redux，以及如何让 redux 和 StackNavigator 配合
 * 为了容易理解，把所有内容都放到了一个页面里面，实际开发的时候不要这么做
 * 参考：
 *  https://github.com/jackielii/simplest-redux-example
 *  http://www.ruanyifeng.com/blog/2016/09/redux_tutorial_part_three_react-redux.html
 */

import React, { Component } from &#39;react&#39;;
import {
    StyleSheet,
    Text,
    View,
    Button
} from &#39;react-native&#39;;

import { Provider, connect } from &#39;react-redux&#39;;
import { createStore, combineReducers } from &#39;redux&#39;;
import { StackNavigator, addNavigationHelpers } from &#39;react-navigation&#39;;

// Home 页面，UI 组件
class MyHome extends Component {
    constructor(props) {
        super(props);
        console.log(&#39;init home, props&#39;, props);
    }

    _nextPage() {
        // navigation 依然在 this.props 里面获取，和不用 redux 的时候用法一样
        let {navigation} = this.props;
        navigation.navigate(&amp;quot;App&amp;quot;);
    }

    render() {
        // 所有的传递过来的状态，都需要从 this.props.screenProps 里面读取 (4)
        // 我这里给不同页面的 action 取了各自的命名空间，避免冲突，也可以直接所有 action 都在一个命名空间，这块我还在摸索如何处理比较好 (5)
        let {onIncButtonClicked} = this.props.screenProps.MyAppActions;

        // 界面有两个按钮，一个用来增加另外一个页面的计数器，一个用来访问下一个页面
        return (
            &amp;lt;View style={styles.container}&amp;gt;
                &amp;lt;Button title=&amp;quot;Inc counter&amp;quot; onPress={onIncButtonClicked}&amp;gt;&amp;lt;/Button&amp;gt;
                &amp;lt;Button title=&amp;quot;Next page&amp;quot; onPress={()=&amp;gt;this._nextPage()}&amp;gt;&amp;lt;/Button&amp;gt;
            &amp;lt;/View&amp;gt;
        )
    }
}

// 这个组件只是用来测试就算一个 props 传递给子组件，在 props 被修改的时候也会被自动刷新
class ShowText extends Component {
    render() {
        let {counter} = this.props;

        return (
            &amp;lt;Text&amp;gt;{counter}&amp;lt;/Text&amp;gt;
        )
    }
}

// App 页面，UI 组件
class MyApp extends Component {
    constructor(props) {
        super(props);
        console.log(&#39;init App, props&#39;, props);
    }

    componentWillReceiveProps(newProps) {
        console.log(&#39;myapp recive props&#39;, newProps);
    }

    render() {
        // 组件的 state/props 获取，有自己的命名空间 (1)
        let {counter} = this.props.screenProps.MyApp;
        // 组件的 action props (5)
        let {onIncButtonClicked, onDecButtonClicked} = this.props.screenProps.MyAppActions;

        // 界面有一个计数器的结果，两个按钮
        return (
            &amp;lt;View style={styles.container}&amp;gt;
                &amp;lt;ShowText counter={counter} /&amp;gt;
                &amp;lt;Button title=&amp;quot;Inc counter&amp;quot; onPress={onIncButtonClicked}&amp;gt;&amp;lt;/Button&amp;gt;
                &amp;lt;Button title=&amp;quot;Dec counter&amp;quot; onPress={onDecButtonClicked}&amp;gt;&amp;lt;/Button&amp;gt;
            &amp;lt;/View&amp;gt;
        )
    }
}

// 初始化 StackNavigator，定义页面路由
let AppNavigator = StackNavigator({
    Home: {
        screen: MyHome
    },
    App: {
        screen: MyApp
    }
});

// 包装一下 StackNavigator，因为有些参数需要定制一下
class MyStackNavigator extends Component {
    constructor(props) {
        super(props);
        console.log(&amp;quot;inside MyStackNavigator&amp;quot;, props);
    }

    render() {
        // screenProps: 使用这个往所有的页面传递 props，这个是和直接使用 redux 不同的地方 (4)
        // navigation: 因为使用 redux 之后，就不会直接操作 this.state 了，所以得告诉 StackNavigator dispatch 方法和 state 从哪里读取
        return (
            &amp;lt;AppNavigator
                screenProps={this.props}
                navigation={addNavigationHelpers({
                    dispatch: this.props.dispatch, // 通过 action props 定义 (2)
                    state: this.props.nav, // 通过 state props 定义 (3)
                })} /&amp;gt;
        )
    }
}

// 定义 state 和 props 的关系，所有 redux 应用都需要 (6)
let mapStateToProps = (state, ownProps) =&amp;gt; {
    console.log(&amp;quot;inside mapstate to props&amp;quot;, state, ownProps);
    return {
        // 这两个是不同的命名空间，和上面你使用的时候的路径对应 (1)
        &amp;quot;MyApp&amp;quot;: state.MyApp,
        &amp;quot;MyHome&amp;quot;: state.MyHome,
        // 定义 StackNavigator 的 state (3)
        &amp;quot;nav&amp;quot;: state.nav
    }
};

// 定义 action 和 props 的关系，所有 redux 应用都需要
let mapDispatchToProps = (dispatch, ownProps) =&amp;gt; {
    console.log(&amp;quot;inside map dispath to props&amp;quot;);
    return {
        // 这两个也是不同的命名空间，和上面使用的时候路径对应 (5)
        &#39;MyAppActions&#39;: {
            onIncButtonClicked: () =&amp;gt; {
                let action = {
                    type: &amp;quot;INC_COUNTER&amp;quot;,
                    payload: 1
                };

                dispatch(action);
            },
            onDecButtonClicked: () =&amp;gt; {
                let action = {
                    type: &amp;quot;DEC_COUNTER&amp;quot;,
                    payload: -1
                };

                dispatch(action);
            }
        },
        &#39;MyHomeActions&#39;: {
            onNextButtonClicked: () =&amp;gt; {
                let action = {
                    type: &amp;quot;NEXT_PAGE&amp;quot;
                };

                dispatch(action);
            }
        },
        // 定义 StackNavigator 的 action props (2)
        &#39;dispatch&#39;: dispatch
    }
}

// 定义 home 页面的 reducer，不过因为那个页面唯一的一个 action 是触发别的页面的动作的，所以这个 reducer 其实也可以没有
// 所以从这里也能看出来，reducer 并不一定按照页面去分
let homeReducer = (state, action) =&amp;gt; {
    console.log(&amp;quot;inside home reducer&amp;quot;, state, action);
    return state || {};
};

// 定义一个初始化的 state
let myAppInitState = { &#39;counter&#39;: 10};
// 定义 app 页面的 reducer
let myAppReducer = (state = myAppInitState, action) =&amp;gt; {
    // 收到的 state 实际上只是自己命名空间下的 (6)
    console.log(&amp;quot;inside myAppReducer&amp;quot;, state, action);
    let myState = state;
    // 需要处理的 action 的逻辑
    // 要注意，一个 action 被触发的时候，所有的 reducer 都会被调用，所以其实更像是订阅自己想要处理的 action
    switch (action.type) {
        case &amp;quot;DEC_COUNTER&amp;quot;:
        case &amp;quot;INC_COUNTER&amp;quot;:
            // 如果修改了 state，必须要返回一个新的对象，不能直接在原对象上修改，否则 state 变化不会触发组件的刷新
            return Object.assign({}, myState, {
                &#39;counter&#39;: myState.counter + action.payload
            });
        default:
            return state;
    }
};

// 定义一个 StackNavigator 用到的初始化状态，这个很重要
const initialState = AppNavigator.router.getStateForAction(AppNavigator.router.getActionForPathAndParams(&#39;Home&#39;));
// 定义 StackNavigator 的 reducer，代码直接复制来的
const navReducer = (state = initialState, action) =&amp;gt; {
    console.log(&amp;quot;inside nav reducer&amp;quot;, state, action);
    const nextState = AppNavigator.router.getStateForAction(action, state);

    // Simply return the original `state` if `nextState` is null or undefined.
    return nextState || state;
};

// 创建 store
let store = createStore(combineReducers({
    // 这里的 MyApp 等和前面定义 mapStateToProps 的地方对应 (6)
    // 这里也是导致 reducer 收到的 state 只有自己命名空间下数据的一个原因 (6)
    MyApp: myAppReducer,
    MyHome: homeReducer,
    nav: navReducer
}));

// 让 redux 加持一下，保佑
let App = connect(mapStateToProps, mapDispatchToProps)(MyStackNavigator);

// 其他的就是比较常见的 redux 的逻辑了，另外需要说明的是实际使用的时候，肯定会做页面拆分，如何拆分可能都会有不同的看法，我也还在摸索
export default class Root extends Component&amp;lt;{}&amp;gt; {
    constructor(props) {
        super(props);
    }

    render() {
        return (
            &amp;lt;Provider store={store}&amp;gt;
                &amp;lt;App prop1=&amp;quot;prop1&amp;quot; /&amp;gt;
            &amp;lt;/Provider&amp;gt;
        );
    }
}


const styles = StyleSheet.create({
    container: {
        flex: 1,
        justifyContent: &#39;center&#39;,
        alignItems: &#39;center&#39;,
        backgroundColor: &#39;#F5FCFF&#39;,
    },
    welcome: {
        fontSize: 20,
        textAlign: &#39;center&#39;,
        margin: 10,
    },
    instructions: {
        textAlign: &#39;center&#39;,
        color: &#39;#333333&#39;,
        marginBottom: 5,
    },
});
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>生生死死《白鹿原》</title>
      <link>https://wdicc.com/life/</link>
      <pubDate>Sat, 07 Oct 2017 18:10:00 +0800</pubDate>
      
      <guid>https://wdicc.com/life/</guid>
      <description>&lt;p&gt;之前 6 月份去上海那边的时候，偶尔看到电视里面演&lt;a href=&#34;https://movie.douban.com/subject/26322644/&#34; title=&#34;《白鹿原》&#34;&gt;《白鹿原》&lt;/a&gt;，看了几集。吸引我的，主要可能是里面的乡土气息，以及里面的几个演员演的挺好的。那会看的好像是 40 多集，并且是断续看的，剧情也不太能接的上。后来回来后，找了一个时间，就从头开始看了。直到今天才算看完。看的时候实在是感慨良多，看完了也是心情不太能平复，稍微记录一下。因为没看过书，记录以电视剧剧情为主。&lt;/p&gt;

&lt;p&gt;这剧从大清末年演到了 49 年建国后，基本是从白嘉轩娶媳妇开始讲到当了族长，到生儿育女，到孩子上学，闹革命，生孩子。到最后剧里面的人物死的死，老的老，实在是看的人很心酸。从一个上帝视角看了这么多人的生生死死，以后还是得少看这种剧了。&lt;/p&gt;

&lt;p&gt;白嘉轩一辈子，挺直了腰杆做人，做事的是非对错不评价，但是确实是可以算是不愧对自己，家教很严，但是也就导致了服从家教的孩子们活的很是平淡，这个其实也就是白嘉轩的理念，踏实种个地抱个娃，平平安安一辈子，也就是了，这也是很多老普通百姓的理念。&#34;房是招牌地是累，按下银钱是催命鬼&#34;，这就是古人对普通人生活的建议。但是这么做就可以踏实一辈子么？可以看到白嘉轩的各种经历，清兵围城，闹土匪，镇嵩军征粮征税，天灾大旱，国民党共产党互相闹，这些事情，你不去惹，事情也会找上你。这是命不好？&lt;/p&gt;

&lt;p&gt;生活这一辈子就是个社交，免不了的要和其他人产生交集，矛盾就会出现，就会遇到问题。躲不掉。所谓你抗争是一辈子，认命也是一辈子，一辈子过去了也就是过去了，没有反悔的机会，不能重新来过。&lt;/p&gt;

&lt;p&gt;鹿子霖从开头争抢族长，到后面坐牢看透人生，到后面老糊涂了，演的实在是很好。普通老百姓，有点小恶，顶多也就是占点小便宜，大恶也不敢，游说小蛾勾引白孝文成功之后，白嘉轩对孝文执行族法，是真的出来劝了，没想到这么严重。小老百姓占点便宜就回家高高兴兴的喝酒了。这人活的也很真实，那点小便宜也就是他的一点追求，能压倒族长一头，就觉得自己很有面子。反而白嘉轩那么大义，倒是有那么些不真实。&lt;/p&gt;

&lt;p&gt;这剧里面两个最悲情的人物，一个是田小蛾，一个就是冷秋月。小蛾没啥别的追求，也就是想有个人能一起踏实过日子。所以黑娃和他住在破窑里面的时候是最开心的，管他其他那些呢，只要能一起好好过日子就可以了。但是可惜，有些事情看不透，参加农协搞事情，以为是好运来了，却没想到那是送命的前兆。以为黑娃死了之后，一个弱女人开始找自己的依靠，一半是为了报仇，一半是真心觉得白孝文对自己真好，开始了自己的第二次的幸福生活。却没想到，命丧在这里。死的很悲情，这也是炮灰，要不是鹿兆鹏拉拢，可能黑娃踏实的攒钱，种地养老婆，一辈子或许平平淡淡的，但是安安全全的就过去了。有欲望，就会被人利用，当然也可以说那是自己想做的，不是利用，但是在做之前有人告诉过后果么，知道了后果，还回去做么？当然，可能也没人能预料到那个后果，还是自己的选择。&lt;/p&gt;

&lt;p&gt;传言鹿兆鹏死了的时候，秋月端着盆子给鹿子霖洗脚，说是代鹿兆鹏做这个事情，那个瞬间就泪崩了。秋月你可以说是死在封建社会下，但是鹿兆鹏也有不可原谅的责任。秋月开始可能真是按照父母之命嫁过去的，但是后面，某次对白里面也说了，那是真心喜欢兆鹏。就像兆海为了白灵终生未娶一样，秋月为了兆鹏也是守了一辈子的寡。鹿兆鹏说是为了他爷爷为了他爸，把人家娶回了家，又让人家守活寡，这个算是一个正确的价值观么？秋月出场之后一辈子，都踏踏实实的照顾兆鹏父母爷爷，为的就是哪天兆鹏可以多看她一眼，就连想要生一个孩子，也是为了说将来给兆鹏父母养老。等了一辈子，最后兆鹏回家说带她走的时候，本以为已经等到头了，结果发现兆鹏的方案还是继续让她守活寡，也就是这一刻，秋月可能才明白，兆鹏这辈子都不可能和她有什么交集了，自己守的这么一辈子，毫无意义，自杀也是她唯一的一个选择了。封建礼数是一半责任，鹿兆鹏本人也有一半责任。&lt;/p&gt;

&lt;p&gt;鹿兆鹏和白嘉轩一样的不真实。&lt;/p&gt;

&lt;p&gt;白灵这个演员确实有点嫩，但是也就是这样，估计才能演好年轻的时候。白灵有句话&#34;我的眼睛睁开了，就不会再闭回去&#34;，一个积极向上的乐观的年轻人，和命运做抗争，看过了各种生死之后，总算要过上安定日子了，死了。可能连自己的孩子都没见上几次。每次看到她，那种跳脱的状态很吸引人，不过也有人不喜欢她。&lt;/p&gt;

&lt;p&gt;看剧的时候，说实话一直担心最后是一个大家都悲惨的结局，虽然知道这是演戏，但是还是希望能有点好的结局。剧里最后也算是一个还可以的结局了，如果把后面的大跃进灾年再写了，真就有点难看了。鹿家活了一个儿子还有孙女，白家活了一个儿子和孙子孙女。&lt;/p&gt;

&lt;p&gt;其他人就不评论了，其实看的时候很多场景都有感触，但是也没记住那么多。看完之后还蛮有冲动再看一次的，但是剧集实在太长了，以后有时间看一下书吧，这个年代拍的电视剧，本身就有太多的忌讳，相信还是原著会更加精彩，而且初步估计，会感觉和电视剧是两个内容，呵呵。当年我高中的时候，拿到一本《平凡的世界》，那会简直就是一刻不停，连续看了几天把书看完了。现在不记得多少内容了，但是那会应该也是被书里描述的农村到城市的历程吸引了吧。现在看白鹿原，里面孩子们最后在县城省城工作，其实和现在的世道没个啥区别。而且其他的，比如这高房价物价，贪官私人关系，可能也可以类比。小老百姓真的可以踏实过日子么？&lt;/p&gt;

&lt;p&gt;踏实过日子，慢慢可能会让人把你玩死。另一个选择就是不甘于现状，当然也不一定求逆天改命，只求能在遇到事情的时候，能给自己多一些路。&lt;/p&gt;

&lt;p&gt;现在年纪大了，确实很多事情慢慢在看透，40 不惑不是都看明白了，是看明白的也就明白了，没看明白的就不看了，所谓看透。这个年纪看这种讲人一生的戏，看到后面那么多的生死，和自己的现实一应证，实在是有点抗不住。人生一辈子，到底是为什么活呢？越来越迷茫了。所以这帖子的英文取名为 Life。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Encrypt and Security</title>
      <link>https://wdicc.com/encrypt-and-security/</link>
      <pubDate>Mon, 02 Oct 2017 13:26:39 +0800</pubDate>
      
      <guid>https://wdicc.com/encrypt-and-security/</guid>
      <description>&lt;p&gt;上周有同学分享了一下加密解密，感觉自己学到了一些东西，记录一下。&lt;/p&gt;

&lt;h2 id=&#34;加密-解密&#34;&gt;加密 &amp; 解密&lt;/h2&gt;

&lt;p&gt;有时候面试的时候会遇到有人讲自己搞过的一些加密方法，会提到「对于 xx 我们使用 md5 加密」，md5 是一种加密方法么？我觉得不是。所谓加密，是对应解密的，不能还原原文的方法，就不应该算加密了吧。&lt;/p&gt;

&lt;p&gt;常常可以听到的，有对称加密和非对称加密。对称加密是指加密解密使用的是同一个密钥的方法，非对称的是指使用不同的密钥的方法。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://zh.wikipedia.org/wiki/%25E5%25B0%258D%25E7%25A8%25B1%25E5%25AF%2586%25E9%2591%25B0%25E5%258A%25A0%25E5%25AF%2586&#34; title=&#34;对称密钥加密&#34;&gt;对称密钥加密&lt;/a&gt;的方法有 DES、3DES、AES、Blowfish、IDEA、RC5、RC6。我之前用过其中的 3DES 和 Blowfish。特点是速度快。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://zh.wikipedia.org/wiki/%25E5%2585%25AC%25E5%25BC%2580%25E5%25AF%2586%25E9%2592%25A5%25E5%258A%25A0%25E5%25AF%2586&#34; title=&#34;非对称加密&#34;&gt;非对称加密&lt;/a&gt;也叫公开密钥加密，方法有 RSA、ElGamal、背包算法、Rabin（RSA的特例）、迪菲－赫尔曼密钥交换协议中的公钥加密算法、椭圆曲线加密算法（英语：Elliptic Curve Cryptography, ECC）。基本都没怎么用过。。他的特点是其中一个公钥可以公开，公钥加密的信息只能通过私钥解密，只要保证私钥安全就可以。但是这个方法加解密速度较慢。&lt;/p&gt;

&lt;h2 id=&#34;分组模式&#34;&gt;分组模式&lt;/h2&gt;

&lt;p&gt;加密算法并不能说一次给多少数据都可以一次加密完毕，实际处理的时候是按块处理的，先按照一定逻辑分组。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://zh.wikipedia.org/wiki/%25E5%2588%2586%25E7%25BB%2584%25E5%25AF%2586%25E7%25A0%2581%25E5%25B7%25A5%25E4%25BD%259C%25E6%25A8%25A1%25E5%25BC%258F&#34; title=&#34;分组模式&#34;&gt;分组模式&lt;/a&gt;有 ECB, CBC, CFB, OFB, CTR等。ECB 就是最简单的，分组之后每块分别加密，然后组合起来。这个方法导致可以任意替换各组的位置而不影响解密。比如原来加密是「A 欠 B 1 万」，每个字刚好一个分组，那即使在不能解密的情况下，也可能导致收到的消息是 「B 欠 A 1 万」。所以就有了其它的那几个加密分组模式，其它的几个模式都会和前后的数据有一定的关系，这样就不能这样调换了。对于第一组数据，加密的时候会需要一个初始化的数据，就是 IV。&lt;/p&gt;

&lt;h2 id=&#34;散列算法&#34;&gt;散列算法&lt;/h2&gt;

&lt;p&gt;也就是 hash 算法。常见的 md5, sha1, sha256, sha512 等。这种是对内容产生一个摘要，是一个有损的过程，根据摘要值，不能得到原文。但是可以通过比对摘要来确认摘要是不是来自相同的内容(有一定的碰撞几率)。&lt;/p&gt;

&lt;h2 id=&#34;https&#34;&gt;https&lt;/h2&gt;

&lt;p&gt;https 是指基于 tls/ssl 协议基础上面跑的 http 协议。建立 ssl 握手之后，就是基于 http 协议的逻辑来在这个 ssl 通道上面传输了。&lt;/p&gt;

&lt;p&gt;握手验证过程中，有两个证书需要用到，一个是 CA Root certificate，还有一个是经过 CA 签名的 Web server certificate。CA 根证书是权威的 CA 机构给到各个浏览器和操作系统内置的一个公钥。Web 服务器证书是权威 CA 机构验证了网站的身份之后，使用 CA 的私钥对证书签名，签名就是根据证书内容先进行 Hash，然后使用私钥加密，把结果作为签名一起放到证书里面。&lt;/p&gt;

&lt;p&gt;Client 访问服务器，会收到服务器返回的 Web 服务器证书，浏览器会根据 CA 根证书对这个证书的签名进行验证，因为那个跟证书其实就是一个公钥，所以可以使用他解开前面加密的签名，然后也使用相同的 Hash 算法把证书内容 hash，比对结果看是否一致，这个会在后面说数字签名的时候再讲。另外，浏览器也会检查比如有效期，域名等，没问题就认为证书有效。然后浏览器会使用证书里面的公钥，继续和 Web 服务器做握手，浏览器会产生一个随机数，用公钥加密然后返回给 Web 服务器。后续双方会使用这个随机数作为密钥，使用一种对称加密方法做后续的加密。&lt;/p&gt;

&lt;p&gt;整个过程中，前面使用非对称加密，协商好一个密钥，后面使用这个密钥来使用对称加密来加密后续的大量的内容。&lt;/p&gt;

&lt;h3 id=&#34;client-hello&#34;&gt;Client hello&lt;/h3&gt;

&lt;p&gt;CLient hello 消息包括&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;TLS 版本&lt;/li&gt;
&lt;li&gt;随机数，时间戳&lt;/li&gt;
&lt;li&gt;Session Id，用来减少握手次数&lt;/li&gt;
&lt;li&gt;支持的加密方式 Cipher Suites&lt;/li&gt;
&lt;li&gt;Server name&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;server-hello&#34;&gt;Server hello&lt;/h3&gt;

&lt;p&gt;Server hello 消息包括&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;TLS 版本，表示同意&lt;/li&gt;
&lt;li&gt;时间戳&lt;/li&gt;
&lt;li&gt;Session Id&lt;/li&gt;
&lt;li&gt;Cipher Suites&lt;/li&gt;
&lt;li&gt;Web 服务器证书&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;验证-web-服务器证书&#34;&gt;验证 Web 服务器证书&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Not Before Time&lt;/li&gt;
&lt;li&gt;Not After Time&lt;/li&gt;
&lt;li&gt;Common Name&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;验证权威-ca-机构的签名&#34;&gt;验证权威 CA 机构的签名&lt;/h3&gt;

&lt;h3 id=&#34;pre-master-secret&#34;&gt;Pre-Master Secret&lt;/h3&gt;

&lt;h2 id=&#34;数字签名&#34;&gt;数字签名&lt;/h2&gt;

&lt;p&gt;比如 A 向 B 借了 100 块钱，这个时候 B 就需要 A 给打一个欠条。一方面，如何保证借条可以安全传输，另一方面，如何保证 A 将来不赖掉这个借条呢？可以使用前面提到的私钥公钥的方法来解决。&lt;/p&gt;

&lt;p&gt;首先 A 把自己的公钥公开，然后把借条内容做一个 Hash，把 hash 结果使用自己的私钥来加密得到一个签名，同时把借条内容和签名给 B。B 拿到借条内容和签名之后，可以用那个公钥解密签名，然后对借条内容 Hash 得到一个 hash 值，比对这两个结果看是否一致。这个过程就完成了。&lt;/p&gt;

&lt;p&gt;如果借条或者是签名在传输过程中被串改，那么 B 就能发现内容的 hash 值和签名解密之后的值不一致。这样就保证了安全。(当然，这里还有个问题是如何保证 B 拿到的公钥是对的，这个感觉肯能是通过其他途径保证的。)&lt;/p&gt;

&lt;p&gt;因为公钥是公开的，任何一个第三方都可以做这个验证，可以验证一致就表示是 A 自己用私钥加密的。这个就保证了 A 无法赖掉这个借条。（我们讨论过，如果公钥不公开，并且没有第三方对这个公钥做了公证，那么是无法保证 A 赖账的。）&lt;/p&gt;

&lt;p&gt;在这个过程里面，我们把借条内容先做一个 Hash，拿到一个 hash 值，然后再加密，这个结果就是一个数字签名了。任何人拿到了公钥，都可以将签名解密，然后可以对借条做相同的 Hash，比对解密出来的值是否等同于那个 hash 值。&lt;/p&gt;

&lt;p&gt;前面 https 里面提到的 CA 权威机构对证书签名，其实就是类似的事。&lt;/p&gt;

&lt;h2 id=&#34;参考连接&#34;&gt;参考连接&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.moserware.com/2009/06/first-few-milliseconds-of-https.html&#34; title=&#34;http://www.moserware.com/2009/06/first-few-milliseconds-of-https.html&#34;&gt;http://www.moserware.com/2009/06/first-few-milliseconds-of-https.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/questions/188266/how-are-ssl-certificates-verified&#34; title=&#34;https://stackoverflow.com/questions/188266/how-are-ssl-certificates-verified&#34;&gt;https://stackoverflow.com/questions/188266/how-are-ssl-certificates-verified&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://crypto.stackexchange.com/questions/5332/how-does-a-client-verify-a-server-certificate&#34; title=&#34;https://crypto.stackexchange.com/questions/5332/how-does-a-client-verify-a-server-certificate&#34;&gt;https://crypto.stackexchange.com/questions/5332/how-does-a-client-verify-a-server-certificate&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Change Blog Theme to Hugo Classic</title>
      <link>https://wdicc.com/change-blog-theme-to-hugo-classic/</link>
      <pubDate>Sat, 30 Sep 2017 21:47:20 +0800</pubDate>
      
      <guid>https://wdicc.com/change-blog-theme-to-hugo-classic/</guid>
      <description>&lt;p&gt;一个主题看久了会腻，原来用的 &lt;a href=&#34;https://github.com/wd/hugo-fabric&#34; title=&#34;hugo-fabric&#34;&gt;hugo-fabric&lt;/a&gt; 也是我在最早的 jeklly 的 fabric 主题上修改的。那个主题偏暗，我把一些颜色调亮了一点，但是还是不是很舒服，对颜色搭配还是没有感觉。&lt;/p&gt;

&lt;p&gt;今天折腾了一下，把 theme 换到了 &lt;a href=&#34;https://github.com/wd/hugo-classic&#34; title=&#34;hugo-classic&#34;&gt;hugo-classic&lt;/a&gt;，这个也是 fork 自一个别人的主题，增加了一些缺失的内容&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;首页分页&lt;/li&gt;
&lt;li&gt;disqus 支持&lt;/li&gt;
&lt;li&gt;code 块颜色不是很明显的问题&lt;/li&gt;
&lt;li&gt;css 全文输出&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;del&gt;后面可能还想把 tags 页面做成横向的列表，目前那个有点太占位置了。不过目前还没找到比较好看一点的设计，遇到再说了。另外刚发现那个 code 块的空白太多了，可能回头也调整一下。&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;已经弄了一个 tag 的样式，先这么看着吧。另外也修正了一下 code 的空白。&lt;/p&gt;

&lt;p&gt;&lt;del&gt;发现 org 的 &lt;code&gt;BEGIN_SRC&lt;/code&gt; 输出的时候，会加一个换行在第一行，这个导致多了一个空白行，稍微有点丑了，回头有时间再看看是哪里的问题吧。&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;上面这个问题在 hugo 的 HEAD 版本里面已经修复了。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Dpi dp and px</title>
      <link>https://wdicc.com/dpi-dp-and-px/</link>
      <pubDate>Sat, 16 Sep 2017 10:18:50 +0800</pubDate>
      
      <guid>https://wdicc.com/dpi-dp-and-px/</guid>
      <description>&lt;p&gt;这几天折腾了一下 android 上面的布局，了解了一些基础概念。&lt;/p&gt;

&lt;p&gt;首先有两个概念，一个是分辨率，一个是屏幕的实际尺寸。我们一般讲的 &lt;code&gt;800x600&lt;/code&gt; 像素(px)，&lt;code&gt;1024x768&lt;/code&gt; 像素(px)这些，都是分辨率。然后 &lt;code&gt;5.5&lt;/code&gt; 寸(iPhone 6/7/8 plus)，&lt;code&gt;4.7&lt;/code&gt; 寸(iPhone 6/7/8)，&lt;code&gt;10.1&lt;/code&gt; 寸(iPad) 这些是实际尺寸，并且指的是屏幕对角线尺寸。&lt;/p&gt;

&lt;p&gt;一般来讲，除非是 5.5 和  10.1 这么大的差异，我们大多会在比如 5.5 和 4.7 上面使用同一个设计。比如在最上面 1cm (为什么说物理距离呢，因为手机屏幕就那么大，你不能把内容显示的太小，否则会看不清楚) 显示一个黄色的提示条。那么接下来的问题就是，1cm 对应的像素，就算在同一个设备的不同的分辨率下面，都是不一样的。那图怎么做？&lt;/p&gt;

&lt;p&gt;如果 20px 的图放到 800x600 的分辨率下面刚好，那么这个图放到了 1600x1200 的分辨率下面（这里说的是屏幕物理尺寸不变的情况下，因为如果物理尺寸如果也变大了，那就是另外一个情况了），不做缩放的话，就是会得到比 800x600 小一倍的效果。如果缩放的话，那就大小一样了，但是可能因为缩放导致失真。实际做法就是针对不同分辨率做不同的尺寸的图。比如针对 800x600 分辨率，做一个 20px 的图，那对于 1600x1200 分辨率的，做一个 40px 的图。以此类推。&lt;/p&gt;

&lt;p&gt;这样，三个概念就出来了&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;density&lt;/code&gt; 也就是 dpi，屏幕密度。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dp&lt;/code&gt; 是一个长度单位。&lt;/li&gt;
&lt;li&gt;常见的 &lt;code&gt;1x&lt;/code&gt;, &lt;code&gt;2x&lt;/code&gt;, &lt;code&gt;@2x&lt;/code&gt; 这些。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;density(dpi，屏幕密度) = 屏幕对角线的像素/对角线的物理尺寸 = (屏幕长的像素的平方 + 屏幕宽的像素的平方)开根号/对角线的物理尺寸&lt;/code&gt;，比如 iphone 3G/3GS 是 160, iphone 4 是 320。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;dp = px x 160 / dpi&lt;/code&gt;。比如 160dp 在 160 dpi 下面是 160px，在 320 dpi 下面是 320px。其实就是说，160dp 我们在 iphone 3g 上和在 iphone 4 上看到的物理长度是一样的。&lt;/p&gt;

&lt;p&gt;而 &lt;code&gt;1x&lt;/code&gt;, &lt;code&gt;2x&lt;/code&gt; 是 &lt;code&gt;px/dp = dpi/160&lt;/code&gt;。从上面那个例子也能看到，这个其实就是指 px 和 dp 的换算关系。一般我们要在某个手机上面开发，主要弄清楚的就是这个倍率就可以了。在 1x 的设备上面，想要展示 10px 的图，那么给 2x 的设备就得切一个 20px 的图，才能达到和 1x 上面一样的视觉效果。&lt;/p&gt;

&lt;p&gt;那我们一个 app 是需要同时准备展示在很多类型的设备上面的，1x, 1.5x, 2x 3x 等，总不能靠程序去计算然后决定用什么图吧。各系统其实已经做好了简单的适配方法了。比如 ios 里面，是通过给图取不同的名字来解决的，例如 example@2x.png，example@3x.png，ios 系统会自动去用对应的图。而 android 系统里面，是通过把图放入不同的目录来解决的，例如 drawable，drawable-hdpi, drawable-xhdbi，这几个分别对应 1x, 1.5x, 2x。&lt;/p&gt;

&lt;p&gt;其中要注意的是不要放错目录。如果把一个 1.5x 的图，放到了 1x 的目录下面，然后展示在一个 1.5x 的设备下面，会发现图会被缩放到 1.5 倍大小。&lt;/p&gt;

&lt;p&gt;参考链接:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.jianshu.com/p/913943d25829&#34;&gt;http://www.jianshu.com/p/913943d25829&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.zhihu.com/question/20697111&#34;&gt;https://www.zhihu.com/question/20697111&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Add float debug button for react native</title>
      <link>https://wdicc.com/add-float-debug-button-for-react-native/</link>
      <pubDate>Sat, 02 Sep 2017 18:22:47 +0800</pubDate>
      
      <guid>https://wdicc.com/add-float-debug-button-for-react-native/</guid>
      <description>

&lt;p&gt;React-native 里面在模拟器里面可以通过快捷键打开开发菜单，在设备里面可以通过摇晃设备打开开发菜单。但是摇晃有时候并不是一个好的操作，比如是个 pad，或者比如你自己的设备本身会触发晃动动作。那么如何在开发模式下面增加一个按钮打开这个菜单呢？可惜官方对这个功能没有兴趣多做开发 &lt;a href=&#34;https://github.com/facebook/react-native/issues/10191&#34;&gt;https://github.com/facebook/react-native/issues/10191&lt;/a&gt; 。&lt;/p&gt;

&lt;h2 id=&#34;ios&#34;&gt;iOS&lt;/h2&gt;

&lt;p&gt;ios 里面直接就把这个接口暴露出来了，可以直接在 js 里面调用。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;import {NativeModules} from &#39;react-native&#39;;

// 在某个按钮的动作里面
const {DevMenu} = NativeModules;
DevMenu.show();
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;android&#34;&gt;Android&lt;/h2&gt;

&lt;p&gt;iOS 是 react-native 的亲儿子，Android 里面并没有那么方便的方法，得自己通过 native 代码加。&lt;/p&gt;

&lt;p&gt;下面两种方式加的都是 &lt;code&gt;android.support.design.widget.FloatingActionButton&lt;/code&gt; 按钮，其它的类似。需要增加好编译依赖 &lt;code&gt;compile &#39;com.android.support:design:23.0.0&#39;&lt;/code&gt;，版本号按照自己的修改下。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;        private void addDevButton() {

            MainApplication application = (MainApplication) getApplication();
            ReactNativeHost reactNativeHost = application.getReactNativeHost();
            ReactInstanceManager reactInstanceManager = reactNativeHost.getReactInstanceManager();
            final DevSupportManager devSupportManager = reactInstanceManager.getDevSupportManager();

            // 这里是增加一个自定义菜单
//            devSupportManager.addCustomDevOption(&amp;quot;Custom dev option&amp;quot;, new DevOptionHandler() {
//                @Override
//                public void onOptionSelected() {
//                    Toast.makeText(MainActivity.this, &amp;quot;Hello from custom dev option&amp;quot;, Toast.LENGTH_SHORT).show();
//                }
//            });


            // Fake empty container dev_button_layout
            // 创建一个 layout
            RelativeLayout lContainerLayout = new RelativeLayout(mActivity.getApplicationContext());
            lContainerLayout.setLayoutParams(new RelativeLayout.LayoutParams(
                    ViewGroup.LayoutParams.MATCH_PARENT , ViewGroup.LayoutParams.MATCH_PARENT ));

            // custom view
            // 创建一个 button
            FloatingActionButton button = new FloatingActionButton(mActivity);
            button.setImageResource(R.drawable.ga_airplane);

            RelativeLayout.LayoutParams lButtonParams = new RelativeLayout.LayoutParams(
                    ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT
            );
            lButtonParams.addRule(RelativeLayout.ALIGN_PARENT_RIGHT);
            lButtonParams.addRule(RelativeLayout.ALIGN_PARENT_BOTTOM);
            button.setLayoutParams(lButtonParams);

            ViewGroup.MarginLayoutParams mp = (ViewGroup.MarginLayoutParams) button.getLayoutParams();
            mp.setMargins(0, 0, 0, dpToPx(mActivity, 125));

            button.setLayoutParams(mp);

            //设定拖动动作
            button.setOnTouchListener(new View.OnTouchListener() {
                @Override
                public boolean onTouch(View v, MotionEvent event) {
                    switch (event.getActionMasked()) {
                        case MotionEvent.ACTION_DOWN:
                            dX = v.getX() - event.getRawX();
                            dY = v.getY() - event.getRawY();
                            lastAction = MotionEvent.ACTION_DOWN;
                            break;

                        case MotionEvent.ACTION_MOVE:
                            v.setY(event.getRawY() + dY);
                            v.setX(event.getRawX() + dX);
                            lastAction = MotionEvent.ACTION_MOVE;
                            break;

                        case MotionEvent.ACTION_UP:
                            if (lastAction == MotionEvent.ACTION_DOWN)
                                // 点击的时候打开菜单
                                devSupportManager.showDevOptionsDialog();
                            break;

                        default:
                            return false;
                    }
                    return true;
                }
            });

            lContainerLayout.addView(button);
            addContentView(lContainerLayout, new ViewGroup.LayoutParams(
                    ViewGroup.LayoutParams.MATCH_PARENT , ViewGroup.LayoutParams.MATCH_PARENT ));
        }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上面是纯代码方式，还可以通过 xml 文件方式搞定。&lt;/p&gt;

&lt;p&gt;新建一个 layout 文件，取名比如叫做 &lt;code&gt;dev_button_layout.xml&lt;/code&gt;， rootTag 是 &lt;code&gt;RelativeLayout&lt;/code&gt;。然后在里面添加一个 &lt;code&gt;FloatingActionButton&lt;/code&gt;，id 设置为 &lt;code&gt;dev_button&lt;/code&gt;，然后设置好属性和位置。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;        private void addDevButton() {
            MainApplication application = (MainApplication) getApplication();
            ReactNativeHost reactNativeHost = application.getReactNativeHost();
            ReactInstanceManager reactInstanceManager = reactNativeHost.getReactInstanceManager();
            final DevSupportManager devSupportManager = reactInstanceManager.getDevSupportManager();

            View view = View.inflate(mActivity, R.layout.dev_button_layout, null);
            FloatingActionButton button = (FloatingActionButton) view.findViewById(R.id.dev_button);
            //button.setImageResource(R.drawable.ga_airplane);

            button.setOnTouchListener(new View.OnTouchListener() {
                @Override
                public boolean onTouch(View v, MotionEvent event) {
                    switch (event.getActionMasked()) {
                        case MotionEvent.ACTION_DOWN:
                            dX = v.getX() - event.getRawX();
                            dY = v.getY() - event.getRawY();
                            lastAction = MotionEvent.ACTION_DOWN;
                            break;

                        case MotionEvent.ACTION_MOVE:
                            v.setY(event.getRawY() + dY);
                            v.setX(event.getRawX() + dX);
                            lastAction = MotionEvent.ACTION_MOVE;
                            break;

                        case MotionEvent.ACTION_UP:
                            if (lastAction == MotionEvent.ACTION_DOWN)
                                devSupportManager.showDevOptionsDialog();
                            break;

                        default:
                            return false;
                    }
                    return true;
                }
            });

            addContentView(view, new ViewGroup.LayoutParams(
                    ViewGroup.LayoutParams.MATCH_PARENT , ViewGroup.LayoutParams.MATCH_PARENT ));
        }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后在你的 &lt;code&gt;MainActivity&lt;/code&gt; 的 &lt;code&gt;onCreate&lt;/code&gt; 里面，在 &lt;code&gt;super.onCreate(savedInstanceState);&lt;/code&gt; 后面增加&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;            // debug 环境下才显示
            if(BuildConfig.DEBUG)
                addDevButton();
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Emacs as react native ide</title>
      <link>https://wdicc.com/emacs-as-react-native-ide/</link>
      <pubDate>Mon, 24 Jul 2017 20:02:00 +0800</pubDate>
      
      <guid>https://wdicc.com/emacs-as-react-native-ide/</guid>
      <description>

&lt;p&gt;最近又在写 &lt;code&gt;react-native&lt;/code&gt; 了，对自己的环境又作了一番配置。记录一下。&lt;/p&gt;

&lt;h2 id=&#34;web-mode&#34;&gt;web-mode&lt;/h2&gt;

&lt;p&gt;我主要用的 mode 是 web-mode。这个 mode 简直万能，能处理 html，jsx，js 等。具体配置如下。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(use-package web-mode
  :ensure t
  :config
  (add-to-list &#39;auto-mode-alist &#39;(&amp;quot;\\.html\\&#39;&amp;quot; . web-mode))
  (add-to-list &#39;auto-mode-alist &#39;(&amp;quot;\\.js\\&#39;&amp;quot; . web-mode))
  (add-to-list &#39;auto-mode-alist &#39;(&amp;quot;\\.ejs\\&#39;&amp;quot; . web-mode))
  (setq web-mode-markup-indent-offset 4)
  (setq web-mode-css-indent-offset 4)
  (setq web-mode-code-indent-offset 4)

  (setq web-mode-content-types-alist
        &#39;((&amp;quot;jsx&amp;quot; . &amp;quot;.*\\.js\\&#39;&amp;quot;))
        )
)

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;主要是那个 &lt;code&gt;web-mode-content-types-alist&lt;/code&gt; 的配置，让 web-mode 处理 js 文件的时候，把 &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt; 代码段识别成 jsx。这样能把缩进处理好。&lt;/p&gt;

&lt;p&gt;我还试过 rjsx-mode，这个用起来也可以，基于 js2-mdoe，js2-mode 有的一些用法都支持，并且 flycheck 都不用做多余的配置。但是主要问题是，jsx 的代码缩进有问题。&lt;/p&gt;

&lt;h2 id=&#34;flycheck&#34;&gt;flycheck&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;(use-package flycheck
  :ensure t
  :config
  (global-flycheck-mode t)
  (flycheck-add-mode &#39;javascript-eslint &#39;web-mode)
)

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;把 web-mode 的 checker 设置为 &lt;code&gt;javascript-eslint&lt;/code&gt;，如果你用别的就设置成对应的。配合用的 .eslintrc 文件如下，可以根据自己需求调整。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
    &amp;quot;parser&amp;quot;: &amp;quot;babel-eslint&amp;quot;,
    &amp;quot;env&amp;quot;: {
        &amp;quot;es6&amp;quot;: true
    },
    &amp;quot;parserOptions&amp;quot;: {
        &amp;quot;ecmaVersion&amp;quot;: 6,
        &amp;quot;sourceType&amp;quot;: &amp;quot;module&amp;quot;,
        &amp;quot;ecmaFeatures&amp;quot;: {
            &amp;quot;jsx&amp;quot;: true
        }
    },
    &amp;quot;plugins&amp;quot;: [
        &amp;quot;react&amp;quot;
    ],
    &amp;quot;globals&amp;quot;: {
        &amp;quot;require&amp;quot;: false,
        &amp;quot;module&amp;quot;: false,
        &amp;quot;setInterval&amp;quot;: false,
        &amp;quot;clearInterval&amp;quot;: false,
        &amp;quot;setTimeout&amp;quot;: false,
        &amp;quot;clearTimeout&amp;quot;: false,
        &amp;quot;console&amp;quot;: false
    },
    &amp;quot;extends&amp;quot;: [
        &amp;quot;eslint:recommended&amp;quot;,
        &amp;quot;plugin:react/recommended&amp;quot;
    ],
    &amp;quot;rules&amp;quot;: {
        // overrides
        &amp;quot;react/prop-types&amp;quot;: 0,
        &amp;quot;indent&amp;quot;: [&amp;quot;error&amp;quot;, 4],
        &amp;quot;react/jsx-indent&amp;quot;: [&amp;quot;error&amp;quot;, 4],
        &amp;quot;no-trailing-spaces&amp;quot;: 2,
        &amp;quot;no-console&amp;quot;: 0,
        &amp;quot;comma-dangle&amp;quot;: [&amp;quot;error&amp;quot;, &amp;quot;never&amp;quot;]
    }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;补全&#34;&gt;补全&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;(use-package tern
  :ensure t
  :config
  (add-hook &#39;web-mode-hook (lambda () (tern-mode t)))
  :bind (:map tern-mode-keymap
              (&amp;quot;M-*&amp;quot; . tern-pop-find-definition))
  )

(use-package company-tern
  :ensure t
  :config
  (add-to-list &#39;company-backends &#39;company-tern)
  )

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我用的是 company 后端用的是 tern。.tern-project 的内容如下，可以根据自己的情况调整下。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  &amp;quot;ecmaVersion&amp;quot;: 6,
  &amp;quot;libs&amp;quot;: [
    &amp;quot;browser&amp;quot;
  ],
  &amp;quot;loadEagerly&amp;quot;: [
    &amp;quot;Controller/*.js&amp;quot;,
    &amp;quot;Utility/*.js&amp;quot;,
    &amp;quot;App.js&amp;quot;
  ],
  &amp;quot;dontLoad&amp;quot;: [
    &amp;quot;node_modules/**&amp;quot;
  ],
  &amp;quot;plugins&amp;quot;: {
    &amp;quot;node&amp;quot;: {},
    &amp;quot;es_modules&amp;quot;: {},
    &amp;quot;jsx&amp;quot;: {}
  }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;补全-update&#34;&gt;补全 update&lt;/h2&gt;

&lt;p&gt;tern 这个东西用了一段时间，发现不是很好用。经常找不到 symbol，以及在 jsx 代码里面无法跳转。后来发现了 &lt;a href=&#34;https://github.com/ananthakumaran/tide&#34;&gt;tide&lt;/a&gt;，简直好用到不行。&lt;/p&gt;

&lt;p&gt;tide 是基于 vscode 用的 tsserver 来搞的。这个开始是给 TypeScript 用的，目前也支持普通 js。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(defun setup-tide-mode ()
  (interactive)
  ;; (setq tide-tsserver-process-environment &#39;(&amp;quot;TSS_LOG=-level verbose -file /tmp/tss.log&amp;quot;))
  (tide-setup)
  ;;(setq flycheck-check-syntax-automatically &#39;(save mode-enabled))
  (eldoc-mode +1)
  (tide-hl-identifier-mode +1)
  ;; company is an optional dependency. You have to
  ;; install it separately via package-install
  ;; `M-x package-install [ret] company`
  )


(use-package tide
  :ensure t
  :bind ((&amp;quot;M-.&amp;quot; . tide-jump-to-definition)
         (&amp;quot;M-,&amp;quot; . tide-jump-back)
         )

  :config
  (setup-tide-mode)
  ;; aligns annotation to the right hand side
  (setq company-tooltip-align-annotations t)

  ;; formats the buffer before saving
  ;;(add-hook &#39;before-save-hook &#39;tide-format-before-save)

  ;; configure javascript-tide checker to run after your default javascript checker
  (flycheck-add-next-checker &#39;javascript-eslint &#39;javascript-tide &#39;append)

  (add-hook &#39;web-mode-hook
            (lambda ()
              (when (string-equal &amp;quot;js&amp;quot; (file-name-extension buffer-file-name))
                (setup-tide-mode))))
  ;; configure jsx-tide checker to run after your default jsx checker
  (flycheck-add-mode &#39;javascript-eslint &#39;web-mode)
  (flycheck-add-next-checker &#39;javascript-eslint &#39;jsx-tide &#39;append)
  )


;; 针对 web-mode 做一个配置
    (add-hook &#39;web-mode-hook
            (lambda ()
              (set (make-local-variable &#39;company-backends)
                   &#39;(
                      company-tide
                      ;company-react
                      company-dabbrev-code
                      company-keywords
                      company-files
                      company-yasnippet))))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;其实我也没做啥配置，就是官方的那几个就可以。然后还有一个 jsconfig.json 的配置文件如下。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
    &amp;quot;compilerOptions&amp;quot;: {
        &amp;quot;allowJs&amp;quot;: true,
        &amp;quot;allowSyntheticDefaultImports&amp;quot;: true
    },
    &amp;quot;exclude&amp;quot;: [
        &amp;quot;node_modules&amp;quot;,
        &amp;quot;ios&amp;quot;,
        &amp;quot;android&amp;quot;,
        &amp;quot;.git&amp;quot;
    ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这就支持了好多功能，比如光标停留在一个 keyword 上面就会高亮相关的，比如 company 的补全啥的，都很不错。还支持 refactor。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Django middleware</title>
      <link>https://wdicc.com/django-middleware/</link>
      <pubDate>Wed, 05 Jul 2017 18:07:50 +0800</pubDate>
      
      <guid>https://wdicc.com/django-middleware/</guid>
      <description>&lt;p&gt;Django 提供了 &lt;a href=&#34;https://docs.djangoproject.com/en/1.11/topics/http/middleware/&#34; title=&#34;middleware&#34;&gt;middleware&lt;/a&gt; 来让你 hack Request 和 Response。用的时候有几个问题需要注意一下。&lt;/p&gt;

&lt;h1 id=&#34;call-方法&#34;&gt;&lt;code&gt;__call__&lt;/code&gt; 方法&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;__call__&lt;/code&gt; 方法实际上就是最早收到 request 的地方，如果不关心 view，那么就可以在这里做你想要做的事情。比如认证用户啥的。这个实际上应该就是早期的 &lt;code&gt;process_request&lt;/code&gt; 。&lt;/p&gt;

&lt;h1 id=&#34;process-view-方法&#34;&gt;process_view 方法&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;process_view&lt;/code&gt; 方法会接收到 view_func 和其参数，如果想要针对这些东西处理，可以在这里动作。比如我们所有 api 请求的 POST 的 body 里面都是固定格式的 json 数据，我就在这里检查了 json 的格式，并把解析结果给到了 view_func。&lt;/p&gt;

&lt;p&gt;如果不打算对 view_func 做什么事情，那就最好做完想做的事情，直接返回 &lt;code&gt;None&lt;/code&gt; 就可以。否则处理完毕之后，返回一个 response 对象。&lt;/p&gt;

&lt;p&gt;要注意的是，这里最好不要产生 exception，产生了会把逻辑跑到 Middleware 的 exception 逻辑里面。所以最好对自己的代码段加上 try-except 逻辑。&lt;/p&gt;

&lt;p&gt;另外，这里可以对 view_func 做调用，直接返回 view_func 的结果或者处理之后的结果，只要保证是个 response 对象就可以了。也可以不做调用，返回 &lt;code&gt;None&lt;/code&gt; ，后续 django 也会调用。要注意的是，如果你对 view_func 做了调用，那么在捕捉到错误的时候，except 里面应该也需要返回一个 response 对象，不能返回 &lt;code&gt;None&lt;/code&gt; 了，否则 djangon 还会再次调用这个 view_func 。&lt;/p&gt;

&lt;h1 id=&#34;process-exception-方法&#34;&gt;process_exception 方法&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;process_exception&lt;/code&gt; 方法是在 view 报错的情况下会调用。我在这里统一返回了 server error 的 json，http 状态是 200 的。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Emacs as python IDE</title>
      <link>https://wdicc.com/emacs-as-python-ide/</link>
      <pubDate>Fri, 30 Jun 2017 20:47:56 +0800</pubDate>
      
      <guid>https://wdicc.com/emacs-as-python-ide/</guid>
      <description>&lt;p&gt;最近 python 写的比较多，比较了几个编辑器，最后还是留下了 emacs。&lt;/p&gt;

&lt;p&gt;主要比较了 emacs 和 pycharm。pycharm 绝对是一个很强的 IDE，几乎可以补全任何东西，写代码各种提示。比如 Django 里面定义一个 model User 之后，就可以 &lt;code&gt;User.&lt;/code&gt; 之后提示 &lt;code&gt;objects&lt;/code&gt; ，这个是依据 metaclass 来补全的。另外还有比如写 &lt;code&gt;User.objects.get(|)&lt;/code&gt; 的时候，光标在竖线那个位置，会提示 &lt;code&gt;User&lt;/code&gt; 的字段，这个相当好用。这两个只是皮毛，实在是太好用了。&lt;/p&gt;

&lt;p&gt;但是为什么还要用 emacs 呢？emacs 的编辑器功能太好用了。比如 &lt;code&gt;&amp;lt;&lt;/code&gt; 到页首， &lt;code&gt;&amp;gt;&lt;/code&gt; 到页尾， &lt;code&gt;C-x b&lt;/code&gt; 切换 buffer，还有切换 frame，等等快捷键非常舒服，完全不用鼠标。不过也可能是我习惯了 emacs 的快捷键了。在 pycharm 里面时不时就不行，比如选择一段文字，纯键盘需要按 &lt;code&gt;-&amp;gt;&lt;/code&gt; 配合才可以，那还不如用鼠标算了。&lt;/p&gt;

&lt;p&gt;其实如果一上手就用 pycharm，那绝对会觉得很爽。&lt;/p&gt;

&lt;p&gt;emacs 写 python 在原生的 &lt;code&gt;python-mode&lt;/code&gt; 基础上有两个好用的选择，一个是 &lt;a href=&#34;https://github.com/proofit404/anaconda-mode&#34; title=&#34;anaconda-mode&#34;&gt;anaconda-mode&lt;/a&gt;，一个是 &lt;a href=&#34;https://github.com/jorgenschaefer/elpy&#34; title=&#34;elpy&#34;&gt;elpy&lt;/a&gt;。 &lt;code&gt;anaconda-mode&lt;/code&gt; 相对来说比较简陋一点，但是补全什么的没问题，缺少重构功能。两个的工作模式都是会启动一个补全用的进程，然后通过 lisp 和这个进程交互获取补全信息。&lt;/p&gt;

&lt;h2 id=&#34;anaconda-mode-遇到的问题和解决&#34;&gt;anaconda-mode 遇到的问题和解决&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;anaconda-mode&lt;/code&gt; 我遇到一个问题，为了下载 emacs 的 package 方便，我设置了代理，这个代理导致 &lt;code&gt;anaconda-mode&lt;/code&gt; 和补全进程交互的时候，连接不能断开，就会不停的新建连接，一会就打开文件数满了，可以参观这个 &lt;a href=&#34;https://github.com/proofit404/anaconda-mode/issues/255&#34; title=&#34;issue&#34;&gt;issue&lt;/a&gt;。主要是设置了 &lt;code&gt;no_proxy&lt;/code&gt; 解决。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; (setq url-proxy-services
       &#39;((&amp;quot;no_proxy&amp;quot; . &amp;quot;^\\(127.0.0.1\\|localhost\\|10.*\\)&amp;quot;)
         (&amp;quot;http&amp;quot; . &amp;quot;127.0.0.1:6152&amp;quot;)
         (&amp;quot;https&amp;quot; . &amp;quot;127.0.0.1:6152&amp;quot;)))
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;auto-virtualenv&#34;&gt;auto-virtualenv&lt;/h2&gt;

&lt;p&gt;我的 python 项目使用了 &lt;code&gt;virtualenv&lt;/code&gt; ，会在项目目录下面建一个 &lt;code&gt;.venv&lt;/code&gt; 的目录，把虚拟环境放进去。 &lt;code&gt;anaconda-mode&lt;/code&gt; 提供了 &lt;code&gt;pythonic-activate&lt;/code&gt; 命令， &lt;code&gt;elpy&lt;/code&gt; 提供了 &lt;code&gt;pyvenv-activate&lt;/code&gt; 来切换环境。但是每次打开项目都需要搞一下就挺恶心了。&lt;/p&gt;

&lt;p&gt;然后找到了 &lt;a href=&#34;https://github.com/marcwebbie/auto-virtualenv&#34; title=&#34;auto-virtualenv&#34;&gt;auto-virtualenv&lt;/a&gt; 这个工具。安装之后，他会自动查找你的项目里面的可能的虚拟环境。项目根目录识别是通过 &lt;code&gt;.git&lt;/code&gt; ， &lt;code&gt;.hg&lt;/code&gt; 等一些逻辑来判定的，具体可以看代码。然后虚拟环境识别是通过根目录下面的 &lt;code&gt;.python-version&lt;/code&gt; &lt;code&gt;.venv&lt;/code&gt; 等来识别的。&lt;/p&gt;

&lt;p&gt;我的项目是建了一个 &lt;code&gt;.venv&lt;/code&gt; 目录，所以每次打开一个 python 文件，会自动配置好 virtualenv 的环境，这样 &lt;code&gt;elpy&lt;/code&gt; 在 django 自带的 model 上面也可以查找 defination。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(use-package auto-virtualenv
  :ensure t
  :config
  (add-hook &#39;python-mode-hook &#39;auto-virtualenv-set-virtualenv)
)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;elpy&#34;&gt;elpy&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;elpy&lt;/code&gt; 其实没有什么好配置的，主要注意的是，因为我们用了 virtualenv 环境，所以需要他依赖的包都装在 &lt;code&gt;.venv&lt;/code&gt; 环境或者装在 python 自己的目录下面应该都可以。启动 emacs 之后可以使用 &lt;code&gt;M-x elpy-config&lt;/code&gt; 看看还有什么没配置好。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(use-package elpy
  :ensure t
  :init
  (setq elpy-rpc-backend &amp;quot;jedi&amp;quot;)
  (elpy-enable)
  :config
  (add-hook &#39;python-mode-hook &#39;elpy-mode)
  (with-eval-after-load &#39;elpy
  (add-hook &#39;elpy-mode-hook &#39;elpy-use-ipython))
  :bind ((&amp;quot;M-*&amp;quot; . pop-tag-mark))
  )
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;elpy-rpc-backend&lt;/code&gt; 有两个选择，一个 &lt;code&gt;jedi&lt;/code&gt; ，一个 &lt;code&gt;rope&lt;/code&gt; ，我试了感觉区别不大，另外 rope 感觉要死了。所以我用了 &lt;code&gt;jedi&lt;/code&gt; 。&lt;/p&gt;

&lt;h2 id=&#34;flycheck&#34;&gt;flycheck&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/flycheck/flycheck&#34; title=&#34;flycheck&#34;&gt;flycheck&lt;/a&gt; 可以配合 &lt;code&gt;flake8&lt;/code&gt; 实时显示出来你的代码有不符合 flake8 要求的地方，很方便。这个工具我也遇到一个坑 &lt;a href=&#34;https://github.com/flycheck/flycheck/issues/1228#issuecomment-311706873&#34; title=&#34;issue&#34;&gt;issue&lt;/a&gt;，有兴趣可以看看。主要原因是 flycheck 是使用 &lt;code&gt;flake8 &amp;lt; xxx.py&lt;/code&gt; 这种方式检查的，而这种方式下 flake8 不会考虑文件头部的 &lt;code&gt;coding&lt;/code&gt; 设置，来识别文件编码，而是根据 &lt;code&gt;LC_CTYPE&lt;/code&gt; 环境变量来的，所以只要正确设置这个变量就可以了。 issue 里面提到的设置 emacs 的编码屁用么有的。&lt;/p&gt;

&lt;p&gt;flycheck 可以配合 flake8 和 pylint 来做 python 代码的检查，如果装了前者，就不会考虑后者了。我试过 pylint，这货默认要求有点高，比如 class 和 method 没有 doc string 也会提示，代码一堆问题，我就赶紧换掉了。。。&lt;/p&gt;

&lt;h2 id=&#34;python-outline&#34;&gt;python outline&lt;/h2&gt;

&lt;p&gt;好处是打开 python 文件的时候，会把代码都折叠起来，按照需要你自己打开就好。elpa 里面没有，网上搜到的。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(use-package python-magic
  :ensure outline-magic
  :config
  (add-hook &#39;python-mode-hook &#39;my-python-outline-hook)
  (add-hook &#39;python-mode-hook
            (lambda ()
              (setq outline-regexp &amp;quot;def\\|class &amp;quot;)))

  )
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;indent-tools&#34;&gt;indent-tools&lt;/h2&gt;

&lt;p&gt;这个工具是用来锁进 python 代码和浏览代码用的。搜一下有动图，看看就知道了。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(use-package indent-tools
  :ensure t
  :init
  (add-hook &#39;python-mode-hook
            (lambda () (define-key python-mode-map (kbd &amp;quot;C-c i&amp;quot;) &#39;indent-tools-hydra/body))
            )
  )
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;yasnippet-和-company&#34;&gt;yasnippet 和 company&lt;/h2&gt;

&lt;p&gt;elpy 是使用这两个补全的。有几个有用的配置， &lt;code&gt;C-s&lt;/code&gt; 那个，可以在补全候选菜单出来的时候，用关键词过滤结果。&lt;/p&gt;

&lt;p&gt;我没搞定在 company 里面直接显示出来 yasnippet 可用的 snippet，只好设置了一个快捷键 &lt;code&gt;C-c y&lt;/code&gt; 来提示。可以提示出来一大堆。比如我经常写错的 &lt;code&gt;-*- coding:utf8 -*-&lt;/code&gt; 有一个 snippet 叫做 &lt;code&gt;utf8&lt;/code&gt; ，直接输入之后 tab 就可以了。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(use-package company
  :ensure t
  :init
  (setq company-minimum-prefix-length 2)
  (setq company-dabbrev-ignore-case t)
  :config
  (add-hook &#39;after-init-hook &#39;global-company-mode)
  (define-key company-active-map (kbd &amp;quot;C-n&amp;quot;) #&#39;company-select-next)
  (define-key company-active-map (kbd &amp;quot;C-p&amp;quot;) #&#39;company-select-previous)
  (define-key company-active-map (kbd &amp;quot;C-s&amp;quot;) #&#39;company-filter-candidates)

  (global-set-key (kbd &amp;quot;C-c y&amp;quot;) &#39;company-yasnippet)
  )
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Run ssserver on VPS</title>
      <link>https://wdicc.com/run-ssserver-on-vps/</link>
      <pubDate>Fri, 09 Jun 2017 10:55:44 +0800</pubDate>
      
      <guid>https://wdicc.com/run-ssserver-on-vps/</guid>
      <description>&lt;p&gt;VPS 上面好早以前用过 docker 跑了一个 container 运行了一个 ssserver, 是从 debian 基本系统创建, 然后手动安装各种软件弄好的. 最近朋友升级了 docker, 那个工作有点问题了,就重新搞了一下, 发现现在好方便.&lt;/p&gt;

&lt;p&gt;我用的是这里提供的 dockerfile https://github.com/EasyPi/docker-shadowsocks-libev, 他的例子里面使用了 &lt;code&gt;docker-compose&lt;/code&gt; 来创建, 发现很简单, 不过遇到了一个问题, 说一下解决办法.&lt;/p&gt;

&lt;p&gt;这个 docker 本地监听的端口是固定的 8388 不能修改, 例如 docker-compose.yml 里面&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;server:
  image: easypi/shadowsocks-libev
  container_name: wd-ss
  ports:
    - &amp;quot;HOST_PORT:8388/tcp&amp;quot;
    - &amp;quot;HOST_PORT:8388/udp&amp;quot;
  environment:
    - METHOD=aes-256-cfb
    - PASSWORD=5ouMnqPyzseL
  restart: always
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;需要配置的是 &lt;code&gt;HOST_PORT&lt;/code&gt; &lt;code&gt;METHOD&lt;/code&gt; &lt;code&gt;PASSWORD&lt;/code&gt; 这三个变量, 然后我还指定了 &lt;code&gt;container_name&lt;/code&gt; 方便以后的操作, 不指定会自动产生一个.&lt;/p&gt;

&lt;p&gt;启动服务之后,可以使用 &lt;code&gt;docker logs wd-ss&lt;/code&gt; 来看 log, 类似于下面, 这个 docker 启用了 udp relay 和 tcp fast open, 差不多也就够了.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; 2017-06-09 03:13:17 INFO: using tcp fast open
 2017-06-09 03:13:17 INFO: UDP relay enabled
 2017-06-09 03:13:17 INFO: initializing ciphers... aes-256-cfb
 2017-06-09 03:13:17 INFO: using nameserver: 8.8.8.8
 2017-06-09 03:13:17 INFO: tcp server listening at 0.0.0.0:8388
 2017-06-09 03:13:17 INFO: udp server listening at 0.0.0.0:8388
 2017-06-09 03:13:17 INFO: running from root user
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果想要开启更多选项, 可以在 compose 文件里面使用 command 自定义启动命令&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  command:
    ss-server -s 0.0.0.0
              -p 8338
              -k 5C4D5403-31C9
              -m aes-256-cfb
              -t 30
              --fast-open
              -u
              -a nobody
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;自己实验过程中, 如果可以随时删除自己的 container 重建, 将来 ss 升级的话, 只需要把 image 更新一下,然后删除再新建一下 container 就好了.用起来还是相当简单方便的.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Meetings and meetings</title>
      <link>https://wdicc.com/meetings-and-meetings/</link>
      <pubDate>Sat, 08 Apr 2017 15:16:49 +0800</pubDate>
      
      <guid>https://wdicc.com/meetings-and-meetings/</guid>
      <description>&lt;p&gt;前几天&lt;a href=&#34;https://haohailong.net/&#34; title=&#34;海龙&#34;&gt;海龙&lt;/a&gt; 在 twitter 的提了一个问题“这个世界上有喜欢开会的人吗？能和我说说理由吗？”。作为开了很多会的人，由不住想说两句。&lt;/p&gt;

&lt;ul&gt;
首先，高质量的会应该具备什么呢？我也没看过《罗伯特议事规则》这样的书（放在 kindle 里面好久了一直没看过，汗颜。。），就是自己按照自己参与的情况总结下：
&lt;li&gt;会议前必要的沟通，好确认是不是需要你参加。当然也有一定可能性组织会议的人确认需要你参加而不做沟通（当然也不排除判断错误的时候 QAQ）。&lt;/li&gt;
&lt;li&gt;组织会议的人做好前期调研，会议讨论的一些相关方案的基本情况应该需要比较了解。避免好容易召集齐人之后，发现要讨论的内容本身自己互相矛盾，或者需要参会的人没有通知等情况。&lt;/li&gt;
&lt;li&gt;邮件通知与会人会议要沟通的内容，和希望达成的目标，让大家提前了解事情的原委。也给大家一个机会提前确认下是不是真的和自己有关系。&lt;/li&gt;
&lt;li&gt;有了希望达成的目标，就应该会比较明确具体需要谁参与，比如想要一个明确的决定的时候，却约一个不能拍板的人来，这会议注定不能成功。&lt;/li&gt;
&lt;li&gt;会议中有可以控制会议节奏的人主持。能适时的阻止一些无关话题，扯皮，控制会议节奏，避免开大长会和会上吵架。&lt;/li&gt;
&lt;li&gt;会议中有人记录会议记录，结束后有人会把会议记录和结论(这个很重要，没有结论的会就是没必要开的会)发给所有人。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;下面列几个我作为技术人员常见的一些烂会。&lt;/p&gt;

&lt;p&gt;产品总监派一个刚入职几天业务都没摸清的人召集一帮干了好几年的工程师开会。这种情况下，产品经理大概率会被工程师各种怼，因为他不可能真的熟悉产品，工程师提到的很多可能的问题都不太可能圆满回答，最后会发现要讨论的问题各种依赖性，A 功能不确定的情况下，B 功能可能直接就不存在而没必要讨论了。最后会导致会议非常低效。这个时候所有人都会不爽，技术工程师会认为浪费他的时间，产品经理会认为这些人好难配合。其实锅应该是在产品总监头上。&lt;/p&gt;

&lt;p&gt;跨部门的会议。很多时候莫名其妙就招呼你去开会，到了之后也不知道是讨论什么的，最后听半天发现貌似和自己一毛钱关系都没有，浪费几个小时。当然浪费的是你的时间，组织会议的人其实是有收获的，他明白这事情和你无关。&lt;/p&gt;

&lt;p&gt;头脑风暴会议当作需求讨论会来开。有时候对方可能根本没有明确的想法，你当成最终需求讨论半天指出来其中各种问题，最后发现其实他们根本就确定怎么做呢。这种情况其实就是那个网传的“产品经理找你聊一天，他的需求有了，你的程序还没写”的情况。毕竟需求会的优先级会比头脑风暴要稍微高一点。&lt;/p&gt;

&lt;p&gt;如果作为组织者，就是尽量做到前面提到的好的会议应该具备的条件，避免浪费别人时间。作为参与者，如果有能力，遇到有问题的会议，应该想办法协助会议组织者把会议变高效，提高效率的同时，自己也会节省不必要的时间，我经常这么干，毕竟年轻人不容易。。。。当然，我有时候不一定那么有耐心，遇到垃圾会有时候直接就走了，留他们继续浪费时间。&lt;/p&gt;

&lt;p&gt;再回到海龙的问题，我的回答是有些人为了合理的浪费时间，是会喜欢开会的，因为这样会让别人觉得他的时间安排很充实，因为整天不在座位，在忙。不知道各位开会的时候有没有遇到一些人全部时间都是在刷手机，只是偶尔说一两句话？这些人就是我说的这种人。我如果遇到我没兴趣的会或者和我无关的会议，我会直接和组织的人申请离开，如果确实后面和我有关系，那麻烦到了时间点叫我（当然你也得保证下到时可以随叫随到，避免浪费其他参会人的时间等你），当然，呃…… 如果我碰巧也想合理的浪费一下时间。。。。&lt;/p&gt;

&lt;p&gt;这些人一般都需要是 leader，至少有人在给他创造 GDP 的，否则一个手头很多工作要干的人，你让他开这种无意义的会他自己也不答应，否则其他工作完不成无法交代的。不过某种意义上讲，这些人也是有贡献的，至少能组织一些人贡献 GDP 就是贡献。&lt;/p&gt;

&lt;p&gt;感觉跨职业跨部门的会比较容易产生垃圾会，因为看问题角度不一样，有时候会比较难互相理解。我们技术人员很多时候开会，都是找一块白板，画几个图，大家就都明白了，很快就能出决议，不能定的一般可能是需要 leader 拍板的。&lt;/p&gt;

&lt;p&gt;同一个部门的会大家会接触比较多比较容易妥协，能接受自己多花点时间或者吃点小亏来完成一个事情。这其实也是所谓的拓展，团队活动，年会想要达到的目的，如果大家都很熟悉的情况下，就比较容易站在对方的角度想问题，遇到事情容易妥协。&lt;/p&gt;

&lt;p&gt;上面提到的这些问题其实越大的公司问题越多，反而小公司比较少，因为头绪少，并且大家都比较熟悉的缘故。当然实在遇到一个比较弱的会议组织者，烂会也不可避免。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Something about cruise tour</title>
      <link>https://wdicc.com/something-about-cruise-tour/</link>
      <pubDate>Mon, 20 Mar 2017 20:41:10 +0800</pubDate>
      
      <guid>https://wdicc.com/something-about-cruise-tour/</guid>
      <description>&lt;p&gt;之前知道邮轮游一直没有体验过，据说是在上面各种滚来滚去看书，因为手机没有信号，没有网络。前几天体验了一把，总结一下。&lt;/p&gt;

&lt;h1 id=&#34;一句话总结&#34;&gt;一句话总结&lt;/h1&gt;

&lt;p&gt;这上面有你讨厌的所有因素，大妈，广场舞，广场卡拉 ok，小孩子，无序，占座，插队，甚至最后一天还目睹了两起吵架。&lt;/p&gt;

&lt;h1 id=&#34;邮轮游玩什么&#34;&gt;邮轮游玩什么&lt;/h1&gt;

&lt;p&gt;我参加的是歌诗达幸运号（Costa Fortun），邮轮上面估计 80% 都是各种大爷大妈，带着女儿外孙。你可以想象一下，平时最不喜欢的组合在这里最全了。&lt;/p&gt;

&lt;p&gt;邮轮上面有免费的自助餐和一些特别的餐食，比如批萨，面条，猪排什么的。也有收费的餐食，当然你可以不去。酒和软饮都是收费的，开饭的时候有免费的白水给你喝，屋子里面是没有的。&lt;/p&gt;

&lt;p&gt;邮轮上面一般有大量的娱乐设施，比如赌场，游戏机，泳池，桑拿，剧场等。还定期有各种娱乐活动，比如猜个字啊，跳个舞什么的。所以第一次去还是可以看个新鲜的，尤其可能还有一些漂亮的陪玩 mm，看着也还可以。游戏机赌场是收费的，恩。&lt;/p&gt;

&lt;p&gt;此外剧场每天基本都会有一场大型的演出，30-40 分钟，可以让你打发时间。但是剧场虽然每天演出内容不一样，但是演员总是那一波，看多了其实也会腻味。&lt;/p&gt;

&lt;p&gt;房间里面也有电视，不过我观察电视都是反复重播录下来的一些电视，然后有一个电影台还是只有那么几部反复重复播放，《x man 天启》我看了不下 10 遍。&lt;/p&gt;

&lt;p&gt;小孩也有人给带着玩游戏，有专门的儿童俱乐部。还有健身房，健身房是我唯一对这次邮轮活动满意的地方，当然肯定不是对环境满意，毕竟里面充满了大爷大妈，满意的地方主要是在设备，设备真心不错。浴室和换衣间地板异常干净，比起我家楼下的奥力，简直天上地下。&lt;/p&gt;

&lt;p&gt;邮轮一般有那么1，2天是下船，我们这次的安排很屎，景点很无聊，低接导游也只是对购物有兴趣，购物店虽然不贵，但是东西比较少，挺没意思的。&lt;/p&gt;

&lt;h1 id=&#34;让人反感的几个瞬间&#34;&gt;让人反感的几个瞬间&lt;/h1&gt;

&lt;p&gt;排队上邮轮的时候，过安检的时候就一条队排的特别粗，到了最后那变细互相挤着往前走。我们后面有个阿姨就各种急着往你前面走，我老婆发现之后就故意挤着不让，我看的笑死，呵呵。&lt;/p&gt;

&lt;p&gt;第一天必须做逃生演习。有个大爷一家推着小车带着孩子，孩子可能没一会睡着了。而演习是需要所有人参加的，所以就不得不等比较慢的人。大爷就生气了，开始呵斥工作人员，「孩子都睡着了，啥时候开始」之类的，声音巨大。工作人员大都是外籍，估计也吓了一跳。最后结束的时候，大爷还过去指着那个工作人员不知道说了什么。&lt;/p&gt;

&lt;p&gt;剧院演出，基本前三四排上面都是东西占座的。除非你提前半个小时到。另外就是各种小孩大声说话也没人管。有时候酒吧做游戏，工作人员都明确说了游戏可能比较激烈，让大家把小孩弄走，但是看着一个女的抱着小孩几次被劝离之后还是要上去玩，貌似还是上去让小孩参与。&lt;/p&gt;

&lt;p&gt;昨天有个游戏，几个被淘汰的大妈，悄悄的跑回去继续参与，也有跑回去被发现之后赶走，再次跑回去的，当着一百来号人目睹就那么做，真的无语。&lt;/p&gt;

&lt;p&gt;今天下船之前大家集中在一个地方等着，有个姥爷带着孙女玩气球。有个哥们玩心重，带了个面具就冲那小孩过去了，小孩吓的赶紧跑到了姥爷后面，那个哥们就走了。过了半分钟小孩反映过来开始哭，那姥爷就开始不爽了。后来他们全家，追着那小伙骂，最后把面具也抢过来了，还要护照说要以后有啥毛病要找他。纠缠了能有10分钟。&lt;/p&gt;

&lt;p&gt;这只是记得起来的几个，反正年轻人真的不建议去邮轮了。如果是自己父母，倒是可以推荐去，他们应该喜欢。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>My way to keep fit</title>
      <link>https://wdicc.com/my-way-to-keep-fit/</link>
      <pubDate>Mon, 13 Mar 2017 15:19:30 +0800</pubDate>
      
      <guid>https://wdicc.com/my-way-to-keep-fit/</guid>
      <description>&lt;p&gt;目前第一阶段减肥基本告一段落，后面目标是保持目前体重 6 个月。&lt;/p&gt;

&lt;h1 id=&#34;先聊聊结果&#34;&gt;先聊聊结果&lt;/h1&gt;

&lt;p&gt;2014 年 9 月份前，我的体重最高到 98kg，甚至有时候超过了 100kg。第一阶段减肥可能截止到 2016 年中，减到体重大概是 92kg。第二阶段开始于 2016 年 2 月底，截止到今天体重 80kg。整体算下来减掉 40 斤。&lt;/p&gt;

&lt;h1 id=&#34;第一阶段&#34;&gt;第一阶段&lt;/h1&gt;

&lt;p&gt;2014 年开始我发现一种比较简单的减肥方法，就是不吃或者少吃晚饭。&lt;/p&gt;

&lt;p&gt;这个方法应该不一定对所有人适用。我估计应该只对 BMI(Body Mass Index, 身体质量指数，注意和体脂率不是一个东西)比较高的人有用吧。&lt;/p&gt;

&lt;p&gt;我当时 BMI 是 &lt;code&gt;98/1.77^2=31.28&lt;/code&gt; 是属于比较高的，坚持了上面的方法半年之后，大概最瘦的时候是 28，我查了是刚好脱离了肥胖那一档，进入了过重。&lt;/p&gt;

&lt;p&gt;我当时所在的公司的上班时间是 10:00 - 19:00，但是经常出现 20:00 以后才从公司走的情况，这样我到家经常是 21:30 或者 22:00 以后。这个时候吃晚饭就太晚了，基本吃饭完了就睡觉了。并且，中午吃饭到这个时候，一般其实已经饿过劲了，那个时间反而没有那么饿了，我就慢慢开始晚上到家之后只吃几个水果。后来慢慢转为不吃东西，或者只吃很少的水果。有时候也会遇到快下班的时候非常饿，这个时候吃点小零食，也就可以了。这种方式减肥，早上和中午基本不控制自己，还是吃的比较好的。&lt;/p&gt;

&lt;p&gt;上面说了，这个阶段减掉了大概 10 多斤。中午饮食基本不控制，晚上不吃，或者很少吃（一个月有那么一两次推不开的）。&lt;/p&gt;

&lt;h1 id=&#34;第二阶段&#34;&gt;第二阶段&lt;/h1&gt;

&lt;p&gt;大概是从今年 2 月底从日本回来，开始实施，方法是锻炼加节食。&lt;/p&gt;

&lt;p&gt;锻炼的内容是 60 分钟椭圆机（我用的机器难度是 5，不同机器可能不一样），30 分钟运动后拉伸，30 分钟游泳。大概是每周 1，2，4，5 去，一周会休息三天。锻炼毕竟比较枯燥，所以需要中间休息一下调剂一下心情，如果你的体力耐力跟的上，可以不休息。&lt;/p&gt;

&lt;p&gt;上面的强度下来，进度大概是一周 3kg。我的情况 3 月 25 是 88.6kg，5 月 2 是 81.7kg，5.5 是 80kg。为什么比较慢呢？在这两个月内，我参加了一趟邮轮游大概一周，去了一趟沈阳，大概一周，还去了一趟日本大概一周。所以如果坚持应该可以更快，但是快速减重我感觉应该可能会有副作用，所以我也基本也是控制减一点，保持几天这样子，不让这个减重太快。另外，这段时间我是全职减肥，所以没有工作上面的压力，可能速度相对快一点。&lt;/p&gt;

&lt;h1 id=&#34;方法细节&#34;&gt;方法细节&lt;/h1&gt;

&lt;h2 id=&#34;mhr&#34;&gt;MHR&lt;/h2&gt;

&lt;p&gt;按照一些理论，在有氧运动一定时间 T 之后，保持一定的心率 HR 继续运动，就会开始消耗脂肪。所谓的 &lt;a href=&#34;https://www.douban.com/note/228079030/&#34; title=&#34;fat burning zone&#34;&gt;fat burning zone&lt;/a&gt; (搜索到的，仅供参考)。&lt;/p&gt;

&lt;p&gt;对于 T，我看有的说是 20 分钟，有的是 40 分钟。我一般的做法是持续运动 40-50 分钟，不超过一小时。&lt;/p&gt;

&lt;p&gt;对于心率，先看下面的公式&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;MHR(最大心率) = 220 - age
MHR = 206 - (0.88 x age)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上面是最大心率，有多种算法最后应该结果大致有个范围，然后你的减脂的 HR 范围就是 &lt;code&gt;MHR x (0.7 到 0.8)&lt;/code&gt; 之间。我算出来我的是大概 130-145.&lt;/p&gt;

&lt;p&gt;所以注意并不是越累越好，比如天天跑 5km 还追求速度，那个思路不对，那个不是减肥。只要心率到了加持续时间够长。，不管做什么都减肥。&lt;/p&gt;

&lt;h2 id=&#34;节食&#34;&gt;节食&lt;/h2&gt;

&lt;p&gt;如果想要减脂，必须要节食，并且节食之后，我发现不运动体重也会降，直到降到一个平衡点。&lt;/p&gt;

&lt;p&gt;节食并不是一下子就从原来中午晚上吃两碗米饭变成只吃一个苹果，这个也是应该有个循序渐进的过程，要不不说身体是否能接受，你自己就坚持不下来。&lt;/p&gt;

&lt;p&gt;我的建议是，逐步减少饭量，花 1-2 个月来完成这个过程，一定要给自己定一个什么时间点达到什么目标的方案，否则面对一个自己都觉得无法达到的目标，也会容易被各种诱惑吸引，然后放弃。&lt;/p&gt;

&lt;p&gt;节食期间，并非就一直得是清淡饮食，偶尔吃一次大餐也不是不行，但是最好安排在中午，并且吃了之后第二天早餐午餐一定要减少量。另外注意是「偶尔」，千万别当成常态。&lt;/p&gt;

&lt;p&gt;此外，也得注意要按时吃饭，节食本身就很痛苦了，如果不能按时吃饭，比如过了平时饭点再吃，容易吃多，影响节食效果。&lt;/p&gt;

&lt;p&gt;我自己的方案，如果今天上午不出门，那就最多喝一杯牛奶做早餐。如果要出门，可以接受大概半个馒头那么多的饮食量。中午也类似，如果不出门就少吃，如果要出门，可以适当比平时多一点点，避免晚上的时候很难熬，或者路上出现低血糖。&lt;/p&gt;

&lt;p&gt;我自己控制的结果，是在中午大概3点一顿自助餐的基础上，晚上6点又有不能推掉的酒局的情况下，中午一杯啤酒，晚上一杯红酒，然后第二天重量维持不变。自己感觉还是挺有成就感的，当然也很痛苦。&lt;/p&gt;

&lt;p&gt;我目前体重还没有到平台期，还不清楚节食结束之后反弹的情况，但是我自己的打算是平台期或者达到我的目标体重之后，我再继续维持低饮食量一段时间巩固下，把自己的饮食习惯培养好，不再能暴饮暴食的情况下，应该是可以适当放开饮食的。&lt;/p&gt;

&lt;ul&gt;
总结下：
&lt;li&gt;节食要循序渐进，不要一次就到位，食量可以比如每周减 1/4 的节奏安排。&lt;/li&gt;
&lt;li&gt;设定自己的目标，一阶段一阶段完成，不要一次设定一个看着无法做到的目标&lt;/li&gt;
&lt;li&gt;饮食要准时定量，实在受不了的时候，可以允许自己来一次暴食（不要暴饮，尤其是甜的饮料，酒等），但要注意控制次数&lt;/li&gt;
&lt;li&gt;毅力坚持很重要。我节食期间参加各种自助餐，火锅，聚餐等都能很好的控制自己的食欲。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;关于低血糖，特别讲一下，节食非常容易产生低血糖，建议按照自己的体力，健身之前最好吃一口东西（不要多），或者随身携带一些吃的，一旦感觉低血糖头晕，就补充一点。别产生什么危险。&lt;/p&gt;

&lt;p&gt;低血糖的时候，也会影响你做事情的效率，会发现什么事情都不想做，所以这个时候最好就吃点吧，不过要注意是这也是有控制的吃。&lt;/p&gt;

&lt;h2 id=&#34;跑步机-vs-椭圆机-vs-动感单车&#34;&gt;跑步机 vs 椭圆机 vs 动感单车&lt;/h2&gt;

&lt;ul&gt;
我自己家里买了一台动感单车，实际实践过之后，用这个有几个缺陷
&lt;li&gt;自己练没有动感。在操课房里面教练会带着不停的变换速度，动作，一方面让你觉得没那么无聊，另一方面也是能增加运动量。&lt;/li&gt;
&lt;li&gt;自己练容易损坏脚踝和膝盖。我自己在家练的时候，基本就是站上面运动 30+ 分钟，脚一直在单车上面脚尖踩着，练完之后脚会疼痛。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;我其实挺喜欢在外面跑步，尤其早上，但是因为体重大，好几次都是跑一周之后双腿膝盖会开始疼痛，只好作罢。健身房里面的跑步机冲击比路面跑步小，可以试试看。&lt;/p&gt;

&lt;p&gt;最近尝试了跑步机上面跑，坚持 2 周之后，还是出现了一只腿的膝盖疼痛，只好暂停。开始尝试椭圆机。&lt;/p&gt;

&lt;p&gt;跑步机上面跑强度比椭圆机肯定强很多，跑步机上面在一个不快的速度下面，我持续跑 15 分钟之后，心率就会达到 150，其实已经有点高了。&lt;/p&gt;

&lt;ul&gt;
跑步机的几个问题
&lt;li&gt;容易心率过快&lt;/li&gt;
&lt;li&gt;不方便听音乐看片子分散注意力&lt;/li&gt;
&lt;li&gt;不容易不间断坚持跑 30 - 40 分钟&lt;/li&gt;
&lt;li&gt;膝盖损伤&lt;/li&gt;
&lt;/ul&gt;

&lt;ul&gt;
最后发现椭圆机实在是很不错
&lt;li&gt;运动速度慢，不妨碍你看片子听音乐(这个非常重要，否则坚持50分钟很难)&lt;/li&gt;
&lt;li&gt;速度恒定，也就是心率恒定，你只需要选择一个适合你的减脂的心率的难度就可以了&lt;/li&gt;
&lt;li&gt;对膝盖冲击比较小&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;我用实际使用的就是椭圆机 Elliptical Trainer。一次 60 分钟，控制心率在 140 左右。高了就换近一点的把手，低了就换远一点的。&lt;/p&gt;

&lt;h2 id=&#34;运动后拉伸&#34;&gt;运动后拉伸&lt;/h2&gt;

&lt;p&gt;这个一定要做，可以参考 keep 这个 app 里面的一些教程做，另外就是自己看着健身房的设备练练。注意设定好节奏，比如一组 10 次，做 3 组。&lt;/p&gt;

&lt;p&gt;这个是拉伸，不是力量训练，所以不需要挑战自己的极限。控制好设备的重量。&lt;/p&gt;

&lt;h2 id=&#34;饮食注意&#34;&gt;饮食注意&lt;/h2&gt;

&lt;p&gt;我本身血压高，所以需要低盐。然后减脂的话，一般的讲法是不要吃或者少吃和糖类有关系的食物，比如糖，西瓜这些，以及很容易转换为糖类的食物，比如谷物，大米这些。可以吃肉类（瘦肉或者白肉，比如鸡肉鱼肉）。&lt;/p&gt;

&lt;p&gt;我以前基本没炒过青菜，这次发现光是做到不难吃的话，其实很简单。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;不用水煮直接凉拌：黄瓜，西红柿等，莴笋&lt;/li&gt;
&lt;li&gt;白水煮了就能接受的：西兰花，菜花&lt;/li&gt;
&lt;li&gt;水煮之后过油炒一下加点盐或者酱油的：油菜，蘑菇，小白菜，菠菜&lt;/li&gt;
&lt;li&gt;直接过油炒一下加盐或者酱油：芹菜&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;之前看了一本书，里面讲到几个低盐的方法，就是比如放入火腿肠等本身自带咸味的食材，或者往酸的方向走。对于凉拌菜，可以适当考虑加一点醋，发现还挺不错的。&lt;/p&gt;

&lt;h1 id=&#34;update&#34;&gt;Update&lt;/h1&gt;

&lt;p&gt;有上面这几招，应该可以让你短时间不会吃腻了。我中午基本就是吃一盘青菜，不吃主食。&lt;/p&gt;

&lt;h2 id=&#34;2017-6-9&#34;&gt;2017.6.9&lt;/h2&gt;

&lt;p&gt;更新一下, 从停止运动到现在已经大概一个多月了, 之前最低到了 78kg. 这一个月发现如果还按照之前的食量, 体重还会降. 但是我不打算继续让它降的, 所以也开始提升食量.&lt;/p&gt;

&lt;p&gt;最近两周我还出去国内玩了一趟, 吃饭吃的也挺多的, 时间也不固定, 到了当地还会尝试喝当地的一些米酒啤酒之类的, 到今天早上称重是 79kg. 感觉还可以.&lt;/p&gt;

&lt;h2 id=&#34;2017-6-30&#34;&gt;2017.6.30&lt;/h2&gt;

&lt;p&gt;再次更新一下，目前体重 77kg。目前吃喝的内容基本已经不需要太注意了，只是有意不要多吃，也避免吃谷物类。不过我也吃过几次米饭，面条，大饼什么的，目前体重还是保持住了。&lt;/p&gt;

&lt;h2 id=&#34;2017-11-26&#34;&gt;2017.11.26&lt;/h2&gt;

&lt;p&gt;目前又开始尝试减体重。因为发现工作的时候确实不是很好减，毕竟饿了的话工作都不能专心。上周我尝试吃了一周的 711 沙拉和水果，貌似这几天早上称重到了 74.8，低于了 75 了都，感觉也是有效果的，还在尝试。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
